<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Microsoft Learn C-sharp</title>
    <link href="/2024/04/04/Microsoft%20Learn%20C-sharp/"/>
    <url>/2024/04/04/Microsoft%20Learn%20C-sharp/</url>
    
    <content type="html"><![CDATA[<p>发现了微软官网的一个很有意思的教程，跟着再过一遍C#</p><h1 id="练习-编写第一个代码"><a href="#练习-编写第一个代码" class="headerlink" title="练习- 编写第一个代码"></a>练习- 编写第一个代码</h1><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C#">Console.WriteLine(<span class="hljs-string">&quot;hello world&quot;</span>);<br></code></pre></td></tr></table></figure><p>C#是大小写敏感的语言，对C#来说Console和console是完全不同的意思</p><p>如果用’hello world’会报错“Too many characters in character literal”（自变量）</p><p>代码编辑器会对代码进行预编译来监视潜在错误。</p><p>Console.WriteLine()比Console.Write()多加了个换行符</p><h1 id="了解工作原理"><a href="#了解工作原理" class="headerlink" title="了解工作原理"></a>了解工作原理</h1><p>这里我使用了一些个人色彩的解释而非较为严谨的解释，旨在传递感受。</p><h2 id="什么是编程语言"><a href="#什么是编程语言" class="headerlink" title="什么是编程语言"></a>什么是编程语言</h2><p>粤语（如果你不是以粤语为第一语言的话）</p><h2 id="什么是编译"><a href="#什么是编译" class="headerlink" title="什么是编译"></a>什么是编译</h2><p>广东翻译将粤语翻译成英语</p><h2 id="什么是语法"><a href="#什么是语法" class="headerlink" title="什么是语法"></a>什么是语法</h2><p>语法就是语法，你说话的方法，就像蜈蚣不会在意自己是从第几只脚开始走路一样，使用语法的人也不会在意自己说话是主谓宾还是定状补</p><h2 id="代码是如何工作的"><a href="#代码是如何工作的" class="headerlink" title="代码是如何工作的"></a>代码是如何工作的</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C#">Console.WriteLine(<span class="hljs-string">&quot;Hello World&quot;</span>);<br></code></pre></td></tr></table></figure><p>以上面的代码为例</p><p>Console部分称为【类】。【类】拥有【方法】，或者说【方法】存在于【类】中，若要访问方法 ，必须直到方法所在的类。</p><p>一个“.”将类和方法分隔，这是【成员访问运算符】。</p><p>WriteLine后的“（）”是【方法调用运算符】。</p><p>“；”是【句尾运算符】，语句是C#中的问政指令，分号指示编译器你已经完成了命令的输入。</p><h2 id="理解执行流"><a href="#理解执行流" class="headerlink" title="理解执行流"></a>理解执行流</h2><p>代码指令按顺序执行，一次一行，直到没有更多要执行的指令。某些指令要求CPU等待，其他指令可用于更改执行流。</p><h1 id="挑战：在-NET编辑器中编写代码，以显示两条消息"><a href="#挑战：在-NET编辑器中编写代码，以显示两条消息" class="headerlink" title="挑战：在.NET编辑器中编写代码，以显示两条消息"></a>挑战：在.NET编辑器中编写代码，以显示两条消息</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Output">This is the first line.<br>This is the second line.<br></code></pre></td></tr></table></figure><h1 id="查看解决方案"><a href="#查看解决方案" class="headerlink" title="查看解决方案"></a>查看解决方案</h1><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C#">Console.WriteLine(<span class="hljs-string">&quot;This is the first line.&quot;</span>);<br>Console.Write(<span class="hljs-string">&quot;This is &quot;</span>);<br>Console.Write(<span class="hljs-string">&quot;the second &quot;</span>);<br>Console.Write(<span class="hljs-string">&quot;line.&quot;</span>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C-sharp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Visual Studio快捷键</title>
    <link href="/2024/04/03/Visual%20Studio%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <url>/2024/04/03/Visual%20Studio%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="大小写"><a href="#大小写" class="headerlink" title="大小写"></a>大小写</h2><h4 id="小写-Ctrl-U"><a href="#小写-Ctrl-U" class="headerlink" title="小写 Ctrl+U"></a>小写 Ctrl+U</h4><h4 id="大写-Ctrl-Shift-U"><a href="#大写-Ctrl-Shift-U" class="headerlink" title="大写 Ctrl+Shift+U"></a>大写 Ctrl+Shift+U</h4><h2 id="选择单词"><a href="#选择单词" class="headerlink" title="选择单词"></a>选择单词</h2><h4 id="选中所有相同单词-Alt-Shift"><a href="#选中所有相同单词-Alt-Shift" class="headerlink" title="选中所有相同单词 Alt+Shift+;"></a>选中所有相同单词 Alt+Shift+;</h4><h4 id="整行移动-按住Alt-上下键可以将当前行或选中行上下移动"><a href="#整行移动-按住Alt-上下键可以将当前行或选中行上下移动" class="headerlink" title="整行移动 按住Alt+上下键可以将当前行或选中行上下移动"></a>整行移动 按住Alt+上下键可以将当前行或选中行上下移动</h4><h2 id="复制和剪切"><a href="#复制和剪切" class="headerlink" title="复制和剪切"></a>复制和剪切</h2><h4 id="复制当前行-Ctrl-D"><a href="#复制当前行-Ctrl-D" class="headerlink" title="复制当前行 Ctrl+D"></a>复制当前行 Ctrl+D</h4><h4 id="剪切-删除当前行-Ctrl-X"><a href="#剪切-删除当前行-Ctrl-X" class="headerlink" title="剪切&#x2F;删除当前行 Ctrl+X"></a>剪切&#x2F;删除当前行 Ctrl+X</h4><h2 id="跳转"><a href="#跳转" class="headerlink" title="跳转"></a>跳转</h2><h4 id="跳转到指定行-Ctrl-G"><a href="#跳转到指定行-Ctrl-G" class="headerlink" title="跳转到指定行 Ctrl+G"></a>跳转到指定行 Ctrl+G</h4>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Visual Studio Code</tag>
      
      <tag>快捷键</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C-sharp进阶</title>
    <link href="/2024/04/02/C-sharp%E8%BF%9B%E9%98%B6/"/>
    <url>/2024/04/02/C-sharp%E8%BF%9B%E9%98%B6/</url>
    
    <content type="html"><![CDATA[<h3 id="读取并编辑json数据"><a href="#读取并编辑json数据" class="headerlink" title="读取并编辑json数据"></a>读取并编辑json数据</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-keyword">using</span> Newtonsoft.Json;<br><span class="hljs-keyword">using</span> Newtonsoft.Json.Linq;<br><span class="hljs-keyword">using</span> System;<br><span class="hljs-keyword">using</span> System.IO;<br><span class="hljs-keyword">using</span> System.Text;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">DoJson</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>()</span><br>    &#123;<br>        <span class="hljs-comment">//读取外部json格式文件</span><br>        <span class="hljs-built_in">string</span> json = File.ReadAllText(<span class="hljs-string">@&quot;C:\Users\rolen\Documents\example\example_3.json&quot;</span>);<br>        <span class="hljs-comment">//反序列化json数据为.net对象</span><br>        JObject jo1 = (JObject)JsonConvert.DeserializeObject(json);<br>        <span class="hljs-comment">//第一层</span><br>        <span class="hljs-built_in">string</span> name = jo1[<span class="hljs-string">&quot;netbarname&quot;</span>].ToString();<br>        <span class="hljs-built_in">string</span> netbarCameraList = jo1[<span class="hljs-string">&quot;netbarCameraList&quot;</span>].ToString();<br>        Console.WriteLine(name);<br>        Console.WriteLine(netbarCameraList);<br>        <span class="hljs-comment">//第二层</span><br>        <span class="hljs-built_in">string</span> account = jo1[<span class="hljs-string">&quot;netbarCameraList&quot;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&quot;account&quot;</span>].ToString();<br>        Console.WriteLine(account);<br>        <span class="hljs-keyword">var</span> gid = jo1[<span class="hljs-string">&quot;netbarCameraList&quot;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&quot;gid&quot;</span>];<br>        <span class="hljs-built_in">int</span> gidValue = <span class="hljs-built_in">int</span>.Parse(gid.ToString());<br>        jo1[<span class="hljs-string">&quot;netbarCameraList&quot;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&quot;gid&quot;</span>] = gidValue * <span class="hljs-number">3</span>;<br>        Console.WriteLine(<span class="hljs-string">&quot;New gid value is:&quot;</span>+jo1[<span class="hljs-string">&quot;netbarCameraList&quot;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&quot;gid&quot;</span>]);<br>        String newjson =JsonConvert.SerializeObject(jo1,Formatting.Indented);<br>        File.WriteAllText(<span class="hljs-string">@&quot;C:\Users\rolen\Documents\example\example_3.json&quot;</span>,newjson);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-comment"><span class="hljs-doctag">///</span>Copyright(c) 2022,uZone All rights reserved.</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span>摘要：.json提取label数据脚本</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span>作者：Homovexillues</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span>日期：2024年4月3日</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span>说明：</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span>修订：</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span></span><br><span class="hljs-keyword">using</span> System;<br><span class="hljs-keyword">using</span> Newtonsoft.Json;<br><span class="hljs-keyword">using</span> Newtonsoft.Json.Linq;<br><span class="hljs-keyword">using</span> YamlDotNet.Serialization;<br><br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">DoJson</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">JsonSerialzer</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Serialize</span>(<span class="hljs-params">JObject jo1, <span class="hljs-built_in">string</span> filePath</span>)</span><br>        &#123;<br>            <span class="hljs-built_in">string</span> newJson = JsonConvert.SerializeObject(jo1, Formatting.Indented);<br>            File.WriteAllText(filePath, newJson);<br><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">JsonTools</span><br>    &#123;<br>        <span class="hljs-comment">//定义属性</span><br>        <span class="hljs-meta">#<span class="hljs-keyword">region</span></span><br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">double</span> x &#123;  <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">double</span> new_x &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">double</span> y &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">double</span> new_y &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">double</span> width &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;   <br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">double</span> new_width &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">double</span> height &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">double</span> new_height &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">double</span> image_width &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">double</span> image_height &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span>? type &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> new_type &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> frameIndex &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> instanceCount &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> framesCount &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> picture_frameIndex &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span>? imageUrl &#123;  <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span>? imageName &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> imageFrameIndex &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span>? id &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> counter_keyhole &#123;<span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> counter_light&#123;<span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> counter_license_plate &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> counter_wheel &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> counter_bottom_edge &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> counter_side_bumper &#123;  <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> counter_supporting_leg &#123;  <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> jsonfilePath &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> targetfilePath &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> yamlfilePath &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>        <span class="hljs-meta">#<span class="hljs-keyword">endregion</span></span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Data_a</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> a</span>)</span><br>        &#123;<br>            JObject jo1 = (JObject)JsonConvert.DeserializeObject(jsonfilePath);<br>            <span class="hljs-keyword">var</span> ymds = <span class="hljs-keyword">new</span> Deserializer();<br>            <span class="hljs-keyword">var</span> yamlObject = ymds.Deserialize&lt;<span class="hljs-built_in">dynamic</span>&gt;(<span class="hljs-keyword">new</span> StreamReader(yamlfilePath));<br>            <span class="hljs-keyword">var</span> c_names = yamlObject[<span class="hljs-string">&quot;c_names&quot;</span>];<br>            <br>            x = <span class="hljs-built_in">double</span>.Parse(jo1[<span class="hljs-string">&quot;instances&quot;</span>][a][<span class="hljs-string">&quot;children&quot;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&quot;cameras&quot;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&quot;frames&quot;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&quot;shape&quot;</span>][<span class="hljs-string">&quot;x&quot;</span>].ToString());<br>            y = <span class="hljs-built_in">double</span>.Parse(jo1[<span class="hljs-string">&quot;instances&quot;</span>][a][<span class="hljs-string">&quot;children&quot;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&quot;cameras&quot;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&quot;frames&quot;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&quot;shape&quot;</span>][<span class="hljs-string">&quot;y&quot;</span>].ToString());<br>            width = <span class="hljs-built_in">double</span>.Parse(jo1[<span class="hljs-string">&quot;instances&quot;</span>][a][<span class="hljs-string">&quot;children&quot;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&quot;cameras&quot;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&quot;frames&quot;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&quot;shape&quot;</span>][<span class="hljs-string">&quot;width&quot;</span>].ToString());<br>            height = <span class="hljs-built_in">double</span>.Parse(jo1[<span class="hljs-string">&quot;instances&quot;</span>][a][<span class="hljs-string">&quot;children&quot;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&quot;cameras&quot;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&quot;frames&quot;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&quot;shape&quot;</span>][<span class="hljs-string">&quot;height&quot;</span>].ToString());<br>            image_width = <span class="hljs-built_in">double</span>.Parse(jo1[<span class="hljs-string">&quot;frames&quot;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&quot;frames&quot;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&quot;imageWidth&quot;</span>].ToString());<br>            image_height = <span class="hljs-built_in">double</span>.Parse(jo1[<span class="hljs-string">&quot;frames&quot;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&quot;frames&quot;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&quot;imageHeight&quot;</span>].ToString());<br>            type = jo1[<span class="hljs-string">&quot;instances&quot;</span>][a][<span class="hljs-string">&quot;categoryName&quot;</span>].ToString();<br>            frameIndex = <span class="hljs-built_in">int</span>.Parse((jo1[<span class="hljs-string">&quot;instances&quot;</span>][a][<span class="hljs-string">&quot;children&quot;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&quot;cameras&quot;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&quot;frames&quot;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&quot;frameIndex&quot;</span>]).ToString());<br>            id = jo1[<span class="hljs-string">&quot;instances&quot;</span>][a][<span class="hljs-string">&quot;children&quot;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&quot;id&quot;</span>].ToString();<br><br>            <span class="hljs-comment">//处理图片数据 </span><br>            new_x = Math.Round(((x + width / <span class="hljs-number">2</span>) / image_width), <span class="hljs-number">6</span>);<br>            new_y = Math.Round(((y + height / <span class="hljs-number">2</span>) / image_height), <span class="hljs-number">6</span>);<br>            new_width = Math.Round((width / image_width), <span class="hljs-number">6</span>);<br>            new_height = Math.Round((height / image_height), <span class="hljs-number">6</span>);<br>            <span class="hljs-comment">//根据从yaml中读到的对应关系，将物品种类与数字对应</span><br>            <span class="hljs-keyword">if</span> (type == c_names[<span class="hljs-number">0</span>])<br>            &#123;<br><br>                new_type = <span class="hljs-number">0</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (type == c_names[<span class="hljs-number">1</span>])<br>            &#123;<br><br>                new_type = <span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (type == c_names[<span class="hljs-number">2</span>])<br>            &#123;<br><br>                new_type = <span class="hljs-number">2</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (type == c_names[<span class="hljs-number">3</span>])<br>            &#123;<br><br>                new_type = <span class="hljs-number">3</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (type == c_names[<span class="hljs-number">4</span>])<br>            &#123;<br><br>                new_type = <span class="hljs-number">4</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (type == c_names[<span class="hljs-number">5</span>])<br>            &#123;<br><br>                new_type = <span class="hljs-number">5</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (type == c_names[<span class="hljs-number">6</span>])<br>            &#123;<br><br>                new_type = <span class="hljs-number">6</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Data_b</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> b</span>)</span><br>        &#123;<br>            JObject jo1 = (JObject)JsonConvert.DeserializeObject(jsonfilePath);<br>            picture_frameIndex = <span class="hljs-built_in">int</span>.Parse(jo1[<span class="hljs-string">&quot;frames&quot;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&quot;frames&quot;</span>][b][<span class="hljs-string">&quot;frameIndex&quot;</span>].ToString());<br>            imageUrl = jo1[<span class="hljs-string">&quot;frames&quot;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&quot;frames&quot;</span>][b][<span class="hljs-string">&quot;imageUrl&quot;</span>].ToString();<br>            imageName = Path.GetFileName(imageUrl).Replace(<span class="hljs-string">&quot;.jpg&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>            imageFrameIndex = <span class="hljs-built_in">int</span>.Parse((jo1[<span class="hljs-string">&quot;frames&quot;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&quot;frames&quot;</span>][b][<span class="hljs-string">&quot;frameIndex&quot;</span>]).ToString());<br>        &#125;<br>        <span class="hljs-comment">//计数器 </span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Counter</span>()</span><br>        &#123;<span class="hljs-comment">//共标记了多少张图，每种图有多少张</span><br><br>            <span class="hljs-comment">//从yaml中提取集合数据</span><br>            <span class="hljs-keyword">var</span> ymds = <span class="hljs-keyword">new</span> Deserializer();<br>            <span class="hljs-keyword">var</span> yamlObject = ymds.Deserialize&lt;<span class="hljs-built_in">dynamic</span>&gt;(<span class="hljs-keyword">new</span> StreamReader(yamlfilePath));<br>            <span class="hljs-keyword">var</span> c_names = yamlObject[<span class="hljs-string">&quot;c_names&quot;</span>];<br><br>            <span class="hljs-keyword">if</span> (type == c_names[<span class="hljs-number">0</span>])<br>            &#123;<br>                counter_keyhole += <span class="hljs-number">1</span>;<br><br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (type == c_names[<span class="hljs-number">1</span>])<br>            &#123;<br>                counter_light += <span class="hljs-number">1</span>;<br><br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (type == c_names[<span class="hljs-number">2</span>])<br>            &#123;<br>                counter_license_plate += <span class="hljs-number">1</span>;<br><br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (type == c_names[<span class="hljs-number">3</span>])<br>            &#123;<br>                counter_wheel += <span class="hljs-number">1</span>;<br><br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (type == c_names[<span class="hljs-number">4</span>])<br>            &#123;<br>                counter_bottom_edge += <span class="hljs-number">1</span>;<br><br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (type == c_names[<span class="hljs-number">5</span>])<br>            &#123;<br>                counter_side_bumper += <span class="hljs-number">1</span>;<br><br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (type == c_names[<span class="hljs-number">6</span>])<br>            &#123;<br>                counter_supporting_leg += <span class="hljs-number">1</span>;<br><br>            &#125;<br><br>        &#125;<br><br>        <span class="hljs-comment">//三个参数（json文件位置，txt生成位置，yaml文件位置）已设置好默认位置，可手动修改</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">touch_txt</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> json_path= <span class="hljs-string">@&quot;C:\uzone\项目\2024\2024-02 PoC视觉\文档\图像训练第一批（20240403）\DataSet-HIT0805\raw.json&quot;</span>, <span class="hljs-built_in">string</span> target_path= <span class="hljs-string">@&quot;C:\uzone\项目\2024\2024-02 PoC视觉\文档\图像训练第一批（20240403）\DataSet-HIT0805\labels\train\&quot;</span>, <span class="hljs-built_in">string</span> yaml_path=<span class="hljs-string">@&quot;C:\uzone\项目\2024\2024-02 PoC视觉\文档\图像训练第一批（20240403）\HIT0403.yaml&quot;</span></span>)</span><br>        &#123;<br>            <span class="hljs-comment">//读取外部json格式文件</span><br>            jsonfilePath = File.ReadAllText(json_path);<br>            targetfilePath = target_path;<br>            yamlfilePath = yaml_path;<br>            JObject jo1 = (JObject)JsonConvert.DeserializeObject(jsonfilePath);<br>            <span class="hljs-built_in">int</span> instanceCount = ((JArray)jo1[<span class="hljs-string">&quot;instances&quot;</span>]).Count;<br>            <span class="hljs-built_in">int</span> framesCount = ((JArray)jo1[<span class="hljs-string">&quot;frames&quot;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&quot;frames&quot;</span>]).Count;<br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> b = <span class="hljs-number">0</span>; b &lt; framesCount; b++)<br>            &#123;<br>                Data_b(b);<br>                List&lt;<span class="hljs-built_in">string</span>&gt; toast_list = <span class="hljs-keyword">new</span> List&lt;<span class="hljs-built_in">string</span>&gt;();<br>                <span class="hljs-built_in">string</span> text_name = imageName + <span class="hljs-string">&quot;.txt&quot;</span>;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> a = <span class="hljs-number">0</span>; a &lt; instanceCount; a++)<br>                &#123;<br>                    <span class="hljs-comment">//从json中提取图片数据</span><br>                    Data_a(a);<br>                    <span class="hljs-built_in">string</span> toast_data = new_type + <span class="hljs-string">&quot; &quot;</span> + new_x + <span class="hljs-string">&quot; &quot;</span> + new_y + <span class="hljs-string">&quot; &quot;</span> + new_width + <span class="hljs-string">&quot; &quot;</span> + new_height;<br>                    <span class="hljs-keyword">if</span> (b == <span class="hljs-number">0</span>)<br>                    &#123;<br>                        Counter();<br><br>                    &#125;<br>                    <span class="hljs-comment">//创建txt文档</span><br>                    <span class="hljs-keyword">if</span> (frameIndex == imageFrameIndex)<br>                    &#123;<br>                        toast_list.Add(toast_data);<br>                        File.WriteAllLines(targetfilePath + text_name, toast_list);<br>                    &#125;<br><br>                &#125;<br><br><br>            &#125;<br>            <span class="hljs-built_in">string</span> counter_data = <span class="hljs-string">$&quot;共标记了<span class="hljs-subst">&#123;instanceCount&#125;</span>张图，其中:\n锁洞(0)有<span class="hljs-subst">&#123;counter_keyhole&#125;</span>张\n车灯(1)有<span class="hljs-subst">&#123;counter_light&#125;</span>张\n车牌(2)有<span class="hljs-subst">&#123;counter_license_plate&#125;</span>张\n轮胎(3)有<span class="hljs-subst">&#123;counter_wheel&#125;</span>张\n集装箱底部(4)有<span class="hljs-subst">&#123;counter_bottom_edge&#125;</span>张\n护栏(5)有<span class="hljs-subst">&#123;counter_side_bumper&#125;</span>张\n撑脚有<span class="hljs-subst">&#123;counter_supporting_leg&#125;</span>张&quot;</span>;<br>            <span class="hljs-built_in">string</span> counter_path = <span class="hljs-string">@&quot;C:\uzone\项目\2024\2024-02 PoC视觉\文档\图像训练第一批（20240403）\&quot;</span>;<br>            File.WriteAllText(counter_path + <span class="hljs-string">&quot;Counter.txt&quot;</span>, counter_data);<br>        &#125;<br>    &#125;<br><br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">OperateJson</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>()</span><br>        &#123;<br>            JsonTools jt = <span class="hljs-keyword">new</span> JsonTools();<br>            jt.touch_txt();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="从字符串中截取文件名-去掉字符串中的某部分"><a href="#从字符串中截取文件名-去掉字符串中的某部分" class="headerlink" title="从字符串中截取文件名&amp;去掉字符串中的某部分"></a>从字符串中截取文件名&amp;去掉字符串中的某部分</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-comment">//从地址中截取文件名</span><br><span class="hljs-built_in">string</span> yamlfilePath = <span class="hljs-string">@&quot;C:\Users\rolen\Documents\example\tangshan0805.yaml&quot;</span>;<br><span class="hljs-built_in">string</span> name = Path.GetFileName(yamlfilePath);<br><span class="hljs-comment">//去掉字符串中的某部分</span><br><span class="hljs-built_in">string</span> text = <span class="hljs-string">&quot;image.jpg&quot;</span>;<br><span class="hljs-built_in">string</span> name = text.Replace(<span class="hljs-string">&quot;.jpg&quot;</span>,<span class="hljs-string">&quot;&quot;</span>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C-sharp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python库-json</title>
    <link href="/2024/03/31/Python%E5%BA%93-json/"/>
    <url>/2024/03/31/Python%E5%BA%93-json/</url>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#用loads()函数读取json</span><br>&gt;&gt;&gt;stringofjsonData =<span class="hljs-string">&#x27;&#123;&quot;name&quot;:&quot;Zophie&quot;,&quot;isCate&quot;:true,&quot;miceCaught&quot;:0,&quot;felineIQ&quot;:null&#125;&#x27;</span><br>&gt;&gt;&gt;<span class="hljs-keyword">import</span> json<br>&gt;&gt;&gt;jsonDataAsPythonValue = json.loads(stringofjsonData)<br>&gt;&gt;&gt;jsonDataAsPythonValue<br>&#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Zophie&#x27;</span>, <span class="hljs-string">&#x27;isCate&#x27;</span>: <span class="hljs-literal">True</span>, <span class="hljs-string">&#x27;miceCaught&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;felineIQ&#x27;</span>: <span class="hljs-literal">None</span>&#125;<br><span class="hljs-comment">#loads()函数会将数据返回为一个Python字典，但是python字典是没有顺序的，因此打印jsonDataAsPythonValue可能会以不同的顺序出现</span><br>&gt;&gt;&gt;data = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">[&#123;</span><br><span class="hljs-string">    &quot;name&quot;: &quot;小明&quot;,</span><br><span class="hljs-string">    &quot;height&quot;: &quot;170&quot;,</span><br><span class="hljs-string">    &quot;age&quot;: &quot;18&quot;</span><br><span class="hljs-string">&#125;, &#123;</span><br><span class="hljs-string">     &quot;name&quot;: &quot;小红&quot;,</span><br><span class="hljs-string">    &quot;height&quot;: &quot;165&quot;,</span><br><span class="hljs-string">    &quot;age&quot;: &quot;20&quot;</span><br><span class="hljs-string">&#125;]</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>&gt;&gt;&gt;new_data=json.loads(data)<br>&gt;&gt;&gt;<span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(data))<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;str&#x27;</span>&gt;<br>&gt;&gt;&gt;<span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(new_data))<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;list&#x27;</span>&gt;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> json<br>data = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">[&#123;</span><br><span class="hljs-string">    &quot;name&quot;: &quot;小明&quot;,</span><br><span class="hljs-string">    &quot;height&quot;: &quot;170&quot;,</span><br><span class="hljs-string">    &quot;age&quot;: &quot;18&quot;</span><br><span class="hljs-string">&#125;, &#123;</span><br><span class="hljs-string">     &quot;name&quot;: &quot;小红&quot;,</span><br><span class="hljs-string">    &quot;height&quot;: &quot;165&quot;,</span><br><span class="hljs-string">    &quot;age&quot;: &quot;20&quot;</span><br><span class="hljs-string">&#125;]</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>new_data = json.loads(data)<br><br>name_1 = new_data[<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;name&#x27;</span>]<br>name_2 = new_data[<span class="hljs-number">1</span>][<span class="hljs-string">&#x27;name&#x27;</span>]<br><span class="hljs-built_in">print</span>(name_1)<br><span class="hljs-built_in">print</span>(name_2)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python库-shutil</title>
    <link href="/2024/03/31/Python%E5%BA%93-shutil/"/>
    <url>/2024/03/31/Python%E5%BA%93-shutil/</url>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#将文件复制到指定位置</span><br>&gt;&gt;&gt;shutil.copy(<span class="hljs-string">&#x27;test.py&#x27;</span>,<span class="hljs-string">&#x27;toast_picture&#x27;</span>)<br><span class="hljs-string">&#x27;toast_picture\\test.py&#x27;</span><br><span class="hljs-comment">#将整个文件夹复制到指定位置</span><br>&gt;&gt;&gt;shutil.copytree(<span class="hljs-string">&#x27;toast_picture&#x27;</span>,<span class="hljs-string">&#x27;toast_picture_backup&#x27;</span>)<br><span class="hljs-string">&#x27;toast_picture_backup&#x27;</span><br><span class="hljs-comment">#将文件移动到指定位置</span><br>&gt;&gt;&gt;shutil.move(<span class="hljs-string">&#x27;test.py&#x27;</span>,<span class="hljs-string">&#x27;toast_picture&#x27;</span>)<br><span class="hljs-string">&#x27;toast_picture\\test.py&#x27;</span><br><span class="hljs-comment">#shutil.rmtree(path)将删除path处的文件夹，包括子文件</span><br>&gt;&gt;&gt;shutil.rmtree(<span class="hljs-string">&#x27;toast_picture_backup&#x27;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python库-os</title>
    <link href="/2024/03/31/Python%E5%BA%93-os/"/>
    <url>/2024/03/31/Python%E5%BA%93-os/</url>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#用os.path.abspath()函数来获取绝对路径</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>os.path.abspath(<span class="hljs-string">&#x27;.&#x27;</span>)<br><span class="hljs-string">&#x27;C:\\Python34\\Scripts&#x27;</span><br><span class="hljs-comment">#用os.path.isabs(&#x27;.&#x27;)</span><br>&gt;&gt;&gt;os.path.isabs(<span class="hljs-string">&#x27;.&#x27;</span>)<br><span class="hljs-literal">False</span><br>&gt;&gt;&gt;os.path.isabs(os.path.abspath(<span class="hljs-string">&#x27;.&#x27;</span>))<br><span class="hljs-comment">#用os.listdir(path)将返回文件名字符串的列表</span><br>&gt;&gt;&gt;os.path.listdir(<span class="hljs-string">&#x27;.&#x27;</span>)<br>[<span class="hljs-string">&#x27;data.xlsx&#x27;</span>,<span class="hljs-string">&#x27;test.py&#x27;</span>]<br><span class="hljs-comment">#用os.path.join()可以返回一个文件路径的字符串</span><br>&gt;&gt;&gt;os.path.join(<span class="hljs-string">&#x27;C:\\&#x27;</span>,<span class="hljs-string">&#x27;Users&#x27;</span>,<span class="hljs-string">&#x27;Homovexillues&#x27;</span>,<span class="hljs-string">&#x27;Download&#x27;</span>)<br><span class="hljs-string">&#x27;C:\\Users\\Homovexillues\\Download&#x27;</span><br><span class="hljs-comment">#os.unlink(path)将删除path处的文件</span><br>&gt;&gt;&gt;os.unlink(<span class="hljs-string">&#x27;toast_picture\\test.py&#x27;</span>)<br><span class="hljs-comment">#os.rmdir(path)将删除path处的空文件夹</span><br>&gt;&gt;&gt;os.rmdir(path)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python库-openpyxl</title>
    <link href="/2024/03/30/Python%E5%BA%93-openpyxl/"/>
    <url>/2024/03/30/Python%E5%BA%93-openpyxl/</url>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#打开Excel文档</span><br>workbook = openpyxl.load_workbook(<span class="hljs-string">&#x27;data.xlsx&#x27;</span>)<br><span class="hljs-comment">#openpyxl.load_workbook()函数接收文件名，返回一个workbook数据类型的值。这个workbook对象代表这个Excel文件，有点类似File对象代表一个打开的文本文件。</span><br><span class="hljs-comment">#data.xlsx需要在当前工作目录才能处理它。可以使用os.getcwd()获取当前工作目录，再用os.chdir()改变当前工作目录。</span><br><span class="hljs-comment">#用get_sheet_names()方法可以取得工作薄中所有表名的列表</span><br>&gt;&gt;&gt;workbook.get_sheet_names()<br>[<span class="hljs-string">&#x27;Sheet1&#x27;</span>,<span class="hljs-string">&#x27;Sheet2&#x27;</span>,<span class="hljs-string">&#x27;Sheet3&#x27;</span>]<br>&gt;&gt;&gt;Sheet1=workbook[<span class="hljs-string">&#x27;Sheet1&#x27;</span>]<br>&gt;&gt;&gt;Sheet1<br>&lt;Worksheet <span class="hljs-string">&quot;Sheet1&quot;</span>&gt;<br>&gt;&gt;&gt;<span class="hljs-built_in">type</span>(Sheet1)<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;openpyxl.worksheet.worksheet.Worksheet&#x27;</span>&gt;<br>&gt;&gt;&gt;Sheet1.title<br><span class="hljs-string">&#x27;Sheet1&#x27;</span><br><span class="hljs-comment">#可以按名字访问cell对象</span><br>&gt;&gt;&gt;<span class="hljs-built_in">print</span>(Sheet1[<span class="hljs-string">&#x27;A1&#x27;</span>].value)<br><span class="hljs-string">&#x27;Apples&#x27;</span><br><span class="hljs-comment">#Cell对象有一个value属性，它也有row（行数）、column（列数）和coordinate（坐标，如A1）属性</span><br><span class="hljs-comment">#也可以直接通过坐标来访问</span><br>&gt;&gt;&gt;Sheet1.cell(row=<span class="hljs-number">1</span>,column=<span class="hljs-number">2</span>)<br>&lt;Cell Sheet1.B1&gt;<br>&gt;&gt;&gt;Sheet1.cell(row=<span class="hljs-number">1</span>,column=<span class="hljs-number">2</span>).value<br><span class="hljs-string">&#x27;Apples&#x27;</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python处理Excel</title>
    <link href="/2024/03/30/Python%E5%A4%84%E7%90%86Excel/"/>
    <url>/2024/03/30/Python%E5%A4%84%E7%90%86Excel/</url>
    
    <content type="html"><![CDATA[<h3 id="根据Excel表格中的内容筛选文件"><a href="#根据Excel表格中的内容筛选文件" class="headerlink" title="根据Excel表格中的内容筛选文件"></a>根据Excel表格中的内容筛选文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#用来筛选文件夹中的文件是否以Excel表中某个特定范围内的格子内容为名，</span><br><span class="hljs-comment">#且结尾为指定内容结尾，剪切到另一文件夹下</span><br><span class="hljs-keyword">import</span> openpyxl<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> shutil<br><span class="hljs-comment">#选定Excel表格</span><br>workbook = openpyxl.load_workbook(<span class="hljs-string">&#x27;data.xlsx&#x27;</span>)<br><span class="hljs-comment">#选定工作表</span><br>worksheet = workbook[<span class="hljs-string">&#x27;E_CODE_Train&#x27;</span>]<br><span class="hljs-comment">#选定读取范围</span><br>read_range=worksheet[<span class="hljs-string">&#x27;G2&#x27;</span>:<span class="hljs-string">&#x27;G2103&#x27;</span>]<br><span class="hljs-comment">#先创建一个空数组，以后用来存放正确的文件名</span><br>right_name=[]<br><span class="hljs-keyword">for</span> cell <span class="hljs-keyword">in</span> read_range:<br>    <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> cell:<br>        <span class="hljs-keyword">if</span>(c.value!=<span class="hljs-string">&#x27;Null&#x27;</span>):<br>            <span class="hljs-comment">#print(worksheet.cell(row=c.row,column=1).value)</span><br>            <span class="hljs-comment">#将G列不为Null那一行的A列数据写入数组</span><br>            right_name.append(worksheet.cell(row=c.row,column=<span class="hljs-number">1</span>).value)<br><span class="hljs-comment">#原文件夹</span><br>raw_picture_folder_path = <span class="hljs-string">&#x27;C:\\Users\\rolen\\Downloads\\HIT视觉POC\\raw_picture&#x27;</span><br><span class="hljs-comment">#目标文件夹</span><br>targat_folder_path =<span class="hljs-string">&#x27;C:\\Users\\rolen\\Downloads\\HIT视觉POC\\target_picture&#x27;</span><br><span class="hljs-comment">#另外的筛选条件</span><br>filter_1=[<span class="hljs-string">&#x27;RT.jpg&#x27;</span>,<span class="hljs-string">&#x27;TP.jpg&#x27;</span>,<span class="hljs-string">&#x27;RR.jpg&#x27;</span>,<span class="hljs-string">&#x27;LT.jpg&#x27;</span>,<span class="hljs-string">&#x27;FR.jpg&#x27;</span>]<br><span class="hljs-comment">#遍历这个文件夹下的文件</span><br><span class="hljs-keyword">for</span> file <span class="hljs-keyword">in</span> os.listdir(raw_picture_folder_path):<br>    <span class="hljs-comment">#如果文件名开头在数组里且结尾是给定的几个结尾之一</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">any</span>(file.startswith(prefix) <span class="hljs-keyword">and</span> file.endswith(endfix) <span class="hljs-keyword">for</span> prefix <span class="hljs-keyword">in</span> right_name <span class="hljs-keyword">for</span> endfix <span class="hljs-keyword">in</span> filter_1):<br>        ex_file = os.path.join(raw_picture_folder_path,file)<br>        now_file = os.path.join(targat_folder_path,file)<br>        shutil.move(ex_file,now_file)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vscode快捷键</title>
    <link href="/2024/03/29/Vscode%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <url>/2024/03/29/Vscode%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    
    <content type="html"><![CDATA[<h4 id="注释与取消注释"><a href="#注释与取消注释" class="headerlink" title="注释与取消注释"></a>注释与取消注释</h4><ul><li><p>Ctrl+K+C 注释 </p></li><li><p>Ctrl+K+U取消注释</p></li></ul><h4 id="批量重命名"><a href="#批量重命名" class="headerlink" title="批量重命名"></a>批量重命名</h4><ul><li>F2更改变量名</li><li>Ctrl+F2更改所有匹配项</li></ul>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vscode</tag>
      
      <tag>快捷键</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python自动化</title>
    <link href="/2024/03/29/Python%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    <url>/2024/03/29/Python%E8%87%AA%E5%8A%A8%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="增"><a href="#增" class="headerlink" title="增"></a>增</h1><h1 id="删"><a href="#删" class="headerlink" title="删"></a>删</h1><h1 id="改"><a href="#改" class="headerlink" title="改"></a>改</h1><h2 id="批量重命名"><a href="#批量重命名" class="headerlink" title="批量重命名"></a>批量重命名</h2><h4 id="将文件名前的数字去除"><a href="#将文件名前的数字去除" class="headerlink" title="将文件名前的数字去除"></a>将文件名前的数字去除</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<span class="hljs-comment">#与操作系统交互的函数</span><br><span class="hljs-keyword">import</span> re<span class="hljs-comment">#提供正则表达式相关函数</span><br><br>files = os.listdir(<span class="hljs-string">&#x27;.&#x27;</span>)<span class="hljs-comment">#获取当前目录下的所有文件和文件夹的名字</span><br><span class="hljs-keyword">for</span> file <span class="hljs-keyword">in</span> files:<br>    <span class="hljs-keyword">if</span> file.endswith(<span class="hljs-string">&#x27;.pdf&#x27;</span>):<span class="hljs-comment">#检查是否以.pdf结束</span><br>        <span class="hljs-keyword">if</span> re.<span class="hljs-keyword">match</span>(<span class="hljs-string">r&#x27;\d+-&#x27;</span>,file):<span class="hljs-comment">#</span><br>            new_file = re.sub(<span class="hljs-string">r&#x27;\d+-&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>,file)<br>            os.rename(file,new_file)<br></code></pre></td></tr></table></figure><h4 id="将文件名后缀修改"><a href="#将文件名后缀修改" class="headerlink" title="将文件名后缀修改"></a>将文件名后缀修改</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> re<br><br>files = os.listdir(<span class="hljs-string">&#x27;.&#x27;</span>)<br><span class="hljs-keyword">for</span> file <span class="hljs-keyword">in</span> files:<br>    <span class="hljs-keyword">if</span> file.endswith(<span class="hljs-string">&#x27;.mp3.lrc&#x27;</span>):<br>        new_file = re.sub(<span class="hljs-string">r&#x27;\.mp3\.lrc$&#x27;</span>,<span class="hljs-string">&#x27;.lrc&#x27;</span>,file)<br>        os.rename(file,new_file)<br>    <span class="hljs-keyword">elif</span> file.endswith(<span class="hljs-string">&#x27;.mp3.vtt&#x27;</span>):<span class="hljs-comment">#如果发现是vtt格式则自动修改为lrc格式</span><br>        new_file = re.sub(<span class="hljs-string">r&#x27;\.mp3\.vtt$&#x27;</span>,<span class="hljs-string">&#x27;.vtt&#x27;</span>,file)<br>        os.rename(file,new_file)<br>        vtt_to_lrc(new_file)<br>    <span class="hljs-keyword">elif</span> file.endswith(<span class="hljs-string">&#x27;.wav.vtt&#x27;</span>):<br>        new_file = re.sub(<span class="hljs-string">r&#x27;\.wav\.vtt$&#x27;</span>,<span class="hljs-string">&#x27;.vtt&#x27;</span>,file)<br>        os.rename(file,new_file)<br>        vtt_to_lrc(new_file)<br></code></pre></td></tr></table></figure><h2 id="格式转换"><a href="#格式转换" class="headerlink" title="格式转换"></a>格式转换</h2><h4 id="vtt转lrc"><a href="#vtt转lrc" class="headerlink" title="vtt转lrc"></a>vtt转lrc</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> re<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">vtt_to_lrc</span>(<span class="hljs-params">vtt_file</span>):<br>    <span class="hljs-comment"># 打开 .vtt 文件</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(vtt_file, <span class="hljs-string">&#x27;r&#x27;</span>,encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        lines = f.readlines()<br><br>    <span class="hljs-comment"># 准备 .lrc 文件内容</span><br>    lrc_content = <span class="hljs-string">&#x27;&#x27;</span><br><br>    <span class="hljs-comment"># 遍历 .vtt 文件中的行</span><br>    <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> lines:<br>        <span class="hljs-comment"># 如果该行是时间戳行</span><br>        <span class="hljs-keyword">if</span> re.<span class="hljs-keyword">match</span>(<span class="hljs-string">r&#x27;\d&#123;2&#125;:\d&#123;2&#125;:\d&#123;2&#125;.\d&#123;3&#125; --&gt; \d&#123;2&#125;:\d&#123;2&#125;:\d&#123;2&#125;.\d&#123;3&#125;&#x27;</span>, line):<br>            <span class="hljs-comment"># 将时间戳转换为 .lrc 格式</span><br>            start_time, end_time = line.split(<span class="hljs-string">&#x27; --&gt; &#x27;</span>)<br>            start_min, start_sec = start_time.split(<span class="hljs-string">&#x27;:&#x27;</span>)[-<span class="hljs-number">2</span>:]<br>            start_sec, start_msec = start_sec.split(<span class="hljs-string">&#x27;.&#x27;</span>)<br>            lrc_timestamp = <span class="hljs-string">f&#x27;[<span class="hljs-subst">&#123;start_min&#125;</span>:<span class="hljs-subst">&#123;start_sec&#125;</span>.<span class="hljs-subst">&#123;start_msec&#125;</span>]&#x27;</span><br>            lrc_content += lrc_timestamp<br>        <span class="hljs-keyword">elif</span> line.strip() <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> line.startswith(<span class="hljs-string">&#x27;WEBVTT&#x27;</span>) <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> re.<span class="hljs-keyword">match</span>(<span class="hljs-string">r&#x27;NOTE.*&#x27;</span>, line) <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> re.<span class="hljs-keyword">match</span>(<span class="hljs-string">r&#x27;\d+&#x27;</span>, line):<br>            <span class="hljs-comment"># 如果该行是字幕行，将其添加到 .lrc 文件内容中</span><br>            lrc_content += line<br><br>    <span class="hljs-comment"># 将 .lrc 文件内容写入新的 .lrc 文件</span><br>    lrc_file = vtt_file.replace(<span class="hljs-string">&#x27;.vtt&#x27;</span>, <span class="hljs-string">&#x27;.lrc&#x27;</span>)<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(lrc_file, <span class="hljs-string">&#x27;w&#x27;</span>,encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        f.write(lrc_content)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;vtt_file&#125;</span> 已成功转换为 <span class="hljs-subst">&#123;lrc_file&#125;</span>.&quot;</span>)<br></code></pre></td></tr></table></figure><h1 id="查"><a href="#查" class="headerlink" title="查"></a>查</h1>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>脚本</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C-sharp基础</title>
    <link href="/2024/03/29/C-sharp%E5%9F%BA%E7%A1%80/"/>
    <url>/2024/03/29/C-sharp%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<p>一个矩形类的实现</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-keyword">using</span> System;<br><span class="hljs-keyword">using</span> System.Runtime.InteropServices;<br><span class="hljs-keyword">using</span> System.Security.Cryptography.X509Certificates;<br><span class="hljs-keyword">namespace</span> <span class="hljs-title">RectangleApplication</span><br>&#123;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title">Rectangle</span><br>    &#123;<br>        <span class="hljs-built_in">double</span> length;<br>        <span class="hljs-built_in">double</span> width;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Acceptdetails</span>()</span><br>        &#123;<br>            length = <span class="hljs-number">4.5</span>;<br>            width = <span class="hljs-number">3.5</span>;<br><br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">double</span> <span class="hljs-title">GetArrea</span>()</span><br>        &#123;<br>            <span class="hljs-keyword">return</span> length * width;<br><br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Display</span>()</span><br>        &#123;<br>            Console.WriteLine(<span class="hljs-string">&quot;legth:&#123;0&#125;&quot;</span>, length);<br>            Console.WriteLine(<span class="hljs-string">&quot;width:&#123;0&#125;&quot;</span>, width);<br>            Console.WriteLine(<span class="hljs-string">&quot;Area:&#123;0&#125;&quot;</span>, GetArrea());<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title">ExecuteRectangle</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params">String[] args</span>)</span><br>        &#123;<br>            Rectangle r = <span class="hljs-keyword">new</span> Rectangle();<br>            r.Acceptdetails();<br>            r.Display();<br>            Console.ReadLine();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="using-关键字"><a href="#using-关键字" class="headerlink" title="using 关键字"></a>using 关键字</h3><p>任何C#程序中的第一条语句都是：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-keyword">using</span> System;<br></code></pre></td></tr></table></figure><p><strong>using</strong>关键字用于在程序中包含命名空间。一个程序可以包含多个using语句</p><h3 id="C-中的注释"><a href="#C-中的注释" class="headerlink" title="C#中的注释"></a>C#中的注释</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-comment">// 这是一行注释</span><br><span class="hljs-comment">/*这个是</span><br><span class="hljs-comment">多行注释</span><br><span class="hljs-comment">的使用格式*/</span><br></code></pre></td></tr></table></figure><p>rectangle类有两个成员变量length和width和三个成员函数executerectangle、getarea和display</p><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><ul><li>必须以字母，下划线或@开头</li><li>第一个字符不能是数字</li><li>不包含任何嵌入的空格或符号</li></ul><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ul><li>值类型</li><li>引用类型</li><li>指针类型</li></ul><h4 id="值类型，引用类型以及栈和堆的关系"><a href="#值类型，引用类型以及栈和堆的关系" class="headerlink" title="值类型，引用类型以及栈和堆的关系"></a>值类型，引用类型以及栈和堆的关系</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">//以下文字中出现“栈、堆”均为比喻意而非实际意</span><br><span class="hljs-built_in">int</span> n1 = <span class="hljs-number">5</span>;<br><span class="hljs-built_in">int</span> n2 =n1;<br><span class="hljs-comment">//首先在栈中开辟一个内存空间来保存n1的值5，接着再在栈中开辟一个新的内存空间来保存n2的值5，所以显示出来的结果是5 5，然后将n2在栈中对应的空间保存的值修改为7，故显示出来的结果为5 7</span><br><span class="hljs-comment">//引用类型，声明一个引用类型的时候，首先是在“堆”中开辟一个内存空间来存放对应的值，然后在“栈”中开辟一个内存空间用于保存在“堆”中开辟的内存空间的地址。当系统调用引用类型的时候，首先去“栈”中获取到地址，然后根据地址在“堆”中找到对应的内存空间来获取到对应值</span><br><span class="hljs-built_in">string</span>[] a1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">string</span>[] &#123;<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;c&quot;</span> &#125;;<br><span class="hljs-built_in">string</span>[] a2 = a1;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; a2.Length; i++)<br>&#123;<br>    Console.WriteLine(a2[i]+<span class="hljs-string">&quot; &quot;</span>);<span class="hljs-comment">// a b c</span><br>&#125;<br>a1[<span class="hljs-number">2</span>] = <span class="hljs-string">&quot;d&quot;</span>;<br>Console.WriteLine();<span class="hljs-comment">//换行</span><br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>;i &lt; a1.Length;i++)<br>&#123;<br>    Console.WriteLine(a2[i]+<span class="hljs-string">&quot; &quot;</span>);<span class="hljs-comment">// a b d</span><br>&#125;<br>Console.WriteLine();<br><span class="hljs-comment">//首先是在&quot;堆&quot;中开辟了一块内存空间(假设:0x55)，来保存数组的值，然后在&quot;栈&quot;中开辟一个内存空间(a1)用于保存地址0x55。当将a1赋值给a2的时候，是将地址赋值给了a2，即a2获得了地址0x55,因此当修改a1的值的时候，0x55对应内存空间中的值已经被改变，此时a2输出的值也是a b d </span><br><span class="hljs-built_in">string</span> a = <span class="hljs-string">&quot;1 2 3&quot;</span>;<br>stirng b = a;<br><br></code></pre></td></tr></table></figure><h3 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h3><p>引用类型不包含存储在变量中的 实际数据，但它们包含对变量的引用——它们指向同一个内存位置。</p><p>使用多个变量时，引用类型可以指向一个内存位置。如果内存位置的数据是由一个变量改变的，其它变量回自动反映这种值的变化。</p><p><strong>内置的</strong>引用类型有<strong>object、dynamic、string</strong></p><h4 id="Object对象类型"><a href="#Object对象类型" class="headerlink" title="Object对象类型"></a>Object对象类型</h4><p>对象object类型是C#通用类型系统（Common Type System-CTS）中所有数据类型的终极类型。object是System.Object类的别名，所以对象Object类型可以被分配任何其它类型（值类型、引用类型、预定义类型或用户自定义类型）的值。但是，在分配之前，需要先进行类型转换。</p><p>当一个类型转换为对象类型时，被称之为<strong>装箱</strong>，转换为值类型时，则称之为<strong>拆箱</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-built_in">object</span> obj;<br>obj = <span class="hljs-number">100</span>; <span class="hljs-comment">//这是装箱</span><br></code></pre></td></tr></table></figure><h5 id="关于装箱和拆箱"><a href="#关于装箱和拆箱" class="headerlink" title="关于装箱和拆箱"></a>关于装箱和拆箱</h5><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">//装箱</span><br><span class="hljs-built_in">int</span> val = <span class="hljs-number">8</span>;<br><span class="hljs-built_in">object</span> obj = val;<span class="hljs-comment">//整数型数据转换为了对象型数据</span><br><span class="hljs-comment">//拆箱</span><br><span class="hljs-built_in">int</span> val = <span class="hljs-number">8</span>;<br><span class="hljs-built_in">object</span> obj = val;<span class="hljs-comment">//先装箱</span><br><span class="hljs-built_in">int</span> nval = (<span class="hljs-built_in">int</span>)obj;<span class="hljs-comment">//再拆箱</span><br><span class="hljs-comment">//只有装过箱的数据才能拆箱</span><br></code></pre></td></tr></table></figure><h5 id="obj和int之间的关系"><a href="#obj和int之间的关系" class="headerlink" title="obj和int之间的关系"></a>obj和int之间的关系</h5><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-keyword">namespace</span> <span class="hljs-title">DataTypeApplication</span><br>&#123;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>        &#123;<br>            <span class="hljs-built_in">int</span> a = <span class="hljs-number">9</span>;<br>            <span class="hljs-built_in">object</span> obj;<br>            obj = a;<br>            obj = <span class="hljs-number">10</span>;<br>            Console.WriteLine(<span class="hljs-string">&quot;2:&#123;0&#125;&quot;</span>,a);<span class="hljs-comment">//输出2:9</span><br>            Console.WriteLine(<span class="hljs-string">&quot;1:&#123;0&#125;&quot;</span>, obj);<span class="hljs-comment">//输出2:10</span><br>            Console.ReadLine();<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//设置值int a = 9; obj = 10;不会对a的值进行改变，obj只是复制了int a的值出来然后进行操作而已。</span><br></code></pre></td></tr></table></figure><h4 id="Dynamic动态类型"><a href="#Dynamic动态类型" class="headerlink" title="Dynamic动态类型"></a>Dynamic动态类型</h4><p>可以存储任何类型的值在动态数据类型变量中。哲学变量的类型检查是在运行时发生的。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-built_in">dynamic</span> &lt;variable_name&gt; = <span class="hljs-keyword">value</span>;<br><span class="hljs-built_in">dynamic</span> d = <span class="hljs-number">20</span>;<br></code></pre></td></tr></table></figure><p>动态类型与对象类型相似，但是对象类型变量的类型检查是在编译时发生的，而动态类型变量的类型检查是在运行时发生的。</p><h4 id="String字符串类型"><a href="#String字符串类型" class="headerlink" title="String字符串类型"></a>String字符串类型</h4><p>字符串stirng类型允许您给变量分配任何字符串值，字符串类型是System.String类的别名。他是从对象Object类型派生的。字符串Stirng类型的值可以通过两种形式进行分配；引号和@引号。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C#">String str = <span class="hljs-string">&quot;runoob.com&quot;</span>;<br><span class="hljs-string">@&quot;runoob.com&quot;</span>;<br><span class="hljs-comment">//字符串前加@可以将转义字符(\)当作普通字符对待，比如</span><br>String str = <span class="hljs-string">@&quot;C:\\Windows&quot;</span>;<span class="hljs-comment">//相当于</span><br>String str = <span class="hljs-string">&quot;C:\\\\Windows&quot;</span>;<br><span class="hljs-comment">//@字符串中可以任意换行，换行符及缩进空格都计算在字符串长度之内</span><br> String str2 = <span class="hljs-string">@&quot;&lt;script type=&quot;&quot; text/javascript&quot;&quot;&gt;</span><br><span class="hljs-string">     &lt;!--</span><br><span class="hljs-string">     --&gt;</span><br><span class="hljs-string"> &lt;/script&gt;&quot;</span>;<br></code></pre></td></tr></table></figure><p>用户自定义引用类型有:class、interface或delegate。</p><h4 id="指针类型"><a href="#指针类型" class="headerlink" title="指针类型"></a>指针类型</h4><p>和C&#x2F;C++的指针没差</p><p>声明指针类型的语法</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c#">type* identifier;<br><span class="hljs-built_in">char</span>* cptr;<br><span class="hljs-built_in">int</span>* iptr;<br></code></pre></td></tr></table></figure><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><ul><li>隐式类型转换</li><li>显式类型转换</li></ul><h4 id="隐式类型转换"><a href="#隐式类型转换" class="headerlink" title="隐式类型转换"></a>隐式类型转换</h4><p>隐式类型转换是指将一个较小范围的数据类型转换为较大范围的数据类型时，编译器会自动完成类型转换，这些转换是C#默认的以安全方式进行的转换，不会导致数据丢失。</p><p>例如，从小的整数型转换为大的整数型，从派生类转换为基类。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-built_in">byte</span> b = <span class="hljs-number">10</span>;<br><span class="hljs-built_in">int</span> i = b; <span class="hljs-comment">//隐式转换，不需要显式转换</span><br></code></pre></td></tr></table></figure><p>将一个整数赋值给一个长整数，或将一个浮点数赋值给一个双精度浮点数，这种转换不会导致数据丢失</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-built_in">int</span> intValue = <span class="hljs-number">42</span>;<br><span class="hljs-built_in">long</span> longValue = intValue; <span class="hljs-comment">//隐式转换， 从int到long</span><br></code></pre></td></tr></table></figure><h4 id="显式转换"><a href="#显式转换" class="headerlink" title="显式转换"></a>显式转换</h4><p>显式类型转换，即强制类型转换。</p><p>即将一个较大范围的数据类型转换为较小范围的数据类型时，或者将一个对象类型转换为另一个对象类型时，需要使用强制类型转换符号进行显示转换，强制转换会造成数据丢失。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">//int到byte</span><br><span class="hljs-built_in">int</span> i = <span class="hljs-number">10</span>;<br><span class="hljs-built_in">byte</span> b = (<span class="hljs-built_in">byte</span>)i; <span class="hljs-comment">//显式转换，需要使用强制类型转换符号</span><br><span class="hljs-comment">//double到int</span><br><span class="hljs-built_in">double</span> doubleValue = <span class="hljs-number">3.14</span>;<br><span class="hljs-built_in">int</span> intValue = (<span class="hljs-built_in">int</span>)doubleValue;<br><span class="hljs-comment">//int到float</span><br><span class="hljs-built_in">int</span> intValue = <span class="hljs-number">42</span>;<br><span class="hljs-built_in">float</span> floatValue = (<span class="hljs-built_in">float</span>)intValue; <span class="hljs-comment">//损失精度</span><br><span class="hljs-comment">//int到string</span><br><span class="hljs-built_in">int</span> intValue = <span class="hljs-number">123</span>;<br><span class="hljs-built_in">string</span> stringValue = intValue.ToString();<br></code></pre></td></tr></table></figure><p>静态变量在整个类中可用</p><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><ul><li><p>public</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-keyword">using</span> System;<br><span class="hljs-keyword">using</span> System.Drawing;<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">DataTypeApplication</span><br>&#123;<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title">Rectangle</span><br>    &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">double</span> length;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">double</span> width;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">double</span> <span class="hljs-title">GetArea</span>()</span><br>        &#123;<br>            <span class="hljs-keyword">return</span> length*width;<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Dsiplay</span>()</span><br>        &#123;<br>            Console.WriteLine(<span class="hljs-string">&quot;长度： &#123;0&#125;&quot;</span>, length);<br>            Console.WriteLine(<span class="hljs-string">&quot;宽度： &#123;0&#125;&quot;</span>, width);<br>            Console.WriteLine(<span class="hljs-string">&quot;面积： &#123;0&#125;&quot;</span>, GetArea());<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>        &#123;<br>            Rectangle r = <span class="hljs-keyword">new</span> Rectangle();<br>            r.length = <span class="hljs-number">4.5</span>;<br>            r.width = <span class="hljs-number">3.5</span>;<br>            r.Dsiplay();<br>            Console.ReadLine();<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//在上述实例中，成员变量length和width被声明为public，所以它们可以被函数Main()使用Rectangle类的实例r来访问</span><br></code></pre></td></tr></table></figure></li><li><p>private</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-comment">//private访问修饰符指允许一个类中的函数访问它的私有成员，即使是类的实例也不能访问它的私有成员。</span><br><span class="hljs-keyword">using</span> System;<br><span class="hljs-keyword">using</span> System.Drawing;<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">DataTypeApplication</span><br>&#123;<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title">Rectangle</span><br>    &#123;<br>        <span class="hljs-comment">//私有成员变量</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-built_in">double</span> length;<br>        <span class="hljs-keyword">private</span> <span class="hljs-built_in">double</span> width;<br>        <br>        <span class="hljs-comment">//公有方法，用于从用户输入获取矩形的长度和宽度</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">AcceptDetails</span>()</span><br>        &#123;<br>            Console.WriteLine(<span class="hljs-string">&quot;请输入长度&quot;</span>);<br>            length = Convert.ToDouble(Console.ReadLine());<br>            Console.WriteLine(<span class="hljs-string">&quot;请输入宽度:&quot;</span>);<br>            width = Convert.ToDouble(Console.ReadLine());<br>        &#125;<br>        <span class="hljs-comment">//公有方法，用于计算矩形的面积</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">double</span> <span class="hljs-title">GetArea</span>()</span><br>        &#123;<br>            <span class="hljs-keyword">return</span> length*width;<br>        &#125;<br>        <span class="hljs-comment">//公有方法，用于显示矩形的属性和面积</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Dsiplay</span>()</span><br>        &#123;<br>            Console.WriteLine(<span class="hljs-string">&quot;长度： &#123;0&#125;&quot;</span>, length);<br>            Console.WriteLine(<span class="hljs-string">&quot;宽度： &#123;0&#125;&quot;</span>, width);<br>            Console.WriteLine(<span class="hljs-string">&quot;面积： &#123;0&#125;&quot;</span>, GetArea());<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>        &#123;<br>            <span class="hljs-comment">//创建实例</span><br>            Rectangle r = <span class="hljs-keyword">new</span> Rectangle();<br>            <span class="hljs-comment">//通过公有方法从用户输入中获取矩形的长度和宽度</span><br>            r.AcceptDetails();<br>            <span class="hljs-comment">//通过公有方法显示矩形的属性和面积</span><br>            r.Dsiplay();<br>            Console.ReadLine();<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//在上述实例中，length和width被声明为私有成员变量，以防止直接在类的外部访问和修改</span><br><span class="hljs-comment">//在progra类中，通过创建rectangle类的实例，然后调用其公有方法，来执行操作，这样主程序无法直接访问和修改矩形的长度和宽度，而是通过类提供的公有接口来进行操作，实现了封装</span><br></code></pre></td></tr></table></figure></li><li><p>protected</p><p>protected访问修饰符允许子类访问它的成员变量和函数，这样有助于实现继承。</p></li><li><p>internal</p><p>带有internal访问修饰符的任何成员可以被定义在该成员所定义的应用程序内的任何类或方法访问。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> System;<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">RectangleApplication</span><br>&#123;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title">Rectangle</span><br>    &#123;<br>        <span class="hljs-comment">//成员变量</span><br>        <span class="hljs-keyword">internal</span> <span class="hljs-built_in">double</span> length;<br>        <span class="hljs-keyword">internal</span> <span class="hljs-built_in">double</span> width;<br>        <br>        <span class="hljs-function"><span class="hljs-built_in">double</span> <span class="hljs-title">GetArea</span>()</span><br>        &#123;<br>            <span class="hljs-keyword">return</span> length * width;<br>        &#125;<br>       <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Display</span>()</span><br>        &#123;<br>            Console.WriteLine(<span class="hljs-string">&quot;长度： &#123;0&#125;&quot;</span>, length);<br>            Console.WriteLine(<span class="hljs-string">&quot;宽度： &#123;0&#125;&quot;</span>, width);<br>            Console.WriteLine(<span class="hljs-string">&quot;面积： &#123;0&#125;&quot;</span>, GetArea());<br>        &#125;<br>    &#125;<span class="hljs-comment">//end class Rectangle    </span><br>    <span class="hljs-keyword">class</span> <span class="hljs-title">ExecuteRectangle</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>        &#123;<br>            Rectangle r = <span class="hljs-keyword">new</span> Rectangle();<span class="hljs-comment">//Rectangle这个类定义的r里可以，它再定义个s或者t也可以</span><br>            r.length = <span class="hljs-number">4.5</span>;<br>            r.width = <span class="hljs-number">3.5</span>;<br>            r.Display();<br>            Console.ReadLine();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>protected internal</p><p>允许在本类，派生类或者包含在该类的程序集中访问。也被用于实现继承。</p></li></ul><h5 id="摘自菜鸟教程的神评论"><a href="#摘自菜鸟教程的神评论" class="headerlink" title="摘自菜鸟教程的神评论"></a>摘自菜鸟教程的神评论</h5><ul><li>public事件，地球人都知道，全公开</li><li>protected事件，A，B，D知道（A和他的所有儿子知道，妻子C不知道）</li><li>private事件，只有A知道（隐私？心事？）</li><li>internal事件，A，B，C知道（A家里人都知道，私生子D不知道）</li><li>protected internal事件，A，B，C，D都知道,其它人不知道</li></ul><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C#">&lt;Access Specifier&gt; &lt;Return Type&gt; &lt;Method Name&gt;(Parameter List)<br>&#123;<br>   Method Body<br>&#125;<br>&lt;访问修饰符&gt; &lt;返回类型&gt; &lt;方法名&gt;(参数列表)<br>&#123;<br>   方法主体<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="递归方法调用"><a href="#递归方法调用" class="headerlink" title="递归方法调用"></a>递归方法调用</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> System;<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">CalculatorApplication</span><br>&#123;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title">NumberManipulator</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-title">factorial</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> num</span>)</span><br>        &#123;<br>            <span class="hljs-built_in">int</span> result;<br><br>            <span class="hljs-keyword">if</span> (num == <span class="hljs-number">1</span>)<br>            &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                result = factorial(num - <span class="hljs-number">1</span>) * num;<br>                <span class="hljs-keyword">return</span> result;<br>            &#125;<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params">String[] args</span>)</span><br>        &#123;<br>            NumberManipulator n = <span class="hljs-keyword">new</span> NumberManipulator();<br>            Console.WriteLine(<span class="hljs-string">&quot;6的阶乘是:&#123;0&#125;&quot;</span>, n.factorial(<span class="hljs-number">6</span>));<br>            Console.WriteLine(<span class="hljs-string">&quot;7的阶乘是:&#123;0&#125;&quot;</span>,n.factorial(<span class="hljs-number">7</span>));<br>            Console.ReadLine();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="可空类型"><a href="#可空类型" class="headerlink" title="可空类型"></a>可空类型</h3><h4 id="单问号？和双问号？？"><a href="#单问号？和双问号？？" class="headerlink" title="单问号？和双问号？？"></a>单问号？和双问号？？</h4><p>?单问号用于对int，double，bool等无法直接赋值为null的数据结构类型进行null赋值，意思是这个数据结构类型是nullable类型的。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-built_in">int</span>? i = <span class="hljs-number">3</span>;<br><span class="hljs-comment">//等同于</span><br>Nullable&lt;<span class="hljs-built_in">int</span>&gt; i = <span class="hljs-keyword">new</span> Nullable&lt;<span class="hljs-built_in">int</span>&gt;(<span class="hljs-number">3</span>);<br><span class="hljs-built_in">int</span> i;<span class="hljs-comment">//默认值0</span><br><span class="hljs-built_in">int</span>? i;<span class="hljs-comment">//默认值null</span><br></code></pre></td></tr></table></figure><p>??双问号用于判断一个变量在为null的时候返回一个指定的值。</p><h5 id="nullable类型"><a href="#nullable类型" class="headerlink" title="nullable类型"></a>nullable类型</h5><p>可空类型可以表示其基础值类型正常范围内的值，再加上一个null值。</p><p>如Nullable<int32>读作”可空的int32“，可以被赋值为 -2,147,483,648 到 2,147,483,647 之间的任意值，也可以被赋值为 null 值。</p><p>类似的，nullable<bool>变量可以被赋值为true或false或null。在处理数据库和其他包含可能未赋值的元素的数据类型时，将null赋值给数值类型或布尔型的功能特别有用。例如，数据库中的布尔型字段可以储存true或false，或者，该字段也可以未定义。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> System;<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">CalculatorApplication</span><br>&#123;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title">NullablesAtShow</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>        &#123;<br>            <span class="hljs-built_in">int</span>? num1 = <span class="hljs-literal">null</span>;<br>            <span class="hljs-built_in">int</span>? num2 = <span class="hljs-number">45</span>;<br>            <span class="hljs-built_in">double</span>? num3 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">double</span>?();<br>            <span class="hljs-built_in">double</span>? num4 = <span class="hljs-number">3.14159</span>;<br>            <span class="hljs-built_in">bool</span>? boolval = <span class="hljs-keyword">new</span> <span class="hljs-built_in">bool</span>?();<br>            Console.WriteLine(<span class="hljs-string">&quot;显示可空类型的值：&#123;0&#125;，&#123;1&#125;，&#123;2&#125;，&#123;3&#125;&quot;</span>,num1,num2,num3,num4);<br>            Console.WriteLine(<span class="hljs-string">&quot;一个可空的布尔值：&#123;0&#125;&quot;</span>, boolval);<br>            Console.ReadLine();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Null合并运算符？？"><a href="#Null合并运算符？？" class="headerlink" title="Null合并运算符？？"></a>Null合并运算符？？</h4><p>用于定义可空类型和引用类型的默认值。Null合并运算符为类型转换定义了一个预设值，以防可空类型的值为Null，如果第一个操作数的值为Null，则运算符返回第二个操作数的值，否则返回第一个操作数的值。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-keyword">using</span> System;<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">CalculatorApplication</span><br>&#123;<br>  <br>    <span class="hljs-keyword">class</span> <span class="hljs-title">NullablesAtShow</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>        &#123;<br>            <span class="hljs-built_in">double</span>? num1 = <span class="hljs-literal">null</span>;<br>            <span class="hljs-built_in">double</span>? num2 = <span class="hljs-number">3.14159</span>;<br>            <span class="hljs-built_in">double</span> num3;<br>            num3 = num1 ?? <span class="hljs-number">5.34</span>;<br>            Console.WriteLine(<span class="hljs-string">&quot;num3的值为:&#123;0&#125;&quot;</span>, num3);<br>            num3 = num2 ?? <span class="hljs-number">5.34</span>;<br>            Console.WriteLine(<span class="hljs-string">&quot;num3的值为:&#123;0&#125;&quot;</span>, num3);<br>            Console.ReadLine();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-comment">//声明语法</span><br>datatype[] arrayName;<br></code></pre></td></tr></table></figure><h5 id="初始化数组"><a href="#初始化数组" class="headerlink" title="初始化数组"></a>初始化数组</h5><p>声明一个数组不会在内存中初始化数组。当初始化数组变量时，可以赋值给数组。<br>数组是一个引用类型，所以需要使用关键字来创建数组实例</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-built_in">double</span>[] balance = <span class="hljs-keyword">new</span> <span class="hljs-built_in">double</span>[<span class="hljs-number">10</span>];<br></code></pre></td></tr></table></figure><h5 id="赋值给数组"><a href="#赋值给数组" class="headerlink" title="赋值给数组"></a>赋值给数组</h5><p>可以通过使用索引号赋值给一个单独的数组元素</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C#">balance[<span class="hljs-number">0</span>] = <span class="hljs-number">4500.0</span>;<br></code></pre></td></tr></table></figure><p>可以在声明数组的同时给数组赋值</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-built_in">double</span>[] balance = &#123;<span class="hljs-number">2340.0</span>,<span class="hljs-number">4523.69</span>,<span class="hljs-number">3421.0</span>&#125;;<br></code></pre></td></tr></table></figure><p>可以创建并初始化数组</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-built_in">int</span> [] marks = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[<span class="hljs-number">5</span>] &#123;<span class="hljs-number">98</span>，<span class="hljs-number">99</span>，<span class="hljs-number">91</span>，<span class="hljs-number">87</span>，<span class="hljs-number">95</span>&#125;;<br></code></pre></td></tr></table></figure><p>在此情况下也可省略数组的大小</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-built_in">int</span> [] marks = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[] &#123;<span class="hljs-number">98</span>，<span class="hljs-number">99</span>，<span class="hljs-number">91</span>，<span class="hljs-number">87</span>，<span class="hljs-number">95</span>&#125;;<br></code></pre></td></tr></table></figure><p>可以赋值一个数组变量到另一个目标数组中。这种情况下，目标和源会指向相同的数组位置。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-built_in">int</span> [] marks = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[] &#123;<span class="hljs-number">98</span>，<span class="hljs-number">99</span>，<span class="hljs-number">91</span>，<span class="hljs-number">87</span>，<span class="hljs-number">95</span>&#125;;<br><span class="hljs-built_in">int</span> [] score = marks;<br></code></pre></td></tr></table></figure><p>当创建一个元素的时候，C#编译器会根据数组类型隐式初始化每个数组元素为一个默认值。如int数组的所有元素都会被初始化为0.</p><p>访问数组元素</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-built_in">double</span> salary = balance[<span class="hljs-number">9</span>];<br></code></pre></td></tr></table></figure><h5 id="使用foreach循环"><a href="#使用foreach循环" class="headerlink" title="使用foreach循环"></a>使用foreach循环</h5><p>可以使用foreach语句来遍历数组</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> System;<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">ArrayApplicaiton</span><br>&#123;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title">MyArray</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>        &#123;<br>            <span class="hljs-built_in">int</span>[] n = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[<span class="hljs-number">10</span>];<br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; n.Length; i++)<br>            &#123;<br>                n[i] = i+<span class="hljs-number">100</span>;<br>            &#125;<br>            <span class="hljs-keyword">foreach</span>(<span class="hljs-built_in">int</span> j <span class="hljs-keyword">in</span> n)<br>            &#123;<br>                <span class="hljs-built_in">int</span> i = j - <span class="hljs-number">100</span>;<br>                Console.WriteLine(<span class="hljs-string">&quot;Element[&#123;0&#125;]=&#123;1&#125;&quot;</span>,i,j);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p>使用*.ToString()进行格式化</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs C#">DateTime dt = <span class="hljs-keyword">new</span> DateTime(<span class="hljs-number">2017</span>,<span class="hljs-number">4</span>,<span class="hljs-number">1</span>,<span class="hljs-number">13</span>,<span class="hljs-number">16</span>,<span class="hljs-number">32</span>,<span class="hljs-number">108</span>);<br>dt.ToString(<span class="hljs-string">&quot;y yy yyy yyyy&quot;</span>);<span class="hljs-comment">//17 17 2017 2017</span><br>dt.ToString(<span class="hljs-string">&quot;M MM MMM MMMM&quot;</span>);<span class="hljs-comment">//4  04 四月 四月</span><br>dt.ToString(<span class="hljs-string">&quot;d dd ddd dddd&quot;</span>);<span class="hljs-comment">//1  01 周六 星期六</span><br>dt.ToString(<span class="hljs-string">&quot;t tt&quot;</span>);<span class="hljs-comment">//下 下午</span><br>dt.ToString(<span class="hljs-string">&quot;H HH&quot;</span>);<span class="hljs-comment">//13 13</span><br>dt.ToString(<span class="hljs-string">&quot;h hh&quot;</span>);<span class="hljs-comment">//1  01</span><br>dt.ToString(<span class="hljs-string">&quot;m mm&quot;</span>);<span class="hljs-comment">//16 16</span><br>dt.ToString(<span class="hljs-string">&quot;s ss&quot;</span>);<span class="hljs-comment">//32 32</span><br>dt.ToString(<span class="hljs-string">&quot;F FF FFF FFFF FFFFF FFFFFF FFFFFFF&quot;</span>);<span class="hljs-comment">//1 1  108 108  108   108    108</span><br>dt.ToString(<span class="hljs-string">&quot;f ff fff ffff fffff ffffff fffffff&quot;</span>);<span class="hljs-comment">//1 10 108 1080 10800 108000 1080000</span><br>dt.ToString(<span class="hljs-string">&quot;z zz zzz&quot;</span>);<span class="hljs-comment">//+8 +08 +08:00</span><br><br>dt.ToString(<span class="hljs-string">&quot;yyyy/MM/dd HH:mm:ss.fff&quot;</span>);　<span class="hljs-comment">//2017/04/01 13:16:32.108</span><br>dt.ToString(<span class="hljs-string">&quot;yyyy/MM/dd dddd&quot;</span>);　　　　　　<span class="hljs-comment">//2017/04/01 星期六</span><br>dt.ToString(<span class="hljs-string">&quot;yyyy/MM/dd dddd tt hh:mm&quot;</span>); <span class="hljs-comment">//2017/04/01 星期六 下午 01:16</span><br>dt.ToString(<span class="hljs-string">&quot;yyyyMMdd&quot;</span>);　　　　　　　　　<span class="hljs-comment">//20170401</span><br>dt.ToString(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss.fff&quot;</span>);　<span class="hljs-comment">//2017-04-01 13:16:32.108</span><br></code></pre></td></tr></table></figure><h3 id="Struct"><a href="#Struct" class="headerlink" title="Struct"></a>Struct</h3><p>类和结构在设计和使用时有不同的考虑因素，类适合表示复杂的对象和行为，支持继承和多态，而结构则更适合表示轻量级数据和值类型以提高性能并避免引用的管理开销。</p><ul><li>结构是<strong>值类型</strong>：它们在栈上分配内存而非在堆上，当结构实例传递给方法或赋值给另一变量时，将复制整个结构内容。</li><li>类是<strong>引用类型</strong>：它们在堆上分配内存。当类实例传递给方法或赋值给另一个变量时，实际上是传递引用（内存地址）而不是整个对象的副本。</li></ul><p>默认构造函数：</p><ul><li><strong>结构不能有无参数的构造函数</strong></li><li><strong>类可以有无参数的构造函数</strong></li></ul><h3 id="Enum"><a href="#Enum" class="headerlink" title="Enum"></a>Enum</h3><p>声明语法</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-built_in">enum</span> &lt;enum_name&gt;<br>&#123;<br>    enumeration list<br>&#125;;<br><span class="hljs-built_in">enum</span> &lt;枚举类型名称&gt;<br>&#123;<br>   用逗号分隔的标识符列表<br>&#125;;<br><span class="hljs-built_in">enum</span> Days &#123;Sun,Mon,Tue,Wed,Thu,Fri,Sat&#125;<br></code></pre></td></tr></table></figure><p>枚举列表中每个符号代表一个整数值，一个比它前面的符号大的整数值。默认情况下第一个枚举符号的值是0；</p><p>实例</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> System;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">EnumTest</span><br>&#123;<br>    <span class="hljs-built_in">enum</span> Day &#123; Sun, Mon, Tue, Wed, Thu, Fri, Sat &#125;;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>    &#123;<br>        <span class="hljs-built_in">int</span> x = (<span class="hljs-built_in">int</span>)Day.Sun;<br>        <span class="hljs-built_in">int</span> y = (<span class="hljs-built_in">int</span>)Day.Fri;<br>        Console.WriteLine(<span class="hljs-string">&quot;Sun = &#123;0&#125;&quot;</span>, x);<br>        Console.WriteLine(<span class="hljs-string">&quot;Fri = &#123;0&#125;&quot;</span>, y);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>也可以自定义每个符号的值</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-built_in">enum</span> Days&#123;<br>    Mon = <span class="hljs-number">72</span>;<br>    Wed = <span class="hljs-number">33</span>;<br>    ...<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><ul><li>访问标识符指定了对类及其成员的访问规则，如果没有指定，则使用默认的访问标识符。类默认的访问标识符是<strong>internal</strong>，成员的默认访问标识符是<strong>private</strong>。</li></ul><h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><p>类的构造函数是一个特殊的成员函数，当创建类的新对象时执行。</p><p>构造函数的名称与类的名称完全相同，它没有任何返回类型。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> System;<br><span class="hljs-keyword">namespace</span> <span class="hljs-title">LineApplication</span><br>&#123;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title">Line</span><br>    &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-built_in">double</span> length;<span class="hljs-comment">//线条的长度</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Line</span>()</span><br>        &#123;<br>            Console.WriteLine(<span class="hljs-string">&quot;对象已创建&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setLength</span>(<span class="hljs-params"><span class="hljs-built_in">double</span> len</span>)</span><br>        &#123;<br>            length = len;<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">double</span> <span class="hljs-title">getLength</span>()</span><br>        &#123;<br>            <span class="hljs-keyword">return</span> length;<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>        &#123;<br>            Line line = <span class="hljs-keyword">new</span> Line();<br>            <span class="hljs-comment">//这句执行成功之后就会返回“对象已创建”</span><br>            <span class="hljs-comment">//设置线条长度</span><br>            line.setLength(<span class="hljs-number">6.0</span>);<br>            Console.WriteLine(<span class="hljs-string">&quot;线条的长度&#123;0&#125;&quot;</span>,line.getLength());<br>            Console.ReadKey();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>默认的构造函数没有任何参数。但是如果需要一个带有参数的构造函数可以有参数，这种构造函数叫参数化构造函数。这种技术可以在创建对象的同时给对象赋初始值。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> System;<br><span class="hljs-keyword">namespace</span> <span class="hljs-title">LineApplication</span><br>&#123;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title">Line</span><br>    &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-built_in">double</span> length;<span class="hljs-comment">//线条的长度</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Line</span>(<span class="hljs-params"><span class="hljs-built_in">double</span> len</span>)</span><br>        &#123;<br>            Console.WriteLine(<span class="hljs-string">&quot;对象已创建,length=&#123;0&#125;&quot;</span>,len);<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setLength</span>(<span class="hljs-params"><span class="hljs-built_in">double</span> len</span>)</span><br>        &#123;<br>            length = len;<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">double</span> <span class="hljs-title">getLength</span>()</span><br>        &#123;<br>            <span class="hljs-keyword">return</span> length;<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>        &#123;<br>            Line line = <span class="hljs-keyword">new</span> Line(<span class="hljs-number">10.0</span>);<br>            Console.WriteLine(<span class="hljs-string">&quot;线条的长度&#123;0&#125;&quot;</span>, line);<br>            <span class="hljs-comment">//设置线条长度</span><br>            line.setLength(<span class="hljs-number">6.0</span>);<br>            Console.WriteLine(<span class="hljs-string">&quot;线条的长度&#123;0&#125;&quot;</span>,line.getLength());<br>            Console.ReadKey();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="C-中的析构函数"><a href="#C-中的析构函数" class="headerlink" title="C#中的析构函数"></a>C#中的析构函数</h4><p>类的析构函数是类的一个特殊成员函数，当类的对象超出范围时执行。</p><p>析构函数的名称是在类的名称前加一个“~”作为前缀，不返回值，也不带任何参数。</p><p>析构函数用于在结束程序（如关闭文件，释放内存）之前释放资源。析构函数不能继承或重载。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> System;<br><span class="hljs-keyword">namespace</span> <span class="hljs-title">LineApplication</span><br>&#123;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title">Line</span><br>    &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-built_in">double</span> length;<span class="hljs-comment">//线条的长度</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Line</span>()</span><br>        &#123;<br>            Console.WriteLine(<span class="hljs-string">&quot;对象已创建&quot;</span>);<br>        &#125;<br>        ~Line()<br>        &#123;<br>            Console.WriteLine(<span class="hljs-string">&quot;对象已删除&quot;</span>);<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setLength</span>(<span class="hljs-params"><span class="hljs-built_in">double</span> len</span>)</span><br>        &#123;<br>            length = len;<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">double</span> <span class="hljs-title">getLength</span>()</span><br>        &#123;<br>            <span class="hljs-keyword">return</span> length;<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>        &#123;<br>            Line line = <span class="hljs-keyword">new</span> Line();<br>       <br>            <span class="hljs-comment">//设置线条长度</span><br>            line.setLength(<span class="hljs-number">6.0</span>);<br>            Console.WriteLine(<span class="hljs-string">&quot;线条的长度&#123;0&#125;&quot;</span>, line.getLength());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="静态成员"><a href="#静态成员" class="headerlink" title="静态成员"></a>静态成员</h4><p>可以用static将一个成员定义为静态的，当声明一个成员为静态时，意味着无论有多少个类的对象被创建，只会有一个该静态成员的副本。</p><p>关键字意味着类中只有一个该成员的实例。静态变量用于定义常量，因为它们的值可以通过直接调用类而不需要创建类的实例来获取。静态变量可在成员函数或类的定义外部进行初始化。也可以在类的定义内部初始化静态变量。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> System;<br><span class="hljs-keyword">namespace</span> <span class="hljs-title">StaticVarApplication</span><br>&#123;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title">StaticVar</span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> num;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">count</span>()</span>&#123;<br>            num++;<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-title">getNum</span>()</span><br>        &#123;<br>            <span class="hljs-keyword">return</span> num;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title">StaticTester</span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span>&#123;<br>            StaticVar s1 = <span class="hljs-keyword">new</span> StaticVar();<br>            StaticVar s2 = <span class="hljs-keyword">new</span> StaticVar();<br>            s1.count();<br>            s2.count();<br>            s1.count();<br>            s2.count();<br>            s1.count();<br>            s2.count();<br>            Console.WriteLine(<span class="hljs-string">&quot;s1的变量num:&#123;0&#125;&quot;</span>,s1.getNum());<br>            Console.WriteLine(<span class="hljs-string">&quot;s2的变量num:&#123;0&#125;&quot;</span>,s2.getNum());<br>            Console.ReadKey();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c#">s1 的变量 num： <span class="hljs-number">6</span><br>s2 的变量 num： <span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><p>也可以将成员函数声明为static。这样的函数只能访问静态变量。<strong>静态函数在对象被创建之前就已经存在</strong>。以下的实例为静态函数的用法：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> System;<br><span class="hljs-keyword">namespace</span> <span class="hljs-title">StaticVarApplication</span><br>&#123;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title">StaticVar</span><br>    &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> num;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">count</span>()</span><br>        &#123;<br>            num++;<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-title">getNum</span>()</span><br>        &#123;<br>            <span class="hljs-keyword">return</span> num;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title">StaticTester</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>        &#123;<br>            StaticVar s = <span class="hljs-keyword">new</span> StaticVar();<br>            s.count();<br>            s.count();<br>            s.count();<br>            Console.WriteLine(<span class="hljs-string">&quot;变量num:&#123;0&#125;&quot;</span>, s.getNum()); <br>            Console.ReadKey();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>不支持多重继承，但支持接口的多重继承，一个类可实现多个接口。</p><p><strong>一个类可继承多个接口，但只能继承自一个类。</strong></p><p>创建派生类的语法如下</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c#">&lt;访问修饰符&gt; <span class="hljs-keyword">class</span>&lt;基类&gt;&#123;    <br>&#125;<br><span class="hljs-keyword">class</span> &lt;派生类&gt;:&lt;基类&gt;&#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>派生类会继承基类的成员，除非它们被明确的标记为私有。</p><p>派生类可以通过关键字base类调用基类的构造函数和方法。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> System;<br><span class="hljs-keyword">namespace</span> <span class="hljs-title">InheritanceApplication</span><br>&#123;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title">Shape</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setWidth</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> w</span>)</span><br>        &#123;<br>            width = w;<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setHeight</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> h</span>)</span><br>        &#123;<br>            height = h;<br>        &#125;<br>        <span class="hljs-keyword">protected</span> <span class="hljs-built_in">int</span> width;<br>        <span class="hljs-keyword">protected</span> <span class="hljs-built_in">int</span> height;<br>    &#125;<br><br>    <span class="hljs-comment">//派生类</span><br>    <span class="hljs-keyword">class</span> <span class="hljs-title">Rectangle</span>:<span class="hljs-title">Shape</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-title">getArea</span>()</span><br>        &#123;<br>            <span class="hljs-keyword">return</span> (width * height);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title">RectangleTester</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>        &#123;<br>            Rectangle Rect = <span class="hljs-keyword">new</span> Rectangle();<br><br>            Rect.setWidth(<span class="hljs-number">5</span>);<br>            Rect.setHeight(<span class="hljs-number">7</span>);<br><br>            <span class="hljs-comment">//打印对象的面积</span><br>            Console.WriteLine(<span class="hljs-string">&quot;总面积:&#123;0&#125;&quot;</span>,Rect.getArea());<br>            Console.ReadKey();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="基类的初始化"><a href="#基类的初始化" class="headerlink" title="基类的初始化"></a>基类的初始化</h4><p>派生类继承了基类的成员变量和成员方法。因此父类对象应在子类对象创建之前被创建。您可以在成员初始化泪飙中进行父类的初始化。</p><h4 id="继承接口"><a href="#继承接口" class="headerlink" title="继承接口"></a>继承接口</h4><p>一个接口可以继承自一个或多个其它接口，派生接口继承了基接口的所有成员。</p><p>派生接口可以扩展基接口的成员列表，但不能改变它们的访问修饰符</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">interface</span> <span class="hljs-title">IBaseInterface</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Method1</span>()</span>;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title">IDerivedInterface</span> : <span class="hljs-title">IBaseInterface</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Method2</span>()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>继承接口的实例可以通过以下方式实现</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> System;<br><br><span class="hljs-comment">//定义一个基接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title">IBaseInterface</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Method1</span>()</span>;<br>&#125;<br><span class="hljs-comment">//定义一个派生接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title">IDerivedInterface</span> : <span class="hljs-title">IBaseInterface</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Method2</span>()</span>;<br>&#125;<br><span class="hljs-comment">//定义派生接口的类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title">MyClass</span> : <span class="hljs-title">IDerivedInterface</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Method1</span>()</span><br>    &#123;<br>        Console.WriteLine(<span class="hljs-string">&quot;Method1 implementation&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Method2</span>()</span><br>    &#123;<br>        Console.WriteLine(<span class="hljs-string">&quot;Method2 implementation&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>    &#123;<br>        MyClass obj = <span class="hljs-keyword">new</span> MyClass();<br>        obj.Method1();<br>        obj.Method2();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>以上实例中MyClass类实现了IDerivedInterface接口，因此必须提供IDerivedInterface中定义的所有方法，包括从IBaseInterface继承的Method1()方法。在Main方法中我们创建了MyClass的实例obj，并调用了它的方法。</p><h4 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h4><p>什么三姓家奴（）</p><p>单一继承是一个类只可以继承自一个父类，多继承是一个类可以继承多个父类。</p><p>C#不支持多重继承，但是可以使用接口来实现多重继承。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> System;<br><span class="hljs-keyword">namespace</span> <span class="hljs-title">InheritanceApplicaiton</span><br>&#123;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title">Shape</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setWidth</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> w</span>)</span><br>        &#123;<br>            width = w;<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setHeight</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> h</span>)</span><br>        &#123;<br>            height = h;<br>        &#125;<br>        <span class="hljs-keyword">protected</span> <span class="hljs-built_in">int</span> width;<br>        <span class="hljs-keyword">protected</span> <span class="hljs-built_in">int</span> height;<br>    &#125;<br>    <span class="hljs-comment">//基类PaintCost</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title">PaintCost</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">getCost</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> area</span>)</span>;<br>    &#125;<br>    <span class="hljs-comment">//派生类</span><br>    <span class="hljs-keyword">class</span> <span class="hljs-title">Rectangle</span> : <span class="hljs-title">Shape</span>,<span class="hljs-title">PaintCost</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-title">getArea</span>()</span><br>        &#123;<br>            <span class="hljs-keyword">return</span> (width * height);<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-title">getCost</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> area</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">return</span> area * <span class="hljs-number">70</span>;<br>        &#125;<br>        <span class="hljs-keyword">class</span> <span class="hljs-title">RectangleTester</span><br>        &#123;<br>            <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params">String[] args</span>)</span><br>            &#123;<br>                Rectangle Rect = <span class="hljs-keyword">new</span> Rectangle();<br>                <span class="hljs-built_in">int</span> area;<br>                Rect.setWidth(<span class="hljs-number">5</span>);<br>                Rect.setHeight(<span class="hljs-number">8</span>);<br>                area = Rect.getArea();<br>                <span class="hljs-comment">//打印对象的面积</span><br>                Console.WriteLine(<span class="hljs-string">&quot;总面积:&#123;0&#125;&quot;</span>,Rect.getArea());<br>                Console.WriteLine(<span class="hljs-string">&quot;油漆总成本:&#123;0&#125;&quot;</span>, Rect.getCost(area));<br>                Console.ReadKey();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="多态性"><a href="#多态性" class="headerlink" title="多态性"></a>多态性</h3><p>多态是同一个行为具有多个不同表现形式或形态的能力。</p><p>多态性意味着有多重形式。在面向对象编程范式中，多态性往往表现为“一个接口，多个功能”。</p><p>多态性可以是<strong>静态的</strong>或<strong>动态的</strong>。在<strong>静态多态性</strong>中，桉树的响应是在编译时发生的，在<strong>动态多态性</strong>中，函数的响应是在运行时发生的。</p><p>在C#中，每个类型都是多态的，因为包括用户定义类型在内的所有类型都继承自Object。</p><p>多态就是同一个接口，使用不同的实例而执行不同操作。</p><h4 id="静态多态"><a href="#静态多态" class="headerlink" title="静态多态"></a>静态多态</h4><p>在编译时，函数和对象的连接机制被称为早期绑定，也被称为静态绑定。C#提供了两种技术来实现静态多态性：</p><ul><li>函数重载</li><li>运算符重载</li></ul><h5 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h5><p>可以在同一个范围内对相同的函数名有多个定义。函数的定义必须彼此不同，可以是参数列表中的参数类型不同，也可以是参数的个数不同。不同重载只有返回类型不同的函数声明。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> System;<br><span class="hljs-keyword">namespace</span> <span class="hljs-title">PolymorphismApplication</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">TestData</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-title">Add</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> x ,<span class="hljs-built_in">int</span> y ,<span class="hljs-built_in">int</span> z</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">return</span> x + y + z;<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-title">Add</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> x, <span class="hljs-built_in">int</span> y</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">return</span> x + y;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>        &#123;<br>            TestData dataClass = <span class="hljs-keyword">new</span> TestData();<br>            <span class="hljs-built_in">int</span> add1 = dataClass.Add(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br>            <span class="hljs-built_in">int</span> add2 = dataClass.Add(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br><br>            Console.WriteLine(<span class="hljs-string">&quot;add1&quot;</span>,add1);<br>            Console.WriteLine(<span class="hljs-string">&quot;add2&quot;</span>,add2);    <br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用同名的函数print打印不同的数据类型</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> System;<br><span class="hljs-keyword">namespace</span> <span class="hljs-title">PolyMorphismApplication</span><br>&#123;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title">Printdata</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">print</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> i</span>)</span><br>        &#123;<br>            Console.WriteLine(<span class="hljs-string">&quot;输出整型:&#123;0&#125;&quot;</span>, i);<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">print</span>(<span class="hljs-params"><span class="hljs-built_in">double</span> f</span>)</span><br>        &#123;<br>            Console.WriteLine(<span class="hljs-string">&quot;输出浮点型:&#123;0&#125;&quot;</span>, f);<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">print</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> s</span>)</span><br>        &#123;<br>            Console.WriteLine(<span class="hljs-string">&quot;输出字符串:&#123;0&#125;&quot;</span>,s);<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>        &#123;<br>            Printdata p = <span class="hljs-keyword">new</span> Printdata();<br>            p.print(<span class="hljs-number">1</span>);<br>            p.print(<span class="hljs-number">3.14159</span>);<br>            p.print(<span class="hljs-string">&quot;hello,world&quot;</span>);<br>            Console.ReadKey();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="动态多样性"><a href="#动态多样性" class="headerlink" title="动态多样性"></a>动态多样性</h4><p>C#允许使用关键字<strong>abstract</strong>创建抽象类，用于提供接口的部分类的实现。当一个派生类继承自该抽象类时，实现即完成。<strong>抽象类</strong>包含抽象方法，抽象方法可被派生类实现。派生类具有更专业的功能。</p><ul><li>不能创建一个抽象类的实例</li><li>不能在一个抽象类外部声明一个抽象方法</li><li>通过在类定义前面放置关键字<strong>sealed</strong>，可以将类声明为密封类。当一个类被声明为<strong>sealed</strong>的时候，它不能被继承。抽象类不能被声明为sealed</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> System;<br><span class="hljs-keyword">namespace</span> <span class="hljs-title">PolymorphismApplication</span><br>&#123;<br>    <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Shape</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-title">area</span>()</span>;<br>    &#125;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title">Rectangle</span> : <span class="hljs-title">Shape</span><br>    &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> length;<br>        <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> width;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Rectangle</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> a = <span class="hljs-number">0</span> ,<span class="hljs-built_in">int</span> b = <span class="hljs-number">0</span></span>)</span><br>        &#123;<br>            length = a;<br>            width = b;  <br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-built_in">int</span> <span class="hljs-title">area</span>()</span><br>        &#123;<br>            Console.WriteLine(<span class="hljs-string">&quot;Rectangle类的面积:&quot;</span>);<br>            <span class="hljs-keyword">return</span> (width * length);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title">RectangleTester</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>        &#123;<br>            Rectangle r = <span class="hljs-keyword">new</span> Rectangle(<span class="hljs-number">10</span>,<span class="hljs-number">7</span>);<br>            <span class="hljs-built_in">double</span> a = r.area();<br>            Console.WriteLine(<span class="hljs-string">&quot;面积:&#123;0&#125;&quot;</span>, a);<br>            Console.ReadKey();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当有一个定义在类中的函数需要在继承类中实现时，可以使用虚方法。</p><p>虚方法是使用关键字<strong>virtual</strong>声明的。</p><p>虚方法可以在不同的继承类中有不同的实现。</p><p>对虚方法的调用是在运行时发生的。</p><p>动态多态性是通过<strong>抽象类</strong>和<strong>虚方法</strong>实现的。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> System;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Shape</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> X &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">private</span> <span class="hljs-keyword">set</span>; &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> Y &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">private</span> <span class="hljs-keyword">set</span>; &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> Height &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> Width &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br><br>    <span class="hljs-comment">//虚方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Draw</span>()</span><br>    &#123;<br>        Console.WriteLine(<span class="hljs-string">&quot;执行基类的画图任务&quot;</span>);   <br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title">Circle</span>:<span class="hljs-title">Shape</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Draw</span>()</span><br>    &#123;<br>        Console.WriteLine(<span class="hljs-string">&quot;画一个圆形&quot;</span>);<br>        <span class="hljs-keyword">base</span>.Draw();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title">Rectangle</span>:<span class="hljs-title">Shape</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Draw</span>()</span><br>    &#123;<br>        Console.WriteLine(<span class="hljs-string">&quot;画一个方形&quot;</span>);<br>        <span class="hljs-keyword">base</span>.Draw();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title">Triangle</span> : <span class="hljs-title">Shape</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Draw</span>()</span><br>    &#123;<br>        Console.WriteLine(<span class="hljs-string">&quot;画一个三角形&quot;</span>);<br>        <span class="hljs-keyword">base</span>.Draw();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>    &#123;<br>        <span class="hljs-comment">//创建一个List&lt;Shape&gt;对象，并向该对象添加Circle，Rectangle和Triangle</span><br>        <span class="hljs-keyword">var</span> shapes = <span class="hljs-keyword">new</span> List&lt;Shape&gt;<br>        &#123;<br>            <span class="hljs-keyword">new</span> Rectangle(),<br>            <span class="hljs-keyword">new</span> Triangle(),<br>            <span class="hljs-keyword">new</span> Circle()<br>        &#125;;<br>        <span class="hljs-comment">//使用foreach循环对该列表的派生类进行循环访问，并对其中的每个shape对象调用Draw方法</span><br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> shape <span class="hljs-keyword">in</span> shapes)<br>        &#123;<br>            shape.Draw();<br>        &#125;<br>        Console.WriteLine(<span class="hljs-string">&quot;按下任意键退出。&quot;</span>);<br>        Console.ReadKey();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过虚方法area()来计算不同形状图像的面积</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> System;<br><span class="hljs-keyword">namespace</span> <span class="hljs-title">PolyMorphismApplication</span><br>&#123;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title">Shape</span><br>    &#123;<br>        <span class="hljs-keyword">protected</span> <span class="hljs-built_in">int</span> width, height;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Shape</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> a = <span class="hljs-number">0</span>,<span class="hljs-built_in">int</span> b= <span class="hljs-number">0</span></span>)</span><br>        &#123;<br>            width = a;<br>            height = b;<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">virtual</span> <span class="hljs-built_in">int</span> <span class="hljs-title">area</span>()</span><br>        &#123;<br>            Console.WriteLine(<span class="hljs-string">&quot;父类的面积:&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title">Rectangle</span>: <span class="hljs-title">Shape</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Rectangle</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> a  = <span class="hljs-number">0</span>,<span class="hljs-built_in">int</span> b = <span class="hljs-number">0</span></span>):<span class="hljs-title">base</span>(<span class="hljs-params">a,b</span>)</span><br>        &#123;<br><br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-built_in">int</span> <span class="hljs-title">area</span>()</span><br>        &#123;<br>            Console.WriteLine(<span class="hljs-string">&quot;Rectangle类的面积：&quot;</span>);<br>            <span class="hljs-keyword">return</span> (width*height);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title">Triangle</span>:<span class="hljs-title">Shape</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Triangle</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> a = <span class="hljs-number">0</span>,<span class="hljs-built_in">int</span> b = <span class="hljs-number">0</span></span>):<span class="hljs-title">base</span>(<span class="hljs-params">a,b</span>)</span><br>        &#123;<br><br>        &#125; <br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-built_in">int</span> <span class="hljs-title">area</span>()</span><br>        &#123;<br>            Console.WriteLine(<span class="hljs-string">&quot;Triangle类的面积&quot;</span>);<br>            <span class="hljs-keyword">return</span> (width*height/<span class="hljs-number">2</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title">Caller</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">CallerArea</span>(<span class="hljs-params">Shape sh</span>)</span><br>        &#123;<br>            <span class="hljs-built_in">int</span> a;<br>            a = sh.area();<br>            Console.WriteLine(<span class="hljs-string">&quot;面积:&#123;0&#125;&quot;</span>,a);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title">Tester</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>        &#123;<br>            Caller c = <span class="hljs-keyword">new</span> Caller();<br>            Rectangle r = <span class="hljs-keyword">new</span> Rectangle(<span class="hljs-number">10</span>,<span class="hljs-number">7</span>);<br>            Triangle t = <span class="hljs-keyword">new</span> Triangle(<span class="hljs-number">10</span>, <span class="hljs-number">5</span>);<br>            c.CallerArea(r);    <br>            c.CallerArea(t);<br>            Console.ReadKey();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Interface接口"><a href="#Interface接口" class="headerlink" title="Interface接口"></a>Interface接口</h3><p>接口定义了所有类继承应遵循的语法合同。接口定义了语法合同<strong>是什么</strong>的部分，派生类定义了语法合同<strong>怎么做</strong>的部分。</p><p>接口定义了属性、方法和事件，这些都是接口的成员、接口只包含了成员的声明。成员的定义是派生类的责任。接口提供了派生类应遵循的标准结构。</p><p>接口使得实现接口的类或结构在形式上保持一致。</p><p>抽象类在某种程度上与接口类似，但是，它们大多只是用在当只有少数方法由基类声明由派生类实现时。</p><p>接口本身不能实现功能，它只是和声明实现该接口的对象订立一个必须实现哪些行为的契约。</p><h4 id="定义接口"><a href="#定义接口" class="headerlink" title="定义接口"></a>定义接口</h4><p>接口使用<strong>interface</strong>关键字声明，它与类的声明类似。接口声明默认是pulic的。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">interface</span> <span class="hljs-title">IMyInterface</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">MethodToImplement</span>()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>以上</p><h4 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h4><p>让一组名称与其他名称分隔开的方式。在一个命名空间中声明的类的名称与另一个命名空间中声明的相同的类的名称不冲突。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> System;<br><span class="hljs-keyword">namespace</span> <span class="hljs-title">first_space</span>&#123;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title">namespace_c1</span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">func</span>()</span>&#123;<br>            Console.WriteLine(<span class="hljs-string">&quot;Inside first_space&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">namespace</span> <span class="hljs-title">second_spce</span>&#123;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title">namespace_c1</span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">func</span>()</span>&#123;<br>            Console.WirteLine(<span class="hljs-string">&quot;Inside second_space&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title">TestClass</span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span>&#123;<br>        first_space.namespace_c1 fc = <span class="hljs-keyword">new</span> first_space.namespace_c1();<br>        second_space.namespace_c1 sc = <span class="hljs-keyword">new</span> second_space.namespace_c1();<br>        fc.func();<br>        sc.func();<br>        Console.ReadKey();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p>属性是类、结构、和接口的命名成员。类或结构中的成员变量或方法称为<strong>域(Field)</strong>.属性是域的扩展，且可使用相同的语法来访问。它们使用<strong>访问器</strong>让私有域的属性可以被读写或操作。</p><p>属性不会确定存储位置，相反，它们具有可读写或计算它们值的<strong>访问器</strong>。</p><p>例如，有一个名为Students的类，带有age、name和code的私有域。我们不能在类的范围以外直接访问这些域，但是我我们可以拥有访问这些私有域的属性。</p><h4 id="访问器（Accessors）"><a href="#访问器（Accessors）" class="headerlink" title="访问器（Accessors）"></a>访问器（Accessors）</h4><p>属性的访问器包含有助于获取（读取或计算）或设置（写入）属性的可执行语句。访问器声明可包含一个get访问器，一个set访问器，或同时包含二者。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> System;<br><span class="hljs-keyword">namespace</span> <span class="hljs-title">runoob</span><br>&#123;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title">Student</span><br>    &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-built_in">string</span> code = <span class="hljs-string">&quot;N.A&quot;</span>;<br>        <span class="hljs-keyword">private</span> <span class="hljs-built_in">string</span> name = <span class="hljs-string">&quot;not known&quot;</span>;<br>        <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> age = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-comment">//声明类型为string的code属性</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> Code<br>        &#123;<br>            <span class="hljs-keyword">get</span><br>            &#123;<br>                <span class="hljs-keyword">return</span> code;<br>            &#125;<br>            <span class="hljs-keyword">set</span><br>            &#123;<br>                code = <span class="hljs-keyword">value</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//声明类型为string的Name属性</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> Name<br>        &#123;<br>            <span class="hljs-keyword">get</span><br>            &#123;<br>                <span class="hljs-keyword">return</span> name;<br>            &#125;<br>            <span class="hljs-keyword">set</span><br>            &#123;<br>                name = <span class="hljs-keyword">value</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//声明类型为int的Age属性</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> Age<br>        &#123;<br>            <span class="hljs-keyword">get</span><br>            &#123;<br>                <span class="hljs-keyword">return</span> age;<br>            &#125;<br>            <span class="hljs-keyword">set</span><br>            &#123;<br>                age = <span class="hljs-keyword">value</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-built_in">string</span> <span class="hljs-title">ToString</span>()</span><br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Code = &quot;</span> + Code + <span class="hljs-string">&quot;,Name=&quot;</span> + Name + <span class="hljs-string">&quot;,Age=&quot;</span> + Age;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title">ExampleDemo</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>()</span><br>        &#123;<br>            <span class="hljs-comment">//创建一个新的Students对象</span><br>            Student s = <span class="hljs-keyword">new</span> Student();<br>            <span class="hljs-comment">//设置students的code、name和age</span><br>            s.Code = <span class="hljs-string">&quot;001&quot;</span>;<br>            s.Age = <span class="hljs-number">9</span>;<br>            s.Name = <span class="hljs-string">&quot;Murphy&quot;</span>;<br>            Console.WriteLine(<span class="hljs-string">&quot;Students Info:&#123;0&#125;&quot;</span>, s);<br>            <span class="hljs-comment">//增加年龄</span><br>            s.Age += <span class="hljs-number">1</span>;<br>            Console.WriteLine(<span class="hljs-string">&quot;Students Info:&#123;0&#125;&quot;</span>, s);<br>            Console.ReadKey();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="文件类"><a href="#文件类" class="headerlink" title="文件类"></a>文件类</h3><h4 id="FileStream类"><a href="#FileStream类" class="headerlink" title="FileStream类"></a>FileStream类</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c#">FileStream &lt;object_name&gt; = <span class="hljs-keyword">new</span> FileStream(&lt;file_name&gt;,&lt;FileMode Enumerator&gt;,&lt;FileAccess Enumeratro&gt;,&lt;FileShare Enumerator&gt;);<br><span class="hljs-comment">//例如</span><br>FileStream F = <span class="hljs-keyword">new</span> FileStream(<span class="hljs-string">&quot;sample.txt&quot;</span>,FileMode.Open,FileAccess.ReadWrite);<br></code></pre></td></tr></table></figure><h4 id="WriteAllText"><a href="#WriteAllText" class="headerlink" title="WriteAllText()"></a>WriteAllText()</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> System.IO;<br><span class="hljs-built_in">string</span> wirteText = <span class="hljs-string">&quot;hello,world&quot;</span>;<br>File.WriteAllText(<span class="hljs-string">&quot;C:\\Users\\rolen\\Documents\\test2.txt&quot;</span>,wirteText);<br><span class="hljs-built_in">string</span> readText = File.ReadAllText(<span class="hljs-string">&quot;C:\\Users\\rolen\\Documents\\test2.txt&quot;</span>);<br>Console.Write(readText);<br></code></pre></td></tr></table></figure><h4 id="StreamReader类"><a href="#StreamReader类" class="headerlink" title="StreamReader类"></a>StreamReader类</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-keyword">using</span> System;<br><span class="hljs-keyword">using</span> System.IO;<br><span class="hljs-keyword">using</span> System.Text;<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">FileApplication</span><br>&#123;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">try</span><br>            &#123;<br>                <span class="hljs-comment">//创建一个StreamReader的实例来读取文件</span><br>                <span class="hljs-comment">//using语句也能关闭StreamReader</span><br>                <span class="hljs-keyword">using</span> (StreamReader sr = <span class="hljs-keyword">new</span> StreamReader(<span class="hljs-string">&quot;C:\\Users\\rolen\\Documents\\硬盘处理.md&quot;</span>,Encoding.UTF8))<br>                &#123;<br>                    <span class="hljs-built_in">string</span> line;<br>                    <span class="hljs-comment">//从文件中读取并显示行，直到文件的末尾</span><br>                    <span class="hljs-keyword">while</span>((line = sr.ReadLine()) != <span class="hljs-literal">null</span>)<br>                    &#123;<br>                        Console.WriteLine(line);<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">catch</span> (Exception e) <br>            &#123;<br>                <span class="hljs-comment">//向用户显示处错信息</span><br>                Console.WriteLine (<span class="hljs-string">&quot;The file could not be read0&quot;</span>);<br>                Console.WriteLine (e.Message);<br>            &#125;<br>            Console.ReadKey();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="StreamWriter类"><a href="#StreamWriter类" class="headerlink" title="StreamWriter类"></a>StreamWriter类</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-keyword">using</span> System;<br><span class="hljs-keyword">using</span> System.IO;<br><span class="hljs-keyword">using</span> System.Text;<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">FileApplication</span><br>&#123;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>        &#123;<br>            <span class="hljs-built_in">string</span>[] names = <span class="hljs-keyword">new</span> <span class="hljs-built_in">string</span>[] &#123;<span class="hljs-string">&quot;Zara Ali&quot;</span>,<span class="hljs-string">&quot;Nuha Ali&quot;</span> &#125;;<br>            <span class="hljs-keyword">using</span> (StreamWriter sw = <span class="hljs-keyword">new</span> StreamWriter(<span class="hljs-string">&quot;C:\\Users\\rolen\\Documents\\test.txt&quot;</span>))<br>            &#123;<br>                <span class="hljs-keyword">foreach</span> (<span class="hljs-built_in">string</span> name <span class="hljs-keyword">in</span> names)<br>                &#123;<br>                    sw.WriteLine(name);<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">//从文件中读取并显示每行</span><br>            <span class="hljs-built_in">string</span> line = <span class="hljs-string">&quot;&quot;</span>;<br>            <span class="hljs-keyword">using</span>(StreamReader sr = <span class="hljs-keyword">new</span> StreamReader(<span class="hljs-string">&quot;C:\\Users\\rolen\\Documents\\test.txt&quot;</span>))<br>            &#123;<br>                <span class="hljs-keyword">while</span>((line = sr.ReadLine())!= <span class="hljs-literal">null</span>)<br>                &#123;<br>                    Console.WriteLine(line);<br>                &#125;<br>            &#125;<br>            Console.ReadKey();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="遍历指定目录下所有文件"><a href="#遍历指定目录下所有文件" class="headerlink" title="遍历指定目录下所有文件"></a>遍历指定目录下所有文件</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> System;<br><span class="hljs-keyword">using</span> System.IO;<br><span class="hljs-keyword">using</span> System.Linq;<br><span class="hljs-keyword">using</span> System.Text.RegularExpressions;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>()</span><br>    &#123;<br>        <span class="hljs-built_in">string</span> target_path = <span class="hljs-string">&quot;C:\\Users\\rolen\\Documents\\example\\DataSet-tangshan0805\\labels\\train&quot;</span>;<br>        <span class="hljs-built_in">string</span> File_path = <span class="hljs-string">&quot;C:\\Users\\rolen\\Documents\\example\\log.txt&quot;</span>;<br><br>        <span class="hljs-comment">//遍历目录下的所有文件</span><br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-built_in">string</span> filepath <span class="hljs-keyword">in</span> Directory.GetFiles(target_path))<br>        &#123;<br>            <span class="hljs-keyword">try</span><br>            &#123;<br>                <span class="hljs-comment">//读取文件内容</span><br>                <span class="hljs-built_in">string</span> content = File.ReadAllText(filepath);<br><br>                <span class="hljs-comment">//使用正则表达式找到第一个数字</span><br>                Match match = Regex.Match(content, <span class="hljs-string">@&quot;\d+&quot;</span>);<br>                <span class="hljs-keyword">if</span> (match.Success)<br>                &#123;<br>                    <span class="hljs-comment">//将数字写入txt文档</span><br>                    File.AppendAllText(File_path, match.Value + Environment.NewLine);<br><br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">catch</span>(Exception ex) <br>            &#123;<br>                Console.WriteLine(<span class="hljs-string">$&quot;处理文件<span class="hljs-subst">&#123;filepath&#125;</span>时出错:<span class="hljs-subst">&#123;ex.Message&#125;</span>&quot;</span>);<br><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="委托（Delegate）"><a href="#委托（Delegate）" class="headerlink" title="委托（Delegate）"></a>委托（Delegate）</h3><p>C#中的委托类似于C或C++中的指针。委托是存有对某个方法的引用的一种引用类型变量。引用可在运行时被改变。</p><p>委托特别用于实现事件和回调方法。所有的委托都派生自<strong>System.Delegate</strong>类。</p><h4 id="声明委托"><a href="#声明委托" class="headerlink" title="声明委托"></a>声明委托</h4><p>委托声明决定了可由该委托引用的方法。委托可指向一个与其具有相同标签的方法。例如，假设有一个委托：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">delegate</span> <span class="hljs-built_in">int</span> <span class="hljs-title">MyDelegate</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> s</span>)</span>;<br></code></pre></td></tr></table></figure><p>上面的委托可被用于引用任何一个带有单一的string参数的方法，并返回一个int类型变量。</p><p>声明委托的语法如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-built_in">delegate</span> &lt;<span class="hljs-keyword">return</span> type&gt; &lt;<span class="hljs-built_in">delegate</span>-name&gt; &lt;parameter list&gt;<br></code></pre></td></tr></table></figure><h4 id="实例化委托"><a href="#实例化委托" class="headerlink" title="实例化委托"></a>实例化委托</h4><p>一旦声明了委托类型，委托对象必须使用new关键字来创建，且与一个特定的方法有关。当创建委托时，传递到new语句的参数就像方法调用一样书写，单不带有参数</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">delegate</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printString</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> s</span>)</span>;<br>...<br>printString ps1 = <span class="hljs-keyword">new</span> printString(WriteToScreen);<br>printString ps2 = <span class="hljs-keyword">new</span> printString(WriteToFile);<br></code></pre></td></tr></table></figure><p>下面的实例演示了委托的声明、实例化和使用，该委托可用于引用带有一个整形参数的方法，并返回一个整型值。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> System;<br><br><span class="hljs-function"><span class="hljs-built_in">delegate</span> <span class="hljs-built_in">int</span> <span class="hljs-title">NumberChanger</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> n</span>)</span>;<br><span class="hljs-keyword">namespace</span> <span class="hljs-title">DelegateApp1</span><br>&#123;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title">TestDelegate</span><br>    &#123;<br>        <span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> num = <span class="hljs-number">10</span>;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> <span class="hljs-title">AddNum</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> p</span>)</span><br>        &#123;<br>            num += p;<br>            <span class="hljs-keyword">return</span> num;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> <span class="hljs-title">MultNum</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> q</span>)</span><br>        &#123;<br>            num *= q;<br>            <span class="hljs-keyword">return</span> num;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> <span class="hljs-title">getNum</span>()</span><br>        &#123;<br>            <span class="hljs-keyword">return</span> num;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>        &#123;<br>            <span class="hljs-comment">//创建委托实例</span><br>            NumberChanger nc1 = <span class="hljs-keyword">new</span> NumberChanger(AddNum);<br>            NumberChanger nc2 = <span class="hljs-keyword">new</span> NumberChanger(MultNum);<br>            <span class="hljs-comment">//使用委托对象调用方法</span><br>            nc1(<span class="hljs-number">25</span>);<br>            <span class="hljs-comment">//10+=25</span><br>            <span class="hljs-comment">//return 35</span><br>            Console.WriteLine(<span class="hljs-string">&quot;Value of Num: &#123;0&#125;&quot;</span>,getNum());<br>            <span class="hljs-comment">//35*=5</span><br>            <span class="hljs-comment">//return 175</span><br>            nc2(<span class="hljs-number">5</span>);<br>            Console.WriteLine(<span class="hljs-string">&quot;Value of Num: &#123;0&#125;&quot;</span>, getNum());<br><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="委托的多播"><a href="#委托的多播" class="headerlink" title="委托的多播"></a>委托的多播</h4><p>委托对象可使用”+“运算符进行合并。一个合并委托调用它所合并的两个委托。只有相同类型的委托可被合并。”-“运算符可用于从合并的委托中一处组件委托。</p><p>使用委托的这个有用的特点，可以创建一个委托被调用时要调用的方法的调用列表。这种设定叫做多播，也叫组播。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> System;<br><br><span class="hljs-function"><span class="hljs-built_in">delegate</span> <span class="hljs-built_in">int</span> <span class="hljs-title">NumberChanger</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> n</span>)</span>;<br><span class="hljs-keyword">namespace</span> <span class="hljs-title">DelegateApp1</span><br>&#123;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title">TestDelegate</span><br>    &#123;<br>        <span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> num = <span class="hljs-number">10</span>;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> <span class="hljs-title">AddNum</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> p</span>)</span><br>        &#123;<br>            num += p;<br>            <span class="hljs-keyword">return</span> num;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> <span class="hljs-title">MultNum</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> q</span>)</span><br>        &#123;<br>            num *= q;<br>            <span class="hljs-keyword">return</span> num;<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> <span class="hljs-title">getNum</span>()</span><br>        &#123;<br>            <span class="hljs-keyword">return</span> num;<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>        &#123;<br>            <span class="hljs-comment">//创建委托实例</span><br>            NumberChanger nc;<br>            NumberChanger nc1 = <span class="hljs-keyword">new</span> NumberChanger(AddNum);<br>            NumberChanger nc2 = <span class="hljs-keyword">new</span> NumberChanger(MultNum);<br>            nc = nc1;<br>            nc += nc2;<br>            <span class="hljs-comment">//调用多播</span><br>            nc(<span class="hljs-number">5</span>);<br>            Console.WriteLine(<span class="hljs-string">&quot;Value of Num:&#123;0&#125;&quot;</span>,getNum());<br>            Console.ReadKey();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会返回下列结果：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c#">Value of Num: <span class="hljs-number">75</span><br></code></pre></td></tr></table></figure><h4 id="委托的用途"><a href="#委托的用途" class="headerlink" title="委托的用途"></a>委托的用途</h4><p>下面的实例演示了委托的用法。委托printString可用于引用带有一个字符串作为输入的方法，并不返回任何东西。</p><p>我们使用这个委托来调用两个方法，第一个把字符串打印到控制台，第二个把字符串打印到文件。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> System;<br><span class="hljs-keyword">using</span> System.IO;<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">DelegateApp1</span><br>&#123;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title">PrintString</span><br>    &#123;<br>        <span class="hljs-keyword">static</span> FileStream fs;<br>        <span class="hljs-keyword">static</span> StreamWriter sw;<br>        <span class="hljs-comment">//委托声明</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">delegate</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printString</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> s</span>)</span>;<br>        <span class="hljs-comment">//该方法打印到控制台</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">WriteToScreen</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> str</span>)</span><br>        &#123;<br>            Console.WriteLine(<span class="hljs-string">&quot;The String is:&#123;0&#125;&quot;</span>,str);<br>        &#125;<br>        <span class="hljs-comment">//该方法打印到文件</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">WriteToFile</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> s</span>)</span><br>        &#123;<br>            fs = <span class="hljs-keyword">new</span> FileStream(<span class="hljs-string">&quot;C:\\Users\\rolen\\Documents\\test.txt&quot;</span>, FileMode.Append, FileAccess.Write);<br>            sw = <span class="hljs-keyword">new</span> StreamWriter(fs);<br>            sw.WriteLine(s);<br>            sw.Flush();<br>            sw.Close();<br>            fs.Close();<br>        &#125;<br>        <span class="hljs-comment">//该方法把委托作为参数，并使用它调用方法</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sendString</span>(<span class="hljs-params">printString ps</span>)</span><br>        &#123;<br>            ps(<span class="hljs-string">&quot;Hello,World&quot;</span>);<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>        &#123;<br>            printString ps1 = <span class="hljs-keyword">new</span> printString(WriteToScreen);<br>            printString ps2 = <span class="hljs-keyword">new</span> printString(WriteToFile);<br>            sendString(ps1);<br>            sendString(ps2);<br>            Console.ReadKey ();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><p>泛型允许延迟编写类或方法中的编程元素的数据类型的规范，直到实际在程序中使用它的时候。换句话说，泛型允许编写一个可以与任何数据类型一起工作的类或方法。</p><p>可以通过数据类型的代替参数编写类或方法规范。当编译器遇到类的构造函数或方法的函数调用时，它会生成代码来处理指定的数据类型。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> System;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> System.ComponentModel;<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">GenericApplication</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">MyGenericArray</span>&lt;<span class="hljs-title">T</span>&gt;<br>    &#123;<br>        <span class="hljs-keyword">private</span> T[] array;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyGenericArray</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> size</span>)</span><br>        &#123;<br>            array = <span class="hljs-keyword">new</span> T[size+<span class="hljs-number">1</span>];<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> T <span class="hljs-title">getItem</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> index</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">return</span> array[index];<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setItem</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> index, T <span class="hljs-keyword">value</span></span>)</span><br>        &#123;<br>            array[index] = <span class="hljs-keyword">value</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title">Tester</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>        &#123;<br>            <span class="hljs-comment">//声明一个整数类型</span><br>            MyGenericArray&lt;<span class="hljs-built_in">int</span>&gt; intArray = <span class="hljs-keyword">new</span> MyGenericArray&lt;<span class="hljs-built_in">int</span>&gt;(<span class="hljs-number">5</span>);<br>            <span class="hljs-comment">//设置值</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> c = <span class="hljs-number">0</span>;c&lt;<span class="hljs-number">5</span>;c++)<br>            &#123;<br>                intArray.setItem(c, c*<span class="hljs-number">5</span>);<br>            &#125;<br>            <span class="hljs-comment">//获取值</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> c = <span class="hljs-number">0</span>;c&lt;<span class="hljs-number">5</span>;c++)<br>            &#123;<br>                Console.Write(intArray.getItem(c)+<span class="hljs-string">&quot; &quot;</span>);<br>            &#125;<br>            Console.WriteLine();<br>            <span class="hljs-comment">//声明一个字符数组</span><br>            MyGenericArray&lt;<span class="hljs-built_in">char</span>&gt; charArray = <span class="hljs-keyword">new</span> MyGenericArray&lt;<span class="hljs-built_in">char</span>&gt;(<span class="hljs-number">5</span>);<br>            <span class="hljs-comment">//设置值</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> c = <span class="hljs-number">0</span>;c&lt;<span class="hljs-number">5</span>;c++)<br>            &#123;<br>                charArray.setItem(c, (<span class="hljs-built_in">char</span>)(c + <span class="hljs-number">97</span>));<br>            &#125;<br>            <span class="hljs-comment">//获取值</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> c=<span class="hljs-number">0</span>;c&lt;<span class="hljs-number">5</span>;c++)<br>            &#123;<br>                Console.Write(charArray.getItem(c)+<span class="hljs-string">&quot; &quot;</span>);<br>            &#125;<br>            Console.WriteLine();<br>            Console.ReadKey();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="泛型的特性"><a href="#泛型的特性" class="headerlink" title="泛型的特性"></a>泛型的特性</h4><ul><li>有助于最大限度地重用代码、保护类型的安全和提高性能</li><li>可以创建泛型集合类，.NET框架类库在System.Collections.Generic命名空间中包含了一些新的泛型集合类。可以用这些泛型集合类来替代System.Collections中的集合类</li><li>可以创建自己的泛型接口、泛型类、泛型方法、泛型事件和泛型委托。</li></ul><h4 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h4><p>可以通过类型参数声明泛型方法</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-keyword">using</span> System;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">GenericMethodAppl</span><br>&#123;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Swap</span>&lt;<span class="hljs-title">T</span>&gt;(<span class="hljs-params"><span class="hljs-keyword">ref</span> T lhs, <span class="hljs-keyword">ref</span> T rhs</span>)</span><br>        &#123;<br>            T temp;<br>            temp = lhs;<br>            lhs = rhs;<br>            rhs = temp;<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>        &#123;<br>            <span class="hljs-built_in">int</span> a, b;<br>            <span class="hljs-built_in">char</span> c, d;<br>            a = <span class="hljs-number">10</span>;<br>            b = <span class="hljs-number">20</span>;<br>            c = <span class="hljs-string">&#x27;I&#x27;</span>;<br>            d = <span class="hljs-string">&#x27;V&#x27;</span>;<br><br>            <span class="hljs-comment">//在交换之前显示值</span><br>            Console.WriteLine(<span class="hljs-string">&quot;Int values before calling swap:&quot;</span>);<br>            Console.WriteLine(<span class="hljs-string">&quot;a=&#123;0&#125;,b=&#123;1&#125;&quot;</span>,a,b);<br>            Console.WriteLine(<span class="hljs-string">&quot;Char value before calling swap:&quot;</span>);<br>            Console.WriteLine(<span class="hljs-string">&quot;C=&#123;0&#125;,d=&#123;1&#125;&quot;</span>,c,d);<br>            <span class="hljs-comment">//调用swap</span><br>            Swap&lt;<span class="hljs-built_in">int</span>&gt;(<span class="hljs-keyword">ref</span> a, <span class="hljs-keyword">ref</span> b);<br>            Swap&lt;<span class="hljs-built_in">char</span>&gt;(<span class="hljs-keyword">ref</span> c, <span class="hljs-keyword">ref</span> d);<br><br>            <span class="hljs-comment">//在交换之后显示</span><br>            Console.WriteLine(<span class="hljs-string">&quot;Int values after calling swap:&quot;</span>);<br>            Console.WriteLine(<span class="hljs-string">&quot;a=&#123;0&#125;,b=&#123;1&#125;&quot;</span>, a, b);<br>            Console.WriteLine(<span class="hljs-string">&quot;Char value after calling swap:&quot;</span>);<br>            Console.WriteLine(<span class="hljs-string">&quot;C=&#123;0&#125;,d=&#123;1&#125;&quot;</span>, c, d);<br>            Console.ReadKey ();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="泛型委托"><a href="#泛型委托" class="headerlink" title="泛型委托"></a>泛型委托</h4><p>可以通过类型参数定义泛型委托，如：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-function"><span class="hljs-built_in">delegate</span> T <span class="hljs-title">NumberChangeer</span>&lt;<span class="hljs-title">T</span>&gt;(<span class="hljs-params">T n</span>)</span>;<br></code></pre></td></tr></table></figure><p>下面的实例演示了委托的使用：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C#"><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C-sharp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>问题&amp;解决</title>
    <link href="/2024/03/29/%E9%97%AE%E9%A2%98&amp;%E8%A7%A3%E5%86%B3/"/>
    <url>/2024/03/29/%E9%97%AE%E9%A2%98&amp;%E8%A7%A3%E5%86%B3/</url>
    
    <content type="html"><![CDATA[<ul><li><p>什么是安装钩子和配置钩子？</p></li><li><p>.db文件是啥</p><ul><li>.db文件是数据库文件，通常用于存储和管理数据</li></ul></li><li><p>方法和函数的区别是什么？</p><ul><li>一般在面向对象的语言中，这个被称为方法，面向过程语言中被称为函数，没啥太大区别，都是接收输入的数据并返回数据</li><li>仅有的一点区别是：方法与其被调用的对象实例相关联，方法仅限于在其所包含的类中操作数据</li><li>在C++中可以创建与对象关联的函数，被称为成员函数，在其它语言中就是方法</li></ul></li><li><p>C语言有没有修饰访问符？C语言该如何进行封装？</p><ul><li>C语言没有修饰访问符</li></ul></li><li><p>C#中$@”字符串”是什么意思</p><ul><li>$表示{}内的内容会被替换为变量的值</li><li>@表示将后面字符串内的转义字符当作普通字符对待</li></ul></li><li><p>C#中[STATHread]是什么意思？</p><ul><li>[STAThread]是一个特性，用于指示应用程序的默认线程是单线程单元(STA),多用在程序的入口方法上</li><li>STA即Single      Thread Apartment，是一种线程模型，在这个模型中，每个线程都有自己的单独的消息队列，用于处理Windows消息。<strong>这种模型对于需要处理用户界面的线程非常有用</strong>，因为用户界面通常需要在单个线程上进行操作以避免并发问题</li><li>[STATHread]特性在使用COM Interop(托管代码与非托管代码之间的协同过程)的应用程序中非常重要。如果应用程序实际调用了COM组件，则仅为COM interop初始化该线程，如果没有使用COM interop,则不初始化该线程。</li></ul></li><li><p><code>#region</code>…<code>#endregion</code>是什么意思？</p><ul><li>在C#中，<code>#region</code>和<code>#endregion</code>是预处理指令，用于在VisualStudio中标记一块可以折叠和展开的代码区域，可以在<code>#region</code>后添加任意描述文字，以便记住此区域的用途，<strong>不会影响代码执行，只是提升可读性</strong></li></ul></li><li><p><code>///&lt;summary&gt;...&lt;/summary&gt;</code>写法是什么意思？</p><ul><li>这是一种特殊的注释，被称为XML文档注释，这种注释可以被VisualStudio的IntelliSense（智能感知）和其他工具用来生成代码的文档</li></ul></li><li><p><code>using</code>关键字有什么用</p><ul><li><strong>导入命名空间</strong>，这样就可以在代码中直接使用该命名空间中的类型，如<code>using System</code>后不用写<code>System.Console.WriteLine()</code></li></ul></li><li><p>什么是数据回写？自动化项目中的数据回写有什么用？</p></li><li><p>var是什么意思</p><ul><li><code>var</code>是一个关键字，用于声明变量，<code>var</code>关键字告诉编译器，希望它根据变量的初始化表达式来推断变量类型。这被称为类型推断。</li><li>如<code>var total =0;</code>编译器会推断出<code>total</code>是一个int类型的变量，因为它被初始化为一个整数。</li><li><code>var</code>声明的变量必须在声明的时候进行初始化</li><li><code>var</code>只能用于局部变量的声明，不能在类的级别使用<code>var</code>来声明字段。</li></ul></li><li><p>怎么在C#方法的头尾添加计时</p><ul><li><pre><code class="c#">using System.Diagnostics;public void YourMethod()&#123;    //创建Stopwatch实例    Stopwatch stopwatch = new Stopwatch();    //开始计时    stopwatch.Start();    //代码本体    //停止计时    stopwatch.Stop();    //获取经过的时间    TimeSpan elapsed = stopwatch.Elapsed;    //打印经过时间    Console.WriteLine($&quot;程序共运行了&#123;elapsed.TotalMilliseconds&#125;毫秒&quot;);&#125;<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><br><span class="hljs-bullet">-</span> C#中的=&gt;是什么意思？<br><br><span class="hljs-bullet">  -</span> =&gt;是c#中的lambda运算符，用于定义匿名函数或表达式主体定义方法<br><br><span class="hljs-bullet">-</span> 什么是匿名函数？<br><br><span class="hljs-bullet">-</span> .text和.txt有什么区别？<br><span class="hljs-bullet">  -</span> 没啥区别，文件扩展名不是文件格式，扩展名只是为了方便人快速识别文件格式和Windows上用于关联打开程序，只是一种约定而已，不代表文件本身格式，就像是将.zip文件扩展名改为.txt一样，不会影响文件本身内容<br><br><span class="hljs-bullet">-</span> 如何完全卸载influxdb<br><span class="hljs-bullet">  -</span> 在C盘的用户文件夹下有<span class="hljs-code">`.influxdbv2`</span>文件夹，删除，任务管理器停止后台进程<br><br><span class="hljs-bullet">-</span> C#中属性(Property)和变量（Variable）的区别是什么？<br><br><span class="hljs-bullet">  -</span> 属性和变量都是用来存储数据的，但它们的用途和功能有所不同<br><br><span class="hljs-bullet">  -</span> <span class="hljs-strong">**变量**</span>是程序中最基本的数据存储单位。它有一个数据类型和一个值，可以直接读取或修改变量的值。<br><br><span class="hljs-bullet">  -</span> <span class="hljs-strong">**属性**</span>则是类、结构或接口中的成员，它提供了一种灵活的机制来读取、写入或计算私有字段的值<br><br><span class="hljs-code">    ```c#</span><br><span class="hljs-code">    </span><br></code></pre></td></tr></table></figure></code></pre></li></ul></li><li><p>当前上下文中不存在名称“Console.WriteLine”是什么情况</p><ul><li>命名空间未被引用——开头没有using System</li><li>大小写拼写错误</li><li>错误的上下文使用：Console.WriteLine是一个静态方法，它只能在方法内部使用，如果在类的定义中，但不在任何方法体内部去使用它，就会收到这个错误。</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>代码大全-1-软件创建</title>
    <link href="/2024/03/27/%E4%BB%A3%E7%A0%81%E5%A4%A7%E5%85%A8-1-%E8%BD%AF%E4%BB%B6%E5%88%9B%E5%BB%BA/"/>
    <url>/2024/03/27/%E4%BB%A3%E7%A0%81%E5%A4%A7%E5%85%A8-1-%E8%BD%AF%E4%BB%B6%E5%88%9B%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<p>问题定义 -&gt;需求分析 -&gt;实现计划 -&gt;总体设计 -&gt;详细设计 -&gt;创建即实现 -&gt;系统集成 -&gt;单元测试 -&gt;系统测试 -&gt;校正性的维护</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Python数据结构</title>
    <link href="/2024/02/29/Python%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <url>/2024/02/29/Python%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>python没有内置数组类型，但是可以为所有相同任务使用列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">list</span>.append(x) <span class="hljs-comment">#把元素添加到列表的结尾，相当于a[len(a):]=[x]</span><br><span class="hljs-built_in">list</span>.extend(L) <span class="hljs-comment">#通过添加指定列表的所有元素来扩充列表，相当于a[len(a):]=L</span><br><span class="hljs-built_in">list</span>.insert(i,x)<br><span class="hljs-built_in">list</span>.remove(x)<span class="hljs-comment">#删除列表中值为x的第一个元素</span><br><span class="hljs-built_in">list</span>.pop([i])<span class="hljs-comment">#</span><br><span class="hljs-built_in">list</span>.clear()<span class="hljs-comment">#移除列表中的所有项</span><br><span class="hljs-built_in">list</span>.index(x)<span class="hljs-comment">#返回列表中第一个值为x的元素的索引</span><br><span class="hljs-built_in">list</span>.count(x)<span class="hljs-comment">#x在列表中出现的次数</span><br><span class="hljs-built_in">list</span>.sort()<span class="hljs-comment">#对列表中元素进行排序</span><br><span class="hljs-built_in">list</span>.reverse()<span class="hljs-comment">#倒排列表中的元素</span><br><span class="hljs-built_in">list</span>.copy()<span class="hljs-comment">#返回列表的浅复制</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>a = [<span class="hljs-number">66.25</span>, <span class="hljs-number">333</span>, <span class="hljs-number">333</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1234.5</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a.count(<span class="hljs-number">333</span>), a.count(<span class="hljs-number">66.25</span>), a.count(<span class="hljs-string">&#x27;x&#x27;</span>))<br><span class="hljs-number">2</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a.insert(<span class="hljs-number">2</span>, -<span class="hljs-number">1</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>a.append(<span class="hljs-number">333</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>a<br>[<span class="hljs-number">66.25</span>, <span class="hljs-number">333</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">333</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1234.5</span>, <span class="hljs-number">333</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>a.index(<span class="hljs-number">333</span>)<br><span class="hljs-number">1</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a.remove(<span class="hljs-number">333</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>a<br>[<span class="hljs-number">66.25</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">333</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1234.5</span>, <span class="hljs-number">333</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>a.reverse()<br><span class="hljs-meta">&gt;&gt;&gt; </span>a<br>[<span class="hljs-number">333</span>, <span class="hljs-number">1234.5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">333</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">66.25</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>a.sort()<br><span class="hljs-meta">&gt;&gt;&gt; </span>a<br>[-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">66.25</span>, <span class="hljs-number">333</span>, <span class="hljs-number">333</span>, <span class="hljs-number">1234.5</span>]<br></code></pre></td></tr></table></figure><h4 id="将列表当作栈堆用"><a href="#将列表当作栈堆用" class="headerlink" title="将列表当作栈堆用"></a>将列表当作栈堆用</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>stack = [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>stack.append(<span class="hljs-number">6</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>stack.append(<span class="hljs-number">7</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>stack<br>[<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>stack.pop()<br><span class="hljs-number">7</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>stack<br>[<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>stack.pop()<br><span class="hljs-number">6</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>stack.pop()<br><span class="hljs-number">5</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>stack<br>[<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br></code></pre></td></tr></table></figure><h4 id="将列表当作队列使用"><a href="#将列表当作队列使用" class="headerlink" title="将列表当作队列使用"></a>将列表当作队列使用</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python基础</title>
    <link href="/2024/02/28/Python%E5%9F%BA%E7%A1%80/"/>
    <url>/2024/02/28/Python%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h2 id="lambda-匿名函数"><a href="#lambda-匿名函数" class="headerlink" title="lambda(匿名函数)"></a>lambda(匿名函数)</h2><p>lambda是一种小型、匿名的、内联函数，它可以有任意数量的参数，但只能有一个表达式。</p><p>匿名函数不需要使用def定义完整函数。</p><p>lambda函数通常用于编写简单的、单行的函数，通常在需要函数作为参数传递的情况下使用，例如在map()、filter()、reduce()等函数中。</p><h4 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">lambda</span> arguments: expression<br></code></pre></td></tr></table></figure><ul><li>lambda 关键字</li><li>arguments 参数列表，可以包含零个或多个参数，必须在：前指定</li><li>expression 用于计算并返回函数的结果的表达式</li></ul><h6 id="以下lambda函数没有参数："><a href="#以下lambda函数没有参数：" class="headerlink" title="以下lambda函数没有参数："></a>以下lambda函数没有参数：</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">f = <span class="hljs-keyword">lambda</span>: <span class="hljs-string">&quot;Hello,World!&quot;</span><br><span class="hljs-built_in">print</span>(f())<br></code></pre></td></tr></table></figure><p>输出结果为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">Hello,World!<br></code></pre></td></tr></table></figure><h6 id="以下实例用lambda创建匿名函数，设置一个参数a并计算a加10"><a href="#以下实例用lambda创建匿名函数，设置一个参数a并计算a加10" class="headerlink" title="以下实例用lambda创建匿名函数，设置一个参数a并计算a加10"></a>以下实例用lambda创建匿名函数，设置一个参数a并计算a加10</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">x = <span class="hljs-keyword">lambda</span> a : a+<span class="hljs-number">10</span><br><span class="hljs-built_in">print</span>(x(<span class="hljs-number">5</span>))<br></code></pre></td></tr></table></figure><p>输出结果为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pyton">15<br></code></pre></td></tr></table></figure><h6 id="lamda表达式也可设置多个参数，中间用”-“隔开"><a href="#lamda表达式也可设置多个参数，中间用”-“隔开" class="headerlink" title="lamda表达式也可设置多个参数，中间用”,“隔开"></a>lamda表达式也可设置多个参数，中间用”,“隔开</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">x = <span class="hljs-keyword">lambda</span> a,b: a*b<br><span class="hljs-built_in">print</span>(x(<span class="hljs-number">5</span>,<span class="hljs-number">6</span>))<br></code></pre></td></tr></table></figure><p>输出结果为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">30</span><br></code></pre></td></tr></table></figure><h6 id="以下实例使用lambda创建函数，函数参数a-b-c相加并返回结果"><a href="#以下实例使用lambda创建函数，函数参数a-b-c相加并返回结果" class="headerlink" title="以下实例使用lambda创建函数，函数参数a,b,c相加并返回结果"></a>以下实例使用lambda创建函数，函数参数a,b,c相加并返回结果</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">x = <span class="hljs-keyword">lambda</span> a,b,c: a+b+c<br><span class="hljs-built_in">print</span>(x(<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">2</span>))<br></code></pre></td></tr></table></figure><p>输出结果为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">13</span><br></code></pre></td></tr></table></figure><h6 id="lambda函数与内置函数如map-、filter-、reduce-一起使用，以便在集合上执行操作"><a href="#lambda函数与内置函数如map-、filter-、reduce-一起使用，以便在集合上执行操作" class="headerlink" title="lambda函数与内置函数如map()、filter()、reduce()一起使用，以便在集合上执行操作"></a>lambda函数与内置函数如map()、filter()、reduce()一起使用，以便在集合上执行操作</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">numbers = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br>squard = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: x**<span class="hljs-number">2</span>,numbers))<br><span class="hljs-built_in">print</span>(squard) <span class="hljs-comment"># 输出[1,4,9,16,25]</span><br></code></pre></td></tr></table></figure><p>输出结果为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">[<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">9</span>,<span class="hljs-number">16</span>,<span class="hljs-number">25</span>]<br></code></pre></td></tr></table></figure><h6 id="使用lambda函数与filter一起筛选偶数"><a href="#使用lambda函数与filter一起筛选偶数" class="headerlink" title="使用lambda函数与filter一起筛选偶数"></a>使用lambda函数与filter一起筛选偶数</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">numbers = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>]<br>even_numbers = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> x : x%<span class="hljs-number">2</span> == <span class="hljs-number">0</span>),numbers)<br><span class="hljs-built_in">print</span>(even_numbers) <span class="hljs-comment">#输出[2,4,6,8]</span><br></code></pre></td></tr></table></figure><p>输出结果为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">[<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>]<br></code></pre></td></tr></table></figure><h6 id="下面是一个使用reduce-和lambda表达式演示如何计算一个序列的累积乘积"><a href="#下面是一个使用reduce-和lambda表达式演示如何计算一个序列的累积乘积" class="headerlink" title="下面是一个使用reduce()和lambda表达式演示如何计算一个序列的累积乘积"></a>下面是一个使用reduce()和lambda表达式演示如何计算一个序列的累积乘积</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> reduce<br>numbers= [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br><span class="hljs-comment"># 使用reduce()和lambda函数计算乘积</span><br>product = reduce(<span class="hljs-keyword">lambda</span> x,y:x*y,numbers)<br><span class="hljs-built_in">print</span>(product) <span class="hljs-comment">#输出: 120</span><br></code></pre></td></tr></table></figure><p>输出结果为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">120</span><br></code></pre></td></tr></table></figure><p>在上面的实例中，reduce通过遍历numbers列表，并使用lambda函数将累积的结果不断更新，最终得到了<code>1*2*3*4*5=120</code>的结果</p><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><p>Python从设计之初就已经是一门面向对象的语言，因此在Python中创建一个类和对象是很容易的。</p><h4 id="技术简介"><a href="#技术简介" class="headerlink" title="技术简介"></a>技术简介</h4><ul><li><strong>类：</strong>用来描述具有相同属性和方法的对象的集合。它定义了该集合中每个对象所共有的属性和方法。对象是类的实例。</li><li><strong>方法：</strong> 类中定义的函数</li><li><strong>对象：</strong> 通过类定义的数据结构实例。对象包括两个数据成员（类变量和实例变量）和方法</li><li><strong>类变量：</strong> 类变量在整个实例化的对象中是公用的。类变量定义在类中且在函数体之外。类变量通常不作为实例变量使用。</li><li><strong>实例化：</strong> 创建一个类的实例，类的具体对象。</li><li><strong>实例变量：</strong> 在类的声明中，属性是用变量来表示的，这种变量就称为实例变量，实例变量就是一个用self修饰的变量。</li><li><strong>局部变量：</strong> 定义在方法中的变量，只作用域当前实例的类。</li></ul><p>和其它编程语言相比，Python在尽可能不增加新的语法和语义的情况下加入了类机制。</p><p>Python中的类提供了面向对象编程的所有基本功能：类的继承机制允许多个基类，派生类可以覆盖基类中的任何方法，方法中可以调用基类中古代同名方法。</p><p>对象可以包含任意数量和类型的数据。</p><h4 id="类定义"><a href="#类定义" class="headerlink" title="类定义"></a>类定义</h4><p>语法结构如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ClassName</span>:<br>    &lt;statement-<span class="hljs-number">1</span>&gt;<br>    .<br>    .<br>    .<br>    &lt;statement-N&gt;<br></code></pre></td></tr></table></figure><p>类实例化后，可以使用其属性，实际上，创建一个类之后，可以通过类名访问其属性。</p><h4 id="类对象"><a href="#类对象" class="headerlink" title="类对象"></a>类对象</h4><p>类对象支持两种操作：<strong>属性引用</strong>和<strong>实例化</strong>。</p><p>属性引用使用和Python中所有属性引用一样的标准语法：<strong>obj.name</strong>。</p><p>类对象创建后，类命名空间中所有的命名都是有效属性名。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br> <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;一个简单的类实例&quot;&quot;&quot;</span><br>    i = <span class="hljs-number">12345</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;hello world&#x27;</span><br> <br><span class="hljs-comment"># 实例化类</span><br>x = MyClass()<br> <br><span class="hljs-comment"># 访问类的属性和方法</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;MyClass 类的属性 i 为：&quot;</span>, x.i)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;MyClass 类的方法 f 输出为：&quot;</span>, x.f())<br></code></pre></td></tr></table></figure><h6 id="以上代码创建了一个新的类实例并将该对象赋给局部变量x，x为空的对象。"><a href="#以上代码创建了一个新的类实例并将该对象赋给局部变量x，x为空的对象。" class="headerlink" title="以上代码创建了一个新的类实例并将该对象赋给局部变量x，x为空的对象。"></a>以上代码创建了一个新的类实例并将该对象赋给局部变量x，x为空的对象。</h6><p>输出结果为：</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vbnet"><span class="hljs-keyword">MyClass</span> 类的属性 i 为： <span class="hljs-number">12345</span><br><span class="hljs-keyword">MyClass</span> 类的方法 f 输出为： hello world<br></code></pre></td></tr></table></figure><h6 id="类有一个名为-init-的构造方法，该方法在类实例化时会自动调用，如下"><a href="#类有一个名为-init-的构造方法，该方法在类实例化时会自动调用，如下" class="headerlink" title="类有一个名为__init__()的构造方法，该方法在类实例化时会自动调用，如下"></a>类有一个名为<code>__init__()</code>的构造方法，该方法在类实例化时会自动调用，如下</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>    self.data = []<br></code></pre></td></tr></table></figure><p>类定义了<code>__init__()</code>方法，类的实例化操作会自动调用<code>__init__()</code>方法。如下实例化类MyClass，对应的<code>__init__()</code>方法会被调用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">x=MyClass()<br></code></pre></td></tr></table></figure><h6 id="init-方法可以有参数，参数通过-init-传递到类的实例化操作上。如："><a href="#init-方法可以有参数，参数通过-init-传递到类的实例化操作上。如：" class="headerlink" title="__init__()方法可以有参数，参数通过__init__()传递到类的实例化操作上。如："></a><code>__init__()</code>方法可以有参数，参数通过<code>__init__()</code>传递到类的实例化操作上。如：</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br> <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Complex</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, realpart, imagpart</span>):<br>        self.r = realpart<br>        self.i = imagpart<br>x = Complex(<span class="hljs-number">3.0</span>, -<span class="hljs-number">4.5</span>)<br><span class="hljs-built_in">print</span>(x.r, x.i)   <span class="hljs-comment"># 输出结果：3.0 -4.5</span><br></code></pre></td></tr></table></figure><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">__init__() -&gt; <span class="hljs-literal">None</span>:<br>    <span class="hljs-keyword">pass</span><br><span class="hljs-comment"># vscode自动补齐了如上内容，其中</span><br><span class="hljs-comment"># -&gt; 代表函数的返回值是空值，没有具体返回结果</span><br><span class="hljs-comment"># pass代表占位符，此函数什么都不做</span><br></code></pre></td></tr></table></figure></blockquote><h4 id="self代表类的实例，而非类"><a href="#self代表类的实例，而非类" class="headerlink" title="self代表类的实例，而非类"></a>self代表类的实例，而非类</h4><p>类的方法与普通的函数只有一个特别的区别——它们必须有一个额外的<strong>第一个参数名称</strong>，按照惯例它的名称是self。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">prt</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(self)<br>        <span class="hljs-built_in">print</span>(self.__class__)<br> <br>t = Test()<br>t.prt()<br></code></pre></td></tr></table></figure><p>上述实例执行结果为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">&lt;__main__.Test instance at <span class="hljs-number">0x100771878</span>&gt;<br>__main__.Test<br></code></pre></td></tr></table></figure><p>从执行结果可以很明显的看出，self代表的是类的实例，代表当前对象的地址，而self.class则指向类。</p><p>self不是python关键字，我们把他缓存任何名字都可以正常执行。</p><h4 id="类的方法"><a href="#类的方法" class="headerlink" title="类的方法"></a>类的方法</h4><p>在类的内部，使用<code>def</code>关键字来定义一个方法，与一般函数定义不同，类方法必须包含参数self，且为第一个参数，self代表的是类的实例。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 类定义</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">people</span>:<br>    <span class="hljs-comment"># 定义基本属性</span><br>    name = <span class="hljs-string">&#x27;&#x27;</span><br>    age = <span class="hljs-number">0</span><br>    <span class="hljs-comment"># 定义私有属性，私有属性在外部无法直接进行访问</span><br>    __weight = <span class="hljs-number">0</span><br>    <span class="hljs-comment"># 定义构造方法</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,n,a,w</span>):<br>        self.name = n<br>        self.age = a<br>        self.__weight = w<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">speak</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;%s说:我%d岁。&quot;</span>%(self.name,self.age))<br><span class="hljs-comment"># 实例化类</span><br>p = people(<span class="hljs-string">&#x27;骨头汤&#x27;</span>,<span class="hljs-number">18</span>,<span class="hljs-number">30</span>)<br>p.speak()<br></code></pre></td></tr></table></figure><p>执行上述程序输出结果为：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">骨头汤说:我18岁</span><br></code></pre></td></tr></table></figure><h2 id="推导式"><a href="#推导式" class="headerlink" title="推导式"></a>推导式</h2><p>python推导式可以从一个数据序列构建另一个新的数据序列的结构体，支持推导式的数据结构有:</p><ul><li>列表list</li><li>字典dict</li><li>集合set</li><li>元组tuple</li></ul><h4 id="列表推导式"><a href="#列表推导式" class="headerlink" title="列表推导式"></a>列表推导式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">[表达式 <span class="hljs-keyword">for</span> 变量 <span class="hljs-keyword">in</span> 列表]<br>或<br>[表达式 <span class="hljs-keyword">for</span> 变量 <span class="hljs-keyword">in</span> 列表 <span class="hljs-keyword">if</span> 条件]<br></code></pre></td></tr></table></figure><h6 id="过滤掉长度小于或等于3的字符串列表，并将剩下的转换成大写字母"><a href="#过滤掉长度小于或等于3的字符串列表，并将剩下的转换成大写字母" class="headerlink" title="过滤掉长度小于或等于3的字符串列表，并将剩下的转换成大写字母"></a>过滤掉长度小于或等于3的字符串列表，并将剩下的转换成大写字母</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>names = [<span class="hljs-string">&#x27;Bob&#x27;</span>,<span class="hljs-string">&#x27;Tom&#x27;</span>,<span class="hljs-string">&#x27;alice&#x27;</span>,<span class="hljs-string">&#x27;Jerry&#x27;</span>,<span class="hljs-string">&#x27;Wendy&#x27;</span>,<span class="hljs-string">&#x27;Smith&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>new_names = [name.upper()<span class="hljs-keyword">for</span> name <span class="hljs-keyword">in</span> names <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(name)&gt;<span class="hljs-number">3</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(new_names)<br>[<span class="hljs-string">&#x27;ALICE&#x27;</span>, <span class="hljs-string">&#x27;JERRY&#x27;</span>, <span class="hljs-string">&#x27;WENDY&#x27;</span>, <span class="hljs-string">&#x27;SMITH&#x27;</span>]<br></code></pre></td></tr></table></figure><h6 id="计算30以内可以被3整除的整数"><a href="#计算30以内可以被3整除的整数" class="headerlink" title="计算30以内可以被3整除的整数"></a>计算30以内可以被3整除的整数</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>multiples= [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">30</span>) <span class="hljs-keyword">if</span> i % <span class="hljs-number">3</span> == <span class="hljs-number">0</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(multiples)<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">[<span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">9</span>, <span class="hljs-number">12</span>, <span class="hljs-number">15</span>, <span class="hljs-number">18</span>, <span class="hljs-number">21</span>, <span class="hljs-number">24</span>, <span class="hljs-number">27</span>]<br></code></pre></td></tr></table></figure><h4 id="字典推导式"><a href="#字典推导式" class="headerlink" title="字典推导式"></a>字典推导式</h4><p>字典推导基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123; key_expr: value_expr <span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> collection &#125;<br>或<br>&#123; key_expr: value_expr <span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> collection <span class="hljs-keyword">if</span> condition &#125;<br></code></pre></td></tr></table></figure><h6 id="使用字符串及其长度创建字典"><a href="#使用字符串及其长度创建字典" class="headerlink" title="使用字符串及其长度创建字典"></a>使用字符串及其长度创建字典</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">listdemo = [<span class="hljs-string">&#x27;Google&#x27;</span>,<span class="hljs-string">&#x27;Runoob&#x27;</span>, <span class="hljs-string">&#x27;Taobao&#x27;</span>]<br><span class="hljs-comment"># 将列表中各字符串值为键，各字符串的长度为值，组成键值对</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>newdict = &#123;key:<span class="hljs-built_in">len</span>(key) <span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> listdemo&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span>newdict<br>&#123;<span class="hljs-string">&#x27;Google&#x27;</span>: <span class="hljs-number">6</span>, <span class="hljs-string">&#x27;Runoob&#x27;</span>: <span class="hljs-number">6</span>, <span class="hljs-string">&#x27;Taobao&#x27;</span>: <span class="hljs-number">6</span>&#125;<br></code></pre></td></tr></table></figure><h6 id="提供三个数字，以三个数字为键，三个数字的平方为值来创建字典"><a href="#提供三个数字，以三个数字为键，三个数字的平方为值来创建字典" class="headerlink" title="提供三个数字，以三个数字为键，三个数字的平方为值来创建字典"></a>提供三个数字，以三个数字为键，三个数字的平方为值来创建字典</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>dic = &#123;x: x**<span class="hljs-number">2</span> <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> (<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>)&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span>dic<br>&#123;<span class="hljs-number">2</span>: <span class="hljs-number">4</span>, <span class="hljs-number">4</span>: <span class="hljs-number">16</span>, <span class="hljs-number">6</span>: <span class="hljs-number">36</span>&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">type</span>(dic)<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;dict&#x27;</span>&gt;<br></code></pre></td></tr></table></figure><h4 id="集合推导式"><a href="#集合推导式" class="headerlink" title="集合推导式"></a>集合推导式</h4><p>集合推导基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123; expression <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> <span class="hljs-type">Sequence</span> &#125;<br>或<br>&#123; expression <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> <span class="hljs-type">Sequence</span> <span class="hljs-keyword">if</span> conditional &#125;<br></code></pre></td></tr></table></figure><h6 id="计算1，2，3的平方数"><a href="#计算1，2，3的平方数" class="headerlink" title="计算1，2，3的平方数"></a>计算1，2，3的平方数</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>setnew = &#123;i**<span class="hljs-number">2</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> (<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span>setnew<br>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>&#125;<br></code></pre></td></tr></table></figure><h6 id="判断不是abc的字母并输出"><a href="#判断不是abc的字母并输出" class="headerlink" title="判断不是abc的字母并输出"></a>判断不是abc的字母并输出</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>a = &#123;x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;abracadabra&#x27;</span> <span class="hljs-keyword">if</span> x <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;abc&#x27;</span>&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span>a<br>&#123;<span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">type</span>(a)<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;set&#x27;</span>&gt;<br></code></pre></td></tr></table></figure><h4 id="元组推导式（生成器表达式）"><a href="#元组推导式（生成器表达式）" class="headerlink" title="元组推导式（生成器表达式）"></a>元组推导式（生成器表达式）</h4><p>元组推导式可以利用range区间，元组，列表，字典和集合等数据类型，快速生成一个满足指定需求的元组</p><p>元组推导式基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">(expression <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> <span class="hljs-type">Sequence</span> )<br>或<br>(expression <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> <span class="hljs-type">Sequence</span> <span class="hljs-keyword">if</span> conditional )<br></code></pre></td></tr></table></figure><p>元组推导式和列表推导式的用法也完全相同，只是元组推导式是用（）而列表推导式用[]，另外元组推导式返回的结果是一个生成器对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>a = (x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>))<br><span class="hljs-meta">&gt;&gt;&gt; </span>a<br>&lt;generator <span class="hljs-built_in">object</span> &lt;genexpr&gt; at <span class="hljs-number">0x7faf6ee20a50</span>&gt;  <span class="hljs-comment"># 返回的是生成器对象</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">tuple</span>(a)       <span class="hljs-comment"># 使用 tuple() 函数，可以直接将生成器对象转换成元组</span><br>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>)<br></code></pre></td></tr></table></figure><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><p>迭代器是python最强大的功能之一，是访问集合元素的一种方式。</p><p>迭代器是一个可以记住遍历的位置的对象。</p><p>迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。迭代器只能往前不会后退。</p><p>迭代器有两个基本方法：<code>iter()</code>和<code>next()</code>。</p><h6 id="字符串，列表或元组对象都可用于创建迭代器。"><a href="#字符串，列表或元组对象都可用于创建迭代器。" class="headerlink" title="字符串，列表或元组对象都可用于创建迭代器。"></a>字符串，列表或元组对象都可用于创建迭代器。</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>it = <span class="hljs-built_in">iter</span>(<span class="hljs-built_in">list</span>)    <span class="hljs-comment"># 创建迭代器对象</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span> (<span class="hljs-built_in">next</span>(it))   <span class="hljs-comment"># 输出迭代器的下一个元素</span><br><span class="hljs-number">1</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span> (<span class="hljs-built_in">next</span>(it))<br><span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h6 id="迭代器对象可以使用常规for语句进行遍历"><a href="#迭代器对象可以使用常规for语句进行遍历" class="headerlink" title="迭代器对象可以使用常规for语句进行遍历"></a>迭代器对象可以使用常规for语句进行遍历</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br> <br><span class="hljs-built_in">list</span>=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br>it = <span class="hljs-built_in">iter</span>(<span class="hljs-built_in">list</span>)    <span class="hljs-comment"># 创建迭代器对象</span><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> it:<br>    <span class="hljs-built_in">print</span> (x, end=<span class="hljs-string">&quot; &quot;</span>)<br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p>也可以使用next()函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br> <br><span class="hljs-keyword">import</span> sys         <span class="hljs-comment"># 引入 sys 模块</span><br> <br><span class="hljs-built_in">list</span>=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br>it = <span class="hljs-built_in">iter</span>(<span class="hljs-built_in">list</span>)    <span class="hljs-comment"># 创建迭代器对象</span><br> <br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-built_in">print</span> (<span class="hljs-built_in">next</span>(it))<br>    <span class="hljs-keyword">except</span> StopIteration:<br>        sys.exit()<br></code></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">1</span><br><span class="hljs-number">2</span><br><span class="hljs-number">3</span><br><span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><h4 id="创建一个迭代器"><a href="#创建一个迭代器" class="headerlink" title="创建一个迭代器"></a>创建一个迭代器</h4><p>把一个类作为一个迭代器使用需要在类中实现两个方法<code>__iter__()</code>与<code>__next__()</code>。</p><p>Python的构造函数为<code>__init__()</code>，它会在对象初始化的时候执行。</p><p><code>__iter__()</code>方法返回一个特殊的迭代器对象，这个迭代器对象实现了<code>__next__()</code>方法并通过StopIteration异常标识迭代的完成。</p><p><code>__next__()</code>方法会返回下一个迭代器对象。</p><p>创建一个返回数字的迭代器，初始值为1，逐步递增1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyNumbers</span>:<br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">__iter__</span>(<span class="hljs-params">self</span>):<br>    self.a = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> self<br> <br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">__next__</span>(<span class="hljs-params">self</span>):<br>    x = self.a<br>    self.a += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> x<br> <br>myclass = MyNumbers()<br>myiter = <span class="hljs-built_in">iter</span>(myclass)<br> <br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(myiter))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(myiter))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(myiter))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(myiter))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(myiter))<br></code></pre></td></tr></table></figure><p>输出结果为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">1</span><br><span class="hljs-number">2</span><br><span class="hljs-number">3</span><br><span class="hljs-number">4</span><br><span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><h4 id="StopIteration"><a href="#StopIteration" class="headerlink" title="StopIteration"></a>StopIteration</h4><p>StopIteration异常用于标识迭代器的完成，防止无限出现无限循环的情况在<code>__next__()</code>方法中可以指定在完成指定循环次数后触发StopIteration异常来结束迭代。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">```<br><br><br><br><br><br><span class="hljs-comment">#### 遗！误！</span><br><br>```python<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">greetPerson</span>(<span class="hljs-params">*name</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Hello&#x27;</span>, name)<br>  <br>greetPerson(<span class="hljs-string">&#x27;Runoob&#x27;</span>, <span class="hljs-string">&#x27;Google&#x27;</span>)<br></code></pre></td></tr></table></figure><p>以上代码输出结果为？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">Hello Runoob<br>Hello Google<br></code></pre></td></tr></table></figure><p>加了*的参数会以元组（tuple）的形式导入，存放所有未命名的变量参数</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>将ipynb文件转换为markdown</title>
    <link href="/2024/02/28/%E5%B0%86ipynb%E6%96%87%E4%BB%B6%E8%BD%AC%E6%8D%A2%E4%B8%BAmarkdown/"/>
    <url>/2024/02/28/%E5%B0%86ipynb%E6%96%87%E4%BB%B6%E8%BD%AC%E6%8D%A2%E4%B8%BAmarkdown/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Jupyter</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python刷题笔记</title>
    <link href="/2024/02/28/Python%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    <url>/2024/02/28/Python%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a><strong>进制转换</strong></h2><blockquote><p><strong>进制转换</strong></p><p><strong>描述</strong></p><p>写出一个程序，接受一个十六进制的数，输出该数值的十进制表示。</p><p>数据范围：保证结果在 1≤n≤2^31−1</p><p><strong>输入描述：</strong></p><p>输入一个十六进制的数值字符串。</p><p><strong>输出描述：</strong></p><p>输出该数值的十进制字符串。不同组的测试用例用\n隔开。</p><p><strong>示例1</strong></p><p><strong>输入：</strong></p><p>0xAA</p><p><strong>输出：</strong></p><p>170</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> sys.stdin:<span class="hljs-comment"># sys.stdin用于获取用户或其它输入源的一个接口，通常用来从键盘或者文件或其它程序中读取数据</span><br>      <span class="hljs-comment"># 这种写法会让脚本读取命令行中的每一行数据，直到输入EOF</span><br>    a = line.strip()  <span class="hljs-comment"># python字符串的一个方法，会返回一个新的字符串，清理开头和结尾的空白字符（空格，制表符，换行符）</span><br>      <span class="hljs-comment"># 如果输入的line是&quot;  hello  \n&quot;,则line.strip()=&quot;hello&quot;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(a,<span class="hljs-number">16</span>))<br></code></pre></td></tr></table></figure><p>或</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(),<span class="hljs-number">16</span>))<br></code></pre></td></tr></table></figure><h2 id="两数之和"><a href="#两数之和" class="headerlink" title="两数之和"></a>两数之和</h2><blockquote><p>给定一个整数数组 <code>nums</code> 和一个整数目标值 <code>target</code>，请你在该数组中找出 <strong>和为目标值</strong> <em><code>target</code></em> 的那 <strong>两个</strong> 整数，并返回它们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p><p>你可以按任意顺序返回答案。</p><p><strong>示例 1：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs inform7">&gt;输入：nums = <span class="hljs-comment">[2,7,11,15]</span>, target = 9<br>&gt;输出：<span class="hljs-comment">[0,1]</span><br>&gt;解释：因为 nums<span class="hljs-comment">[0]</span> + nums<span class="hljs-comment">[1]</span> == 9 ，返回 <span class="hljs-comment">[0, 1]</span> 。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">&gt;输入：nums = <span class="hljs-comment">[3,2,4]</span>, target = 6<br>&gt;输出：<span class="hljs-comment">[1,2]</span><br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">&gt;输入：nums = <span class="hljs-comment">[3,3]</span>, target = 6<br>&gt;输出：<span class="hljs-comment">[0,1]</span><br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>2 &lt;= nums.length &lt;= 104</code></li><li><code>-109 &lt;= nums[i] &lt;= 109</code></li><li><code>-109 &lt;= target &lt;= 109</code></li><li><strong>只会存在一个有效答案</strong></li></ul><p><strong>进阶：</strong>你可以想出一个时间复杂度小于 <code>O(n2)</code> 的算法吗？</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">twoSum</span>(<span class="hljs-params">self,nums,target</span>):<br>        lens = <span class="hljs-built_in">len</span>(nums)<span class="hljs-comment">#数组长度</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,lens):<span class="hljs-comment">#i在数组内遍历，从第二个数开始</span><br>            <span class="hljs-keyword">if</span>(target-nums[i]) <span class="hljs-keyword">in</span> nums:<span class="hljs-comment">#如果另一个数在数组里</span><br>                j = nums.index(target-nums[i])<span class="hljs-comment">#定位这个数的下角标</span><br>                <span class="hljs-keyword">if</span>(j!=i):<span class="hljs-comment">#这个数不能是i</span><br>                    <span class="hljs-keyword">break</span><br><br>        <span class="hljs-keyword">return</span> [j,i]<br></code></pre></td></tr></table></figure><h2 id="明明的随机数"><a href="#明明的随机数" class="headerlink" title="明明的随机数"></a>明明的随机数</h2><blockquote><h4 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h4><p>明明生成了<em>N</em>个1到500之间的随机整数。请你删去其中重复的数字，即相同的数字只保留一个，把其余相同的数去掉，然后再把这些数从小到大排序，按照排好的顺序输出。</p><p>数据范围： 1≤n≤1000 1≤<em>n</em>≤1000 ，输入的数字大小满足 1≤val≤500 </p><h5 id="输入描述："><a href="#输入描述：" class="headerlink" title="输入描述："></a>输入描述：</h5><p>第一行先输入随机整数的个数 N 。 接下来的 N 行每行输入一个整数，代表明明生成的随机数。 具体格式可以参考下面的”示例”。</p><h5 id="输出描述："><a href="#输出描述：" class="headerlink" title="输出描述："></a>输出描述：</h5><p>输出多行，表示输入数据处理后的结果</p><h4 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h4><p>输入：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs">3<br>2<br>2<br>1<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">1<br>2<br></code></pre></td></tr></table></figure><p>说明：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs routeros">输入解释：<br>第一个数字是3，也即这个小样例的<span class="hljs-attribute">N</span>=3，说明用计算机生成了3个1到500之间的随机整数，接下来每行一个随机数字，共3行，也即这3个随机数字为：<br>2<br>2<br>1<br>所以样例的输出为：<br>1<br>2  <br></code></pre></td></tr></table></figure></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-keyword">try</span>:<br>        n = <span class="hljs-built_in">input</span>() <span class="hljs-comment"># 输入n个数</span><br>        i=<span class="hljs-number">0</span><br>        lst = [] <span class="hljs-comment">#放数据的空列表</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">int</span>(n)): <span class="hljs-comment">#循环n次</span><br>            lst.append(<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())) <span class="hljs-comment">#将输入进来的数字填进</span><br>        uniq=<span class="hljs-built_in">set</span>(lst) <span class="hljs-comment">#列表转集合</span><br>        lst =<span class="hljs-built_in">list</span>(uniq) <span class="hljs-comment">#集合转列表</span><br>        lst.sort() <span class="hljs-comment">#列表排序</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> lst:<br>            <span class="hljs-built_in">print</span>(i) <span class="hljs-comment">#打印列表</span><br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><h2 id="字符个数统计"><a href="#字符个数统计" class="headerlink" title="字符个数统计"></a>字符个数统计</h2><blockquote><h2 id="描述-1"><a href="#描述-1" class="headerlink" title="描述"></a>描述</h2><p>编写一个函数，计算字符串中含有的不同字符的个数。字符在 ASCII 码范围内( 0~127 ，包括 0 和 127 )，换行表示结束符，不算在字符里。不在范围内的不作统计。多个相同的字符只计算一次</p><p>例如，对于字符串 abaca 而言，有 a、b、c 三种不同的字符，因此输出 3 。</p><p>数据范围：1≤<em>n</em>≤500 </p><h3 id="输入描述：-1"><a href="#输入描述：-1" class="headerlink" title="输入描述："></a>输入描述：</h3><p>输入一行没有空格的字符串。</p><h3 id="输出描述：-1"><a href="#输出描述：-1" class="headerlink" title="输出描述："></a>输出描述：</h3><p>输出 输入字符串 中范围在(0~127，包括0和127)字符的种数。</p><h2 id="示例1-1"><a href="#示例1-1" class="headerlink" title="示例1"></a>示例1</h2><p>输入：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">abc</span><br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">3<br></code></pre></td></tr></table></figure><h2 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h2><p>输入：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">aaa</span><br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">1<br></code></pre></td></tr></table></figure></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> sys.stdin:<br>    a = line.strip()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(<span class="hljs-built_in">set</span>(a)))<br></code></pre></td></tr></table></figure><p>或</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(<span class="hljs-built_in">set</span>(<span class="hljs-built_in">input</span>().replace(<span class="hljs-string">&#x27;\n&#x27;</span>,<span class="hljs-string">&#x27; &#x27;</span>))))<br></code></pre></td></tr></table></figure><h2 id="跳台阶"><a href="#跳台阶" class="headerlink" title="跳台阶"></a>跳台阶</h2><blockquote><h2 id="描述-2"><a href="#描述-2" class="headerlink" title="描述"></a>描述</h2><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个 n 级的台阶总共有多少种跳法（先后次序不同算不同的结果）。</p><p>数据范围：1≤<em>n</em>≤40</p><p>要求：时间复杂度：<em>O</em>(<em>n</em>) ，空间复杂度： <em>O</em>(1)</p><h2 id="示例1-2"><a href="#示例1-2" class="headerlink" title="示例1"></a>示例1</h2><p>输入：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">2<br></code></pre></td></tr></table></figure><p>返回值：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">2<br></code></pre></td></tr></table></figure><p>说明：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">青蛙要跳上两级台阶有两种跳法，分别是：先跳一级，再跳一级或者直接跳两级。因此答案为2       <br></code></pre></td></tr></table></figure><h2 id="示例2-1"><a href="#示例2-1" class="headerlink" title="示例2"></a>示例2</h2><p>输入：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">7<br></code></pre></td></tr></table></figure><p>返回值：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">21<br></code></pre></td></tr></table></figure></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">jumpFloor</span>(<span class="hljs-params">self , number: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-comment"># write code here</span><br>        <span class="hljs-keyword">if</span> number &lt;= <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> self.jumpFloor(number-<span class="hljs-number">1</span>)+self.jumpFloor(number-<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><h2 id="整数与IP地址间的转换"><a href="#整数与IP地址间的转换" class="headerlink" title="整数与IP地址间的转换"></a><strong>整数与IP地址间的转换</strong></h2><blockquote><h2 id="描述-3"><a href="#描述-3" class="headerlink" title="描述"></a>描述</h2><p>原理：ip地址的每段可以看成是一个0-255的整数，把每段拆分成一个二进制形式组合起来，然后把这个二进制数转变成<br>一个长整数。<br>举例：一个ip地址为10.0.3.193<br>每段数字       相对应的二进制数<br>10          00001010<br>0          00000000<br>3          00000011<br>193         11000001</p><p>组合起来即为：00001010 00000000 00000011 11000001,转换为10进制数就是：167773121，即该IP地址转换后的数字就是它了。</p><p>数据范围：保证输入的是合法的 IP 序列</p><h3 id="输入描述：-2"><a href="#输入描述：-2" class="headerlink" title="输入描述："></a>输入描述：</h3><p>输入<br>1 输入IP地址<br>2 输入10进制型的IP地址</p><h3 id="输出描述：-2"><a href="#输出描述：-2" class="headerlink" title="输出描述："></a>输出描述：</h3><p>输出<br>1 输出转换成10进制的IP地址<br>2 输出转换后的IP地址</p><h2 id="示例1-3"><a href="#示例1-3" class="headerlink" title="示例1"></a>示例1</h2><p>输入：</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">10.0.3.193</span><br><span class="hljs-number">167969729</span><br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">167773121</span><br><span class="hljs-number">10.3.3.193</span><br></code></pre></td></tr></table></figure></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-keyword">try</span>:<span class="hljs-comment"># 用于尝试执行可能会引发异常的代码块</span><br>        ip = <span class="hljs-built_in">input</span>()<span class="hljs-comment">#从用户这里获取一个字符串输入，ip地址</span><br>        num = <span class="hljs-built_in">input</span>()<span class="hljs-comment">#从用户这里获取字符串输入，二进制数</span><br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">break</span><br><br>    <span class="hljs-keyword">else</span>:<span class="hljs-comment">#如果try代码块中代码执行成功，那么将执行else代码块中的代码</span><br>        ip_list = ip.split(<span class="hljs-string">&#x27;.&#x27;</span>)<span class="hljs-comment">#将输入的IP地址字符串按&#x27;.&#x27;分割，得到一个包含四个字符串的列表</span><br>        ip2num = <span class="hljs-built_in">str</span>()<span class="hljs-comment">#初始化一个空字符串，用于存储转换后的二进制数</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> ip_list:<span class="hljs-comment">#遍历其中的每个元素</span><br>            a = <span class="hljs-built_in">bin</span>(<span class="hljs-built_in">int</span>(i,<span class="hljs-number">10</span>))[<span class="hljs-number">2</span>:]<span class="hljs-comment">#将ip地址的一部分从十进制转换为二进制</span><br>            a = <span class="hljs-string">&#x27;0&#x27;</span>*(<span class="hljs-number">8</span>-<span class="hljs-built_in">len</span>(a)) + a <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(a)&lt;<span class="hljs-number">8</span> <span class="hljs-keyword">else</span> a<span class="hljs-comment">#如果二进制数长度小于8，应该在签名添加足够的0，使其长度达到8</span><br>            ip2num += a<span class="hljs-comment">#将转换后的二进制数添加到ip2num结尾</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(ip2num,<span class="hljs-number">2</span>))<span class="hljs-comment">#将ip2num从二进制转化为十进制</span><br>        <span class="hljs-comment"># num to ip</span><br>        num2ip = []<span class="hljs-comment">#初始化一个空列表，用于存储转换后的IP地址</span><br>        num2 = <span class="hljs-built_in">bin</span>(<span class="hljs-built_in">int</span>(num,<span class="hljs-number">10</span>))[<span class="hljs-number">2</span>:]<span class="hljs-comment">#将输入的十进制数转换为二进制数</span><br>        num2 = <span class="hljs-string">&#x27;0&#x27;</span>*(<span class="hljs-number">32</span>-<span class="hljs-built_in">len</span>(num2))+num2 <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(num2)&lt;<span class="hljs-number">32</span> <span class="hljs-keyword">else</span> num2<br>        <span class="hljs-comment">#如果二进制数长度小于32，那么在签名添加0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<span class="hljs-comment">#进行四次循环，每次循环处理二进制数的一部分</span><br>            b = num2[<span class="hljs-number">8</span>*i:<span class="hljs-number">8</span>*i+<span class="hljs-number">8</span>]<br>            b = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">int</span>(b,<span class="hljs-number">2</span>))<span class="hljs-comment">#将而仅是数的这一部分从二进制转换为十进制</span><br>            num2ip.append(b)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;.&#x27;</span>.join(num2ip))<span class="hljs-comment">#将num2ip列表中的元素使用.连接起来，形成字符串，最后打印出来</span><br></code></pre></td></tr></table></figure><h2 id="输入整型数组和排序标识，对其元素按照升序或降序进行排序"><a href="#输入整型数组和排序标识，对其元素按照升序或降序进行排序" class="headerlink" title="输入整型数组和排序标识，对其元素按照升序或降序进行排序"></a>输入整型数组和排序标识，对其元素按照升序或降序进行排序</h2><blockquote><h3 id="输入描述：-3"><a href="#输入描述：-3" class="headerlink" title="输入描述："></a>输入描述：</h3><p>第一行输入数组元素个数<br>第二行输入待排序的数组，每个数用空格隔开<br>第三行输入一个整数0或1。0代表升序排序，1代表降序排序</p><h3 id="输出描述：-3"><a href="#输出描述：-3" class="headerlink" title="输出描述："></a>输出描述：</h3><p>输出排好序的数字</p><h2 id="示例1-4"><a href="#示例1-4" class="headerlink" title="示例1"></a>示例1</h2><p>输入：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">8</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">4</span> <span class="hljs-number">9</span> <span class="hljs-number">3</span> <span class="hljs-number">55</span> <span class="hljs-number">64</span> <span class="hljs-number">25</span><br><span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">9</span> <span class="hljs-number">25</span> <span class="hljs-number">55</span> <span class="hljs-number">64</span><br></code></pre></td></tr></table></figure><h2 id="示例2-2"><a href="#示例2-2" class="headerlink" title="示例2"></a>示例2</h2><p>输入：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">5</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span><br><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">5 </span><span class="hljs-number">4</span> <span class="hljs-number">3</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>ls = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split()))<br>rnk = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br><span class="hljs-keyword">if</span> rnk == <span class="hljs-number">0</span>:<br>    ls.sort()<br>    ls = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">str</span>,ls)<span class="hljs-comment">#需要转成字符串才能拼接</span><br><span class="hljs-keyword">elif</span> rnk == <span class="hljs-number">1</span>:<br>    ls.sort(reverse=<span class="hljs-literal">True</span>)<br>    ls = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">str</span>,ls)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27; &#x27;</span>.join(ls))<br></code></pre></td></tr></table></figure><h2 id="符号运算-求分数计算结果"><a href="#符号运算-求分数计算结果" class="headerlink" title="符号运算&#x2F;求分数计算结果"></a>符号运算&#x2F;求分数计算结果</h2><blockquote><p>给定一个表达式，求其分数计算结果。 </p><p>表达式的限制如下: </p><p>1.所有的输入数字皆为 正整数 (包括 0) </p><p>2.仅支持四则运算 (+ - *&#x2F;) 和括号 </p><p>3.结果为整数或分数，分数必须化为最简格式 (比如 6,3&#x2F;4,7&#x2F;8,90&#x2F;7) </p><p>4.除数可能为 0，如果遇到这种情况，直接输出“ERROR </p><p>5.输入和最终计算结果中的数字都不会超出整型范围 用例输入一定合法，不会出现括号匹配的情况。</p><p>输入描述 </p><p>字符串格式的表达式，仅支持 + - *&#x2F;，数字可能超过两位，可能带有空格，没有负数长度小于 200 个字符。 </p><p>输出描述 </p><p>表达式结果，以最简格式表达</p><p>如果结果为整数，那么直接输出整数 </p><p>如果结果为负数，那么分子分母不可再约分，可以为假分数，不可表达为带分数结果可能是负数，符号放在前面</p><p>示例1<br>输入<br>1 + 5 * 7 &#x2F; 8<br>输出：<br>43&#x2F;8<br>示例2<br>输入<br>1 &#x2F; （0 - 5）<br>输出：<br>-1&#x2F;5<br>示例3<br>输入<br>1 *  (3 * 4 &#x2F; (8 - (7 + 0)))<br>输出：<br>12</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> functools<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> copy<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> math<br><span class="hljs-keyword">import</span> queue<br><br>nums = [] <span class="hljs-comment">#存储分数的栈。每个分数都表示为一个长度为2的列表，其中第一个元素是分子，第二个元素是分母。</span><br>operations = [] <span class="hljs-comment">#存储运算符的栈</span><br><br><span class="hljs-comment"># 最大公约数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gcd</span>(<span class="hljs-params">a,b</span>):<br>    <span class="hljs-keyword">if</span>(a%b==<span class="hljs-number">0</span>):<br>        <span class="hljs-keyword">return</span> b<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> gcd(b,a%b)<span class="hljs-comment">#用递归来找到最大公约数</span><br>    <br><span class="hljs-comment"># 用于执行运算符操作。从nums和operations中</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">eval_op</span>():<br>    <span class="hljs-keyword">global</span> nums,operations<br>    nums1 = nums.pop() <span class="hljs-comment">#取出最后一个操作数</span><br>    nums2 = nums.pop() <span class="hljs-comment">#取数倒数第二个操作数</span><br>    x = operations.pop() <span class="hljs-comment">#取出最后一个操作符</span><br>    result = [<span class="hljs-number">0</span>,<span class="hljs-number">0</span>] <span class="hljs-comment">#初始化结果</span><br>    <span class="hljs-keyword">if</span>(x == <span class="hljs-string">&#x27;*&#x27;</span> <span class="hljs-keyword">or</span> x == <span class="hljs-string">&#x27;+&#x27;</span> <span class="hljs-keyword">or</span> x == <span class="hljs-string">&#x27;-&#x27;</span>):<br>        result[<span class="hljs-number">0</span>] = nums2[<span class="hljs-number">0</span>] * nums1[<span class="hljs-number">0</span>] <span class="hljs-comment">#如果是加减乘，则分子相乘</span><br>    <span class="hljs-keyword">else</span>:<br>        result[<span class="hljs-number">0</span>] = nums2[<span class="hljs-number">0</span>] * nums1[<span class="hljs-number">1</span>] <span class="hljs-comment">#如果是除，则分子乘以分母</span><br><br>    sum_a = nums2[<span class="hljs-number">1</span>] * nums1[<span class="hljs-number">0</span>]<br>    sum_b = nums1[<span class="hljs-number">1</span>] * nums2[<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">if</span>(x == <span class="hljs-string">&#x27;*&#x27;</span>):<br>        result[<span class="hljs-number">1</span>] = nums2[<span class="hljs-number">1</span>] * nums1[<span class="hljs-number">1</span>] <span class="hljs-comment">#如果是乘，则分母相乘</span><br>    <span class="hljs-keyword">elif</span> (x == <span class="hljs-string">&#x27;+&#x27;</span>):<br>        result[<span class="hljs-number">1</span>] = sum_a + sum_b <span class="hljs-comment">#如果是加，则分子相加</span><br>    <span class="hljs-keyword">elif</span> (x == <span class="hljs-string">&#x27;-&#x27;</span>):<br>        result[<span class="hljs-number">1</span>] = sum_a - sum_b <span class="hljs-comment">#如果是减，则分子相减</span><br>    <span class="hljs-keyword">else</span>:<br>        result[<span class="hljs-number">1</span>] = nums2[<span class="hljs-number">1</span>] * nums1[<span class="hljs-number">0</span>] <span class="hljs-comment">#如果是除，则分母乘以分子</span><br><br>    nums.append(result) <span class="hljs-comment">#将结果添加到操作数列表</span><br><br><span class="hljs-comment">#获取操作符的优先级</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_priority</span>(<span class="hljs-params">input_char</span>):<br>    <span class="hljs-keyword">if</span>(input_char == <span class="hljs-string">&#x27;+&#x27;</span> <span class="hljs-keyword">or</span> input_char == <span class="hljs-string">&#x27;-&#x27;</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span> <span class="hljs-comment">#加减的优先级为0</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span> <span class="hljs-comment">#乘除的优先级为1</span><br>    <br><br>input_str = <span class="hljs-built_in">input</span>()<br>nums = []<br>operations = []<br>length = <span class="hljs-built_in">len</span>(input_str)<br>current = <span class="hljs-string">&quot;&quot;</span> <span class="hljs-comment">#初始化当前字符</span><br>i=<span class="hljs-number">0</span><span class="hljs-comment">#初始化索引</span><br><span class="hljs-keyword">while</span> (i&lt;length):<span class="hljs-comment">#遍历表达式</span><br>    <span class="hljs-keyword">if</span>(input_str[i].isdigit()):<span class="hljs-comment">#判断当前字符是否是数字</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            <span class="hljs-keyword">if</span>(<span class="hljs-keyword">not</span> input_str[i].isdigit()):<span class="hljs-comment">#如果当前字符不是数字，跳出循环</span><br>                <span class="hljs-keyword">break</span><br>            current += input_str[i] <span class="hljs-comment">#将当前字符添加到当前数字</span><br>            <span class="hljs-keyword">if</span>(i+<span class="hljs-number">1</span> &gt;= length): <span class="hljs-comment">#如果索引超出范围，则跳出循环</span><br>                <span class="hljs-keyword">break</span><br>            i+=<span class="hljs-number">1</span><span class="hljs-comment">#索引加一</span><br>        nums.append([<span class="hljs-number">1</span>,<span class="hljs-built_in">int</span>(current)])<span class="hljs-comment">#将当前数字添加到操作数列表</span><br>        current = <span class="hljs-string">&quot;&quot;</span><span class="hljs-comment">#清空当前数字</span><br>    <span class="hljs-keyword">elif</span> (input_str[i] == <span class="hljs-string">&#x27;(&#x27;</span>):<span class="hljs-comment">#如果当前字符是左括号</span><br>        operations.append(input_str[i])<span class="hljs-comment">#将左括号添加到操作符列表</span><br>    <span class="hljs-keyword">elif</span> (input_str[i] == <span class="hljs-string">&#x27;)&#x27;</span>):<span class="hljs-comment">#如果当前字符是右括号</span><br>        <span class="hljs-keyword">while</span>(operations[<span class="hljs-number">0</span>] != <span class="hljs-string">&#x27;(&#x27;</span>): <span class="hljs-comment">#如果操作符列表的最后一个元素不是左括号</span><br>            eval_op() <span class="hljs-comment">#执行操作符</span><br>        operations.pop(<span class="hljs-number">0</span>)<span class="hljs-comment">#删除操作符列表的最后一个元素（左括号）</span><br>    <span class="hljs-keyword">elif</span>(input_str[i] == <span class="hljs-string">&#x27; &#x27;</span>):<span class="hljs-comment">#如果当前字符是空格</span><br>        i+=<span class="hljs-number">1</span> <span class="hljs-comment">#索引加1</span><br>        <span class="hljs-keyword">continue</span> <span class="hljs-comment">#跳过当前循环</span><br>    <span class="hljs-keyword">else</span>: <span class="hljs-comment">#如果当前字符是操作符</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-built_in">len</span>(operations)&gt;<span class="hljs-number">0</span> <span class="hljs-keyword">and</span> operations[<span class="hljs-number">0</span>] != <span class="hljs-string">&#x27;(&#x27;</span> <span class="hljs-keyword">and</span> get_priority(input_str[i]) &lt;= get_priority(operations[<span class="hljs-number">0</span>])): <span class="hljs-comment">#如果操作符列表不为空，且最后一个元素不是左括号，且当前操作符的优先级小于等于最后一个操作符的优先级</span><br>            eval_op() <span class="hljs-comment">#执行操作符</span><br>        operations.append(input_str[i]) <span class="hljs-comment">#将当前操作符添加到操作符列表</span><br>    i+=<span class="hljs-number">1</span> <span class="hljs-comment">#索引加一</span><br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">len</span>(nums)&lt;=<span class="hljs-number">1</span>): <span class="hljs-comment">#如果操作数列表的长度小于等于1</span><br>        <span class="hljs-keyword">break</span> <span class="hljs-comment">#跳出循环</span><br>    <span class="hljs-keyword">else</span>:<br>        eval_op() <span class="hljs-comment">#执行操作符</span><br><br>result = nums[<span class="hljs-number">0</span>]<span class="hljs-comment">#获取结果</span><br><span class="hljs-keyword">if</span>(result[<span class="hljs-number">0</span>]==<span class="hljs-number">0</span>):<span class="hljs-comment">#如果分子为0</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;ERROR&quot;</span>)<span class="hljs-comment">#输出错误</span><br><span class="hljs-keyword">else</span>:<br>    up = gcd(result[<span class="hljs-number">0</span>],result[<span class="hljs-number">1</span>]) <span class="hljs-comment">#计算分子和分母的最大公约数</span><br>    result[<span class="hljs-number">0</span>] /= up <span class="hljs-comment">#分子除以最大公约数</span><br>    result[<span class="hljs-number">1</span>] /= up <span class="hljs-comment">#分母除以最大公约数</span><br>    output_str = <span class="hljs-string">&quot;&quot;</span> <span class="hljs-comment">#初始化输出字符串</span><br>    <span class="hljs-keyword">if</span>(result[<span class="hljs-number">0</span>] * result[<span class="hljs-number">1</span>]&lt;<span class="hljs-number">0</span>):<span class="hljs-comment">#如果结果为负数</span><br>        output_str += <span class="hljs-string">&quot;-&quot;</span><span class="hljs-comment">#在输出字符串前添加负号</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">abs</span>(result[<span class="hljs-number">0</span>]) == <span class="hljs-number">1</span>):<span class="hljs-comment">#如果分子绝对值为1</span><br>        <span class="hljs-built_in">print</span>(output_str+<span class="hljs-built_in">str</span>(result[<span class="hljs-number">1</span>]))<span class="hljs-comment">#输出分母</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(output_str+<span class="hljs-built_in">str</span>(<span class="hljs-built_in">abs</span>(<span class="hljs-built_in">int</span>(result[<span class="hljs-number">1</span>]))) + <span class="hljs-string">&quot;/&quot;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-built_in">abs</span>(<span class="hljs-built_in">int</span>(result[<span class="hljs-number">0</span>]))))<span class="hljs-comment">#输出分数</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java面向对象</title>
    <link href="/2024/02/27/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <url>/2024/02/27/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    
    <content type="html"><![CDATA[<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>继承就是子类继承父类的特征和行为，使得子类对象具有父类的实例域和方法，或子类从父类继承方法，使得子类具有父类相同的行为。</p><p>如列门纲目科属种</p><p><img src="https://www.runoob.com/wp-content/uploads/2013/12/14B0951E-FC75-47A3-B611-4E1883887339.jpg" alt="原图来自菜鸟教程"></p><h4 id="类的继承格式"><a href="#类的继承格式" class="headerlink" title="类的继承格式"></a>类的继承格式</h4><p>Java中通过extends关键字可以申明一个类是从另外一个类继承而来的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">class 父类&#123;    <br>&#125;<br>class 子类 extends 父类&#123;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="动物类"><a href="#动物类" class="headerlink" title="动物类"></a>动物类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Animal</span><span class="hljs-params">(String myName, <span class="hljs-type">int</span> myid)</span>&#123;<br>        name = myName;<br>        id = myid;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(name+<span class="hljs-string">&quot;正在吃&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sleep</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(name+<span class="hljs-string">&quot;正在睡&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">introduction</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;大家好！我是&quot;</span> +id+<span class="hljs-string">&quot;号&quot;</span>+name+<span class="hljs-string">&quot;。&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="企鹅类"><a href="#企鹅类" class="headerlink" title="企鹅类"></a>企鹅类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Penguin</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Penguin</span><span class="hljs-params">(String myName,<span class="hljs-type">int</span> myid)</span>&#123;<br>        <span class="hljs-built_in">super</span>(myName, myid);<br>    &#125; <br>&#125;<br></code></pre></td></tr></table></figure><h5 id="老鼠类"><a href="#老鼠类" class="headerlink" title="老鼠类"></a>老鼠类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Penguin</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Penguin</span><span class="hljs-params">(String myName,<span class="hljs-type">int</span> myid)</span>&#123;<br>        <span class="hljs-built_in">super</span>(myName, myid);<br>    &#125; <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="继承类型"><a href="#继承类型" class="headerlink" title="继承类型"></a>继承类型</h4><p><strong>Java不支持多继承，但是支持多重继承。</strong></p><p><img src="https://www.runoob.com/wp-content/uploads/2013/12/java-extends-2020-12-08.png" alt="img"></p><h4 id="继承的特性"><a href="#继承的特性" class="headerlink" title="继承的特性"></a>继承的特性</h4><ul><li>子类拥有父类非private的属性，方法。</li><li>子类可以拥有自己的属性和方法，即子类可以对父类进行扩展。</li><li>子类可以勇自己的方法实现父类的方法。</li><li>提高了类之间的耦合性，也是继承的<strong>缺点</strong>，耦合度高就会造成代码之间的联系越紧密，代码独立性差</li></ul><h4 id="继承关键字"><a href="#继承关键字" class="headerlink" title="继承关键字"></a>继承关键字</h4><p>继承可以用extends和implements这两个关键字来实现继承，而且所有的类都是继承于java.lang.Object，当一个类没有继承的两个关键字，则默认Object祖先类</p><h5 id="implements关键字"><a href="#implements关键字" class="headerlink" title="implements关键字"></a>implements关键字</h5><p>使用implements关键字可以变相的使java具有多继承的特性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">A</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sleep</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">B</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">A</span>,B &#123;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="super与this关键字"><a href="#super与this关键字" class="headerlink" title="super与this关键字"></a>super与this关键字</h5><p>super关键字：可以通过super关键字来实现对父类成员的访问，用来引用当前对象的父类</p><p>this关键字： 指向自己的引用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span>&#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;animal:eat&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span>&#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;dog:eat&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">eatTest</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-built_in">this</span>.eat();<span class="hljs-comment">//调用自己的方法</span><br>        <span class="hljs-built_in">super</span>.eat();<span class="hljs-comment">//调用父类方法</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestExtands</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">Animal</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Animal</span>();<br>        a.eat();   <br>        <span class="hljs-type">Dog</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>();<br>        d.eatTest();<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果为:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">animal:eat<br>dog:eat<br>animal:eat<br></code></pre></td></tr></table></figure><h5 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h5><p>final可以用来修饰变量（包括类属性、对象属性、局部变量和形参）、方法（包括类方法和对象方法）和类。</p><p>如果使用final来声明类，就是把类定义为最终类，不能被继承，或者用于修饰方法，该方法不能被子类重写。</p><ul><li>声明类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> class 类名 &#123;<span class="hljs-comment">/*类体*/</span>&#125;<br></code></pre></td></tr></table></figure><ul><li>声明方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">修饰符 <span class="hljs-keyword">final</span> 返回值类型 方法名（）&#123;方法体&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《数据结构与算法分析 Java语言描述》</title>
    <link href="/2024/02/26/%E3%80%8A%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%20Java%E8%AF%AD%E8%A8%80%E6%8F%8F%E8%BF%B0%E3%80%8B%E7%AC%94%E8%AE%B0/"/>
    <url>/2024/02/26/%E3%80%8A%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%20Java%E8%AF%AD%E8%A8%80%E6%8F%8F%E8%BF%B0%E3%80%8B%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>第3章 表、栈和队列</p><p>3.2.1 表的简单数组实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> [] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">10</span>];<br>    <span class="hljs-type">int</span> [] newArr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[arr.length*<span class="hljs-number">2</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++)<br>        newArr[i] = arr[i];<br>    arr = newArr;<br></code></pre></td></tr></table></figure><p>表Lists</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; arrayList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><span class="hljs-comment">//顺序表</span><br>List&lt;Integer&gt; linkList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br><span class="hljs-comment">//链表</span><br></code></pre></td></tr></table></figure><p>集合Sets</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">Set&lt;String&gt; hashSet = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 无序集合，基于HashMap实现</span><br><span class="hljs-comment">* 高效的查找和插入操作</span><br><span class="hljs-comment">* 不保证顺序</span><br><span class="hljs-comment">*/</span><br>Set&lt;String&gt; treeSet = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeSet</span>&lt;&gt;();<br></code></pre></td></tr></table></figure><p>3.2.2 简单链表</p><p>3.3 Java collections API 中的表</p><p>表ADT是在Collections API中实现的数据结构之一</p><p>3.3.1 Collection接口</p><p>Collections API 位于java.util包中。集合（collection）的概念在Collecion接口中得到抽象，它存储一组类型相同的对象。</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java网络编程</title>
    <link href="/2024/02/24/Java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    <url>/2024/02/24/Java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>ping</p><p>用来测试数据包能否透过IP协议到达特定主机。ping会向目标主机发出一个ICMP的请求回显数据包，并等待接收回显响应数据包。</p><p>socket</p><p>Java的客户端套接字</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span>(<span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(<span class="hljs-string">&quot;bbs.newsmth.net&quot;</span>,<span class="hljs-number">23</span>);)&#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java Stream</title>
    <link href="/2024/02/24/Java%20Stream/"/>
    <url>/2024/02/24/Java%20Stream/</url>
    
    <content type="html"><![CDATA[<p>为了解放程序员操作集合（Colletction）时的生产力，其出现归功于同时期出现的Lambda表达式，极大的提高了编程效率和程序可读性。</p><h3 id="什么是Stream？"><a href="#什么是Stream？" class="headerlink" title="什么是Stream？"></a>什么是Stream？</h3><p>Stream就像一个高级迭代器，但只能遍历一次，在流的过程中，队流中的元素执行一些操作。</p><p>想要操作流，首先需要有一个数据源，可以是数组或者集合。每次操作都会返回一个新的流对象，方便进行链式操作，但原有的流对象会保持不变。</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java常用工具类</title>
    <link href="/2024/02/22/Java%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    <url>/2024/02/22/Java%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<h3 id="Scanner"><a href="#Scanner" class="headerlink" title="Scanner"></a>Scanner</h3><p>扫描控制台输入的工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<span class="hljs-comment">//创建Scanner对象，从标准输入流中读取数据</span><br>System.out.println(<span class="hljs-string">&quot;请输入一个整数&quot;</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> scanner.nextInt();<span class="hljs-comment">//获取用户输入的整数</span><br>System.out.println(<span class="hljs-string">&quot;您输入的整数是&quot;</span>+num);<br>scanner.nextLine();<span class="hljs-comment">//读取换行符，避免下一次读取</span><br>System.out.println(<span class="hljs-string">&quot;请输入一个字符串:&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> scanner.nextLine();<span class="hljs-comment">//获取用户输入的字符串</span><br>System.out.println(<span class="hljs-string">&quot;您输入的字符串是:&quot;</span>+str);<br>scanner.close();<span class="hljs-comment">//关闭sacanner对象</span><br></code></pre></td></tr></table></figure><p>其中System.in返回的是一个字节输入流InputStream</p><p><code>nextLine()</code>方法</p><h3 id="IpUtil"><a href="#IpUtil" class="headerlink" title="IpUtil"></a>IpUtil</h3><p>获取本机IP</p><p>基本方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>quest2激活</title>
    <link href="/2024/02/22/quest2%E6%BF%80%E6%B4%BB/"/>
    <url>/2024/02/22/quest2%E6%BF%80%E6%B4%BB/</url>
    
    <content type="html"><![CDATA[<ul><li><p>pc端使用clash进行代理，需使用支持UDP的代理</p></li><li><p>打开Allow LAN模式，允许局域网连接</p></li><li><p>确保quest2和pc连接在同一网络下</p></li><li><p>记住clash代理的端口和pc的ip地址</p></li><li><p>在quest2连接网络的时候高级设置，手动配置代理，地址为pc端wlan的ip地址，端口为代理端口</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>quest2</tag>
      
      <tag>vr</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python发送邮件</title>
    <link href="/2024/02/20/Python%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/"/>
    <url>/2024/02/20/Python%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h3 id="使用yagmail库来发送邮件"><a href="#使用yagmail库来发送邮件" class="headerlink" title="使用yagmail库来发送邮件"></a>使用yagmail库来发送邮件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> yagmail<br>mail=yagmail.SMTP(<span class="hljs-string">&#x27;发送邮箱的账号&#x27;</span>,<span class="hljs-string">&#x27;发送邮箱的授权码&#x27;</span>,<span class="hljs-string">&#x27;smtp163.com&#x27;</span>)<br>mail.send(<span class="hljs-string">&#x27;接受邮件的账号&#x27;</span>，<span class="hljs-string">&quot;（标题）测试邮件&quot;</span>，<span class="hljs-string">&quot;邮件文本&quot;</span>)<br>mail.close()<br><br><span class="hljs-comment"># 多个收件人</span><br>receiver=[<span class="hljs-string">&quot;xxx@qq.com&quot;</span>,<span class="hljs-string">&quot;xxx@163.com&quot;</span>]<br><span class="hljs-comment"># 文本内容</span><br>text=<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Dear Toph,\n\n</span><br><span class="hljs-string">这是一段文本内容</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h3 id="定时发送邮件"><a href="#定时发送邮件" class="headerlink" title="定时发送邮件"></a>定时发送邮件</h3><p>使用Linux的crontab工具来定时运行python脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">* * * * * 要执行的命令<br>第一个*代表分钟(0-59)<br>第二个*代表小时(0-23)<br>第三个*代表一个月中的第几天(1-31)<br>第四个*代表月份(1-12)<br>第五个*代表一个星期中的第几天(0-7,其中0和7都代表星期日)<br><br>如果想让python每天早上8点的第0分钟运行脚本<br>0 8 * * * /usr/bin/python3 /path/script.py<br>注意/usr/bin/python是python3解释器的正确路径，可以在终端输入which python来查找python解释器的路径<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>e-mail</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Arch Linux 安装过程记录</title>
    <link href="/2024/02/12/Arch%20Linux%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/"/>
    <url>/2024/02/12/Arch%20Linux%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<p>上次是直接安装在老旧笔记本电脑上的，没有进行记录，这次在虚拟机virtual box上安装一下复习一下</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Arch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL数据库</title>
    <link href="/2024/01/30/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <url>/2024/01/30/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h3 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get install mysql-server mysql-client -y<br></code></pre></td></tr></table></figure><p>随即出现问题，执行<code>mysql -uroot -p</code>时出现如下报错</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-keyword">ERROR </span>2002 (HY000): Can&#x27;t connect to local MySQL server through socket &#x27;/var/run/mysqld/mysqld.sock&#x27; (2)<br></code></pre></td></tr></table></figure><p>可能原因</p><ul><li>没有启动MySQL服务</li></ul><p>解决方法</p><p>根据&#x2F;etc&#x2F;mysql&#x2F;mysql.conf.d&#x2F;mysqld.cnf文档的内容修改&#x2F;etc&#x2F;mysql&#x2F;my.cnf文档，具体内容如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">[mysqld]<br>datadir=/var/lib/mysql<br>basedir=/usr<br>socket=/var/run/mysqld/mysqld.sock<br>user=mysql<br><span class="hljs-meta prompt_"># </span><span class="language-bash">Disabling symbolic-links is recommended to prevent assorted security risks</span><br>symbolic-links=0<br><br>[mysqld_safe]<br>log-error=/var/log/mysqld.log<br>pid-file=/var/run/mysqld/mysqld.pid<br><br>[client]<br>port=3306<br>socket=/var/run/mysqld/mysqld.sock<br></code></pre></td></tr></table></figure><p>修改后直接<code>mysql -u root -p</code>成功运行</p><h3 id="SQL语法"><a href="#SQL语法" class="headerlink" title="SQL语法"></a>SQL语法</h3><p>SQL对大小写不敏感，SELECT和select是不同的。</p><p>某些数据库系统要求在每条SQL语句末端使用分号，这样就可以在对服务器的相同请求中执行一条以上的SQL语句。</p><h3 id="一些重要的SQL命令"><a href="#一些重要的SQL命令" class="headerlink" title="一些重要的SQL命令"></a>一些重要的SQL命令</h3><ul><li><p><strong>SELECT</strong> 从数据库中提取数据</p></li><li><p><strong>UPDATE</strong> 更新数据库中的数据</p></li><li><p><strong>DELETE</strong> 从数据库中删除数据</p></li><li><p><strong>INSERT INTO</strong> 向数据库中插入新数据</p></li><li><p><strong>CREATE DATABASE</strong> 创建新数据库</p></li><li><p><strong>ALTER DATABASE</strong> 修改数据库</p></li><li><p><strong>CREATE TABLE</strong> 创建新表</p></li><li><p><strong>ALTER TABLE</strong> 变更（改变）数据表</p></li><li><p><strong>DROP TABLE</strong> 删除表</p></li><li><p><strong>CREATE INDEX</strong> 创建索引 （搜索键）</p></li><li><p><strong>DROP INDEX</strong> 删除索引</p></li></ul><h3 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h3><ul><li><strong>数据库</strong> 关联表的集合</li><li><strong>数据表</strong> 数据的矩阵。在一个数据库中的表看起来像是一个简单的电子表格。</li><li><strong>冗余</strong> 存储两倍数据，冗余降低了性能，但提高了数据的安全性。</li><li><strong>主键</strong> 主键是唯一的，一个数据表中只能包含一个主键。</li><li><strong>外键</strong> 用于关联两个表</li><li><strong>复合键</strong> 符合键将多个列作为一个索引键，一般用于复合索引</li></ul><h3 id="数据库增删改查"><a href="#数据库增删改查" class="headerlink" title="数据库增删改查"></a>数据库增删改查</h3><h4 id="查看数据库"><a href="#查看数据库" class="headerlink" title="查看数据库"></a>查看数据库</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">写mysql语句的时候要加分号;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">&gt;  show databases<br>-&gt; show databases;<br></code></pre></td></tr></table></figure><p>报错</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#x27;show databases&#x27; at line 2<br></code></pre></td></tr></table></figure><p>问题</p><p>错误代码1064对应的是语法错误</p><p>第一行没有加分号导致被识别为两行了，重起一行写<code>show databases</code>解决</p><h4 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h4><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">creat database 数据库名<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>如：<code>creat database test;</code></p><p>提示<code>Query OK, 1 row affected (0.02 sec)</code>则说明创建成功</p><p>通常会在创建数据库的时候加上<code>if not exist</code>否则当数据库已经存在的时候会报<code>database exist</code>的错误</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create database if not exists test;<br></code></pre></td></tr></table></figure><p>这样在再次创建同名数据库的时候就会报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ERROR 1007 (HY000): Can&#x27;t create database &#x27;test&#x27;; database exists<br></code></pre></td></tr></table></figure><h4 id="切换数据库"><a href="#切换数据库" class="headerlink" title="切换数据库"></a>切换数据库</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">use 数据名;<br></code></pre></td></tr></table></figure><p>如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">use test;<br></code></pre></td></tr></table></figure><p>如果提示<code>Database changed</code>则说明切换成功了。</p><p>只有切换到相应数据库下，才能对相应数据库下面的表进行操作。</p><h4 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">drop database 数据库名;<br></code></pre></td></tr></table></figure><p>如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">drop database test;<br></code></pre></td></tr></table></figure><p>提示<code>Query OK, 0 rows affected (0.25 sec)</code>则说明成功。</p><p>还可以加上<code>if exists</code>以避免数据库不存在的时候报错。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">drop database if exists test;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">show processlist;<br>查看当前MySQL被多少个客户端连接了<br>show varables like &#x27;wait_timeout&#x27;;<br>查看Mysql定义的连接最大空闲时长，如果空闲连接超过了这个时长，连接器会自动将其断开<br></code></pre></td></tr></table></figure><h3 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h3><p>语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE table_name (<br>    column1 datatype,<br>    column2 datatype,<br>    ...<br>);<br></code></pre></td></tr></table></figure><p>下面是一个实例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE users (<br>id INT AUTO_INCREMENT PRIMARY KEY,<br>    username VARCHAR(50) NOT NULL,<br>    email VARCHAR(100) NOT NULL,<br>   birthdate DATE,<br>    is_active BOOLEAN DEFAULT TRUE<br>);<br></code></pre></td></tr></table></figure><ul><li>id 用户id，整数类型，自增长，作为主键</li><li>username 用户名，变长字符串，不允许为空</li><li>email 用户邮箱，边长字符串，不允许为空</li><li>birthdate 用户的生日，日期类型</li><li>is_active 用户是否已经激活，布尔类型，默认值为true</li></ul>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>整蛊的程序反馈</title>
    <link href="/2024/01/04/%E6%95%B4%E8%9B%8A%E7%9A%84%E7%A8%8B%E5%BA%8F%E5%8F%8D%E9%A6%88/"/>
    <url>/2024/01/04/%E6%95%B4%E8%9B%8A%E7%9A%84%E7%A8%8B%E5%BA%8F%E5%8F%8D%E9%A6%88/</url>
    
    <content type="html"><![CDATA[<ul><li><p>Something went wrong</p><p>“介不对吧介个”</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>html基础</title>
    <link href="/2024/01/03/html%E5%9F%BA%E7%A1%80/"/>
    <url>/2024/01/03/html%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h3 id="前端三剑客："><a href="#前端三剑客：" class="headerlink" title="前端三剑客："></a>前端三剑客：</h3><ul><li>HTML：负责网页的架构</li><li>CSS：负责网页的样式，美化</li><li>JavaScript：负责网页的行为</li></ul><h3 id="什么是HTML"><a href="#什么是HTML" class="headerlink" title="什么是HTML"></a>什么是HTML</h3><p>HTML是超文本标记语言（Hyper Text Markup Language），是用来描述网页的一种语言。</p><p>简单来说，HTML文件也可以直接称为网页，浏览器的作用就是读取HTML文件，并且以网页的形式去展示它们</p><h3 id="标签介绍"><a href="#标签介绍" class="headerlink" title="标签介绍"></a>标签介绍</h3><p>HTML标签是由尖括号包围起来的关键词，如<code>&lt;html&gt;&lt;/html&gt;</code>。</p><h4 id="单标签与双标签"><a href="#单标签与双标签" class="headerlink" title="单标签与双标签"></a>单标签与双标签</h4><ul><li>双标签书写规则：&lt;双标签名称&gt;内容&lt;&#x2F;双标签名称&gt;，例如<code>&lt;html&gt;</code>内容<code>&lt;/html&gt;</code>;</li><li>单标签书写规则：&lt;单标签名称&#x2F;&gt;，例如<code>&lt;br/&gt;</code>。</li></ul><h3 id="HTML属性"><a href="#HTML属性" class="headerlink" title="HTML属性"></a>HTML属性</h3><p>HTML属性是指标签属性，HTML标签可以拥有属性，给相关的HTML元素提供更多的信息。</p><ul><li>一个HTML标签可以有多个属性</li><li>属性写在HTML元素的开始标签</li><li>属性总是以名称&#x2F;键值对的形式出现，如<code>class=&quot;method&quot;</code></li></ul><h3 id="HTML标签骨架"><a href="#HTML标签骨架" class="headerlink" title="HTML标签骨架"></a>HTML标签骨架</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initialscale=1.0&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>&lt;!DOCTYPE hmtl&gt;</code>: 向浏览器声明当前的文档是html</p><p><code>&lt;html&gt;&lt;/html&gt;</code>: 是网页当中最大的标签，称为根标签</p><p><code>&lt;head&gt;&lt;/head&gt;</code>: 为网页的头部，它里面的内容主要用来定义网页标签及给浏览器看的信息</p><p><code>&lt;meta charset=&quot;UTF-8&quot;&gt;</code>: 定义网页的编码为UTF-8</p><p><code>&lt;title&gt;&lt;/title&gt;</code>：为网页标题标签，它的内容会出现在浏览器的标签页上</p><p><code>&lt;body&gt;&lt;/body&gt;</code>: 为网页主体标签，它里面的内容会显示在浏览器的白色窗口区域</p><h3 id="基本的HTML标签"><a href="#基本的HTML标签" class="headerlink" title="基本的HTML标签"></a>基本的HTML标签</h3><h4 id="HTML标题标签"><a href="#HTML标题标签" class="headerlink" title="HTML标题标签"></a>HTML标题标签</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;h1&gt;一号标题&lt;/h1&gt;<br>&lt;h2&gt;二号标题&lt;/h2&gt;<br>&lt;h3&gt;三号标题&lt;/h3&gt;<br>&lt;h4&gt;四号标题&lt;/h4&gt;<br>&lt;h5&gt;五号标题&lt;/h5&gt;<br>&lt;h6&gt;六号标题&lt;/h6&gt;<br>没有&lt;h7&gt;&lt;/h7&gt;标签<br></code></pre></td></tr></table></figure><h4 id="换行与空格"><a href="#换行与空格" class="headerlink" title="换行与空格"></a>换行与空格</h4><h5 id="nbsp表示一个空格"><a href="#nbsp表示一个空格" class="headerlink" title="&amp;nbsp表示一个空格"></a>&amp;nbsp表示一个空格</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">hello<span class="hljs-symbol">&amp;nbsp;</span>world<br></code></pre></td></tr></table></figure><h5 id="表示换行"><a href="#表示换行" class="headerlink" title="&lt;/br&gt;表示换行"></a><code>&lt;/br&gt;</code>表示换行</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">hello<br><span class="hljs-tag">&lt;/<span class="hljs-name">br</span>&gt;</span><br>world<br></code></pre></td></tr></table></figure><p>另外<code>&lt;br&gt;,&lt;br/&gt;,&lt;br &gt;</code>浏览器都能识别出来</p><h4 id="HTML段落"><a href="#HTML段落" class="headerlink" title="HTML段落"></a>HTML段落</h4><h5 id="段落标签介绍"><a href="#段落标签介绍" class="headerlink" title="段落标签介绍"></a>段落标签介绍</h5><p>通过<code>&lt;p&gt;&lt;/p&gt;</code>标签进行定义</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>今日学习内容<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>学了标题标签<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>p标签的文字显示外观和普通文字没有区别，但是它独占一行</li><li>标签语义化，便于定位</li></ul><h5 id="标签语义化"><a href="#标签语义化" class="headerlink" title="标签语义化"></a>标签语义化</h5><p>浏览器解析到<code>&lt;h1&gt;</code>的时候，会认为是网页最重要的标题而不是一个普通文本，这种就是标签语义化</p><h4 id="字体加粗，倾斜，删除效果"><a href="#字体加粗，倾斜，删除效果" class="headerlink" title="字体加粗，倾斜，删除效果"></a>字体加粗，倾斜，删除效果</h4><h5 id="字体加粗"><a href="#字体加粗" class="headerlink" title="字体加粗"></a>字体加粗</h5><ul><li><code>&lt;b&gt;&lt;/b&gt;</code> 是简单加粗标签</li><li><code>&lt;strong&gt;&lt;/strong&gt;</code> 加粗效果+特别强调效果</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">普通文字<br><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>我是加粗文字1<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>我是加粗文字2<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="倾斜"><a href="#倾斜" class="headerlink" title="倾斜"></a>倾斜</h5><ul><li><code>&lt;i&gt;&lt;/i&gt;</code> 为倾斜标签</li><li><code>&lt;em&gt;&lt;/em&gt;</code> 为倾斜效果+特别强调效果</li></ul><h5 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h5><ul><li><code>&lt;s&gt;&lt;/s&gt;</code> 删除效果</li><li><code>&lt;del&gt;&lt;/del&gt;</code> 删除效果（这两个标签没有任何语义区别）</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html">原价:<span class="hljs-tag">&lt;<span class="hljs-name">s</span>&gt;</span>998<span class="hljs-tag">&lt;/<span class="hljs-name">s</span>&gt;</span><br>现价:9.98<br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>原价:<span class="hljs-tag">&lt;<span class="hljs-name">del</span>&gt;</span>999<span class="hljs-tag">&lt;/<span class="hljs-name">del</span>&gt;</span><br>现价:9.98<br></code></pre></td></tr></table></figure><h4 id="图片标签"><a href="#图片标签" class="headerlink" title="图片标签"></a>图片标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">scr</span>=<span class="hljs-string">&quot;资源.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;图片没有正常加载时显示此内容&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;500&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;500&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;鼠标悬停在图片上的提示文字&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h4><h5 id="超链接使用"><a href="#超链接使用" class="headerlink" title="超链接使用"></a>超链接使用</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;跳转的网址&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>target=&quot;_blank&quot; 在其它窗口中打开链接<br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://homovexillues.github.io&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span>点击我可以打开红石门的网站<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="空链接"><a href="#空链接" class="headerlink" title="空链接"></a>空链接</h5><p>在href中指定为#即可</p><ul><li>暂时不知道点击之后跳转到哪里，使用空链接占位</li><li>刷新界面</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><p>有序列表和无序列表</p><h5 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>python<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Java<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>go<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>ul标签可以嵌套若干个li标签</li><li>每一个li标签可以代表每一条数据</li><li>每个li标签之间没有顺序</li><li>（这就是一个无序列表）</li></ul><h5 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>第一条<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>第二条<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>第三条<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br></code></pre></td></tr></table></figure><ol><li>有序</li><li>而且是用ol开始的</li></ol><h4 id="布局标签"><a href="#布局标签" class="headerlink" title="布局标签"></a>布局标签</h4><h5 id="布局标签的介绍"><a href="#布局标签的介绍" class="headerlink" title="布局标签的介绍"></a>布局标签的介绍</h5><p>布局标签没有任何语义，也没有所谓的应用场景，作用是划分页面区域，辅助页面布局</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    大盒子，独占一行<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>小盒子，一行可以放多个<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h4><h5 id="表格标签的介绍"><a href="#表格标签的介绍" class="headerlink" title="表格标签的介绍"></a>表格标签的介绍</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>列表1<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>列表2<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>行1，列1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>行1，列2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>行2，列1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>行2，列2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>tr: table row的缩写，表示表格的一行</li><li>td: table data的缩写，表示表格的数据单元格</li><li>th: th是table header的缩写，表示表格的表头单元格</li></ul><h5 id="表格标签的其他属性"><a href="#表格标签的其他属性" class="headerlink" title="表格标签的其他属性"></a>表格标签的其他属性</h5><ol><li>align: 表格对其的方式，如<code>left center right</code></li><li>border: 表格边框，如1</li><li>cellpadding: 单元边沿与其内容之间的空白，默认1像素</li><li>cellspacing: 单元格与单元格之间的空白，默认2像素</li><li>width: 设置表格宽度</li><li>上述内容要写在table标签里</li></ol><h5 id="表格结构标签"><a href="#表格结构标签" class="headerlink" title="表格结构标签"></a>表格结构标签</h5><ol><li>表头部分区域<code>&lt;thead&gt;</code></li><li>表格主体区域<code>&lt;tbody&gt;</code></li></ol><table>    <thead>        <tr>            <th>列表1</th>            <th>列表2</th>        </tr>    </thead>    <tbody>        <tr>            <td>数据1</td>            <td>数据2</td>        </tr>    </tbody></table><h5 id="合并单元格"><a href="#合并单元格" class="headerlink" title="合并单元格"></a>合并单元格</h5><p>跨行合并：rowspan&#x3D;”合并单元格个数”</p><p>跨列合并：colspan&#x3D;”合并单元格的个数”</p><h4 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h4><h5 id="表单标签的介绍"><a href="#表单标签的介绍" class="headerlink" title="表单标签的介绍"></a>表单标签的介绍</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;把表单数据交给指定后台程序去处理&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;传递数据时方式方法，默认为POST&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p>例:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;xx.py&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;POST&quot;</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="输入框与单选多选框"><a href="#输入框与单选多选框" class="headerlink" title="输入框与单选多选框"></a>输入框与单选多选框</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 选择信息: 选择 性别 爱好 --&gt;</span><br><span class="hljs-comment">&lt;!-- 单选按钮--&gt;</span><br><span class="hljs-comment">&lt;!-- 一组按钮: 他们俩都是来控制性别的，添加name属性--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>性别: <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>女<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 多选按钮 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>兴趣爱好: <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-comment">&lt;!-- &lt;input type=&quot;checkbox&quot;&gt;睡觉</span><br><span class="hljs-comment">&lt;input type=&quot;checkbox&quot;&gt;打游戏</span><br><span class="hljs-comment">&lt;input type=&quot;checkbox&quot;&gt;羽毛球 --&gt;</span><br><span class="hljs-comment">&lt;!-- 优化:点击文字也可以选中多选框--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sleep&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;sleep&quot;</span>&gt;</span>睡觉<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;playgame&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;playgame&quot;</span>&gt;</span>打游戏<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;yumaoqiu&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;yumaoqiu&quot;</span>&gt;</span>羽毛球<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="下拉框"><a href="#下拉框" class="headerlink" title="下拉框"></a>下拉框</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>北京<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>上海<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>广州<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">selected</span>=<span class="hljs-string">&quot;selected&quot;</span>&gt;</span>深圳<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="文本域"><a href="#文本域" class="headerlink" title="文本域"></a>文本域</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">&quot;30&quot;</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">&quot;10&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>cols：列</li><li>rows：行</li></ul><h5 id="按钮标签"><a href="#按钮标签" class="headerlink" title="按钮标签"></a>按钮标签</h5><ul><li>普通按钮</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;按钮&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>重置按钮</li></ul><p>点击会将数据恢复到默认状态</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;reset&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;重置按钮&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>提交按钮</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;我是提交&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="CSS基础选择器"><a href="#CSS基础选择器" class="headerlink" title="CSS基础选择器"></a>CSS基础选择器</h3><p>CSS（Cascading Style Sheets）层叠样式表（级联样式表、样式表），CSS也是一种标记语言</p><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><ul><li>设置HTML页面中文本内容</li><li>图片的外形</li><li>版面的布局和外观显示样式</li></ul><h4 id="CSS基础语法"><a href="#CSS基础语法" class="headerlink" title="CSS基础语法"></a>CSS基础语法</h4><p>CSS规则由两个主要部分组成：选择器以及一条或多条声明，如：选择器{属性名 1：属性值1 ；2：属性值2 }</p><p>需求:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我是红色的<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我是红色的<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我是红色的<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>我是四级标题<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>我是四级标题<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>我是四级标题<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>我是四级标题<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br></code></pre></td></tr></table></figure><p>实现:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">p</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>:red;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h4><p>就是选择标签用的</p><h5 id="基础选择器"><a href="#基础选择器" class="headerlink" title="基础选择器"></a>基础选择器</h5><ul><li>标签选择器</li><li>类选择器</li><li>id选择器</li><li>通配符选择器</li></ul><h5 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h5><p>用HTML标签名称作为选择器，按标签名称分类为页面中某一类标签指定同一的CSS样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css">语法：<br>标签名&#123;<br>    属性<span class="hljs-number">1</span>: 属性值<span class="hljs-number">1</span>;<br>    属性<span class="hljs-number">2</span>: 属性值<span class="hljs-number">2</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="问题和解答"><a href="#问题和解答" class="headerlink" title="问题和解答"></a>问题和解答</h3><ul><li><p>.js文件和.json文件有什么关系和区别？</p><p>这两者都是JavaScript相关的文件格式，都可以用于存储和传输数据；</p><p>.js是脚本文件，用于编写动态的网页和应用程序。.js文件中的代码可以在浏览器或服务器端执行，.js文件中的数据是以Javascript对象或变量的形式存储的，可以直接被Javascript读取和操作。</p><p>.json表示一个JSON数据文件，可以用于在服务器和客户端间传输，是一种轻量级的数据交换格式，基于Javascript对象表示法，但是独立于任何编程语言。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Java基础</title>
    <link href="/2024/01/01/Java%E5%9F%BA%E7%A1%80/"/>
    <url>/2024/01/01/Java%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>虽然很早就因为想要写个自己的app来接触过java了，但是因为看到java连写个hello，world都冗杂成这样导致对java一直兴趣缺缺</p><hr><h3 id="问题-回答"><a href="#问题-回答" class="headerlink" title="问题&amp;回答"></a>问题&amp;回答</h3><ul><li><p>JDK和OpenJDK有什么区别？安装哪个？安装过程？</p><ul><li><p>区别就像是google的pixel和开源的安卓系统，openjdk可以被任何公司拿过来魔改自己的版本，就像linux，但是Oracle收购了sun因此可以用java的商标，它的版本有一些私有类库，面向企业的版本又称Java EE</p></li><li><p>在Linux中运行<code>snap install openjdk</code>后无法直接使用，在终端运行<code>openjdk</code>，将输出OpenJDK的配置文件地址，如<code>/var/snap/openjdk/common/openjdk.env</code></p></li><li><p>用vim复制此文件中的内容并粘贴到<code>/etc/prifile</code>文末</p></li><li><p>用<code>source /etc/profile</code>重新加载环境变量即可</p></li></ul></li><li><p>vscode运行helloworld.java后生成了helloworld.class文件，这是个啥？</p><p>通过javac编译java源文件生成的字节码文件，在linux上是以下步骤</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">javac </span>HelloWorld.<span class="hljs-keyword">java</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">java </span>HelloWorld<br>Hello,World!<br></code></pre></td></tr></table></figure></li></ul><hr><h3 id="第一个程序"><a href="#第一个程序" class="headerlink" title="第一个程序"></a>第一个程序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorld</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Hello,World!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="问题和回答"><a href="#问题和回答" class="headerlink" title="问题和回答"></a>问题和回答</h3><ul><li><p>为什么String args[]和String[] args写法都可以但是菜鸟教程推荐第二种且可以避免歧义和误读？</p><p>如果写<code>String args[]</code>可以生成一个字符串数组，但是当写<code>String args[],args2</code>的时候，可能会被误读为定义了两个字符串数组，但是实际上定义了一个字符串数组和一个字符串，<code>String[] args,args2</code>即可生成两个字符串</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        System.out.println(args[<span class="hljs-number">0</span>]);<span class="hljs-comment">//打印输出数组的第一项内容</span><br>    &#125;<br>&#125;<br><br>java Test hello<span class="hljs-comment">//相当于将一个hello字符串传入数组，main是一个程序的入口，一个java程序运行必须有且仅有一个main方法</span><br>java Test aaa <span class="hljs-string">&quot;b  b b&quot;</span> ccc<span class="hljs-comment">//传入多个参数之间需要用空格隔开，需要包含空格的参数要用&quot;&quot;</span><br></code></pre></td></tr></table></figure><ul><li><strong>public</strong>:程序的访问权限，表示任何场合都可以被引用</li><li><strong>static</strong>:表明方法是静态的，不依赖类的对象的，是属于类的，在加载的时候main()方法也随着加载到内存中</li><li><strong>void main</strong>:方法不需要返回值</li></ul><hr><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><ul><li><strong>大小写</strong>: Hello和hello不同</li><li><strong>类名</strong>: 类名的首字母要大写，若其由若干单词组成，则每个单词的首字母要大写</li><li><strong>方法名</strong>: 方法名都应以小写字母开头，如果方法名含有若干单词，则后面的每个单词首字母大写</li><li><strong>源文件名</strong>: 源文件名必须和类名相同</li><li><strong>主方法入口</strong>: Java程序由<code>public static void main(String[] args)</code>方法开始执行</li></ul><hr><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ul><li>局部变量</li><li>类变量（静态变量）</li><li>成员变量（非静态变量）</li></ul><hr><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//单行注释</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">多行注释</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">*一个文档注释，以&quot;/**&quot;开始，&quot;*/</span><span class="hljs-string">&quot;结束.</span><br><span class="hljs-string">*这种方式书写的代码可以被JavaDoc等工具提取并生成API文档</span><br><span class="hljs-string">*</span><br><span class="hljs-string">*/</span><br></code></pre></td></tr></table></figure><hr><h3 id="支持的概念"><a href="#支持的概念" class="headerlink" title="支持的概念"></a>支持的概念</h3><ul><li><strong>多态</strong></li><li><strong>继承</strong></li><li><strong>封装</strong></li><li><strong>抽象</strong></li><li><strong>类</strong></li><li><strong>对象</strong></li><li><strong>实例</strong></li><li><strong>方法</strong></li><li><strong>重载</strong></li></ul><hr><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span>&#123;<br>    String breed;<br>    <span class="hljs-type">int</span> size;<br>    String colour;<br>    <span class="hljs-type">int</span> age;<span class="hljs-comment">//成员变量</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> classvariable;<span class="hljs-comment">//类变量</span><br>    <br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//局部变量</span><br>    &#125;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>        <br>    &#125;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">sleep</span><span class="hljs-params">()</span>&#123;<br>        <br>    &#125;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">name</span><span class="hljs-params">()</span>&#123;<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Puppy</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Puppy</span><span class="hljs-params">(String name)</span>&#123;<br>        <span class="hljs-comment">//这个构造器仅有一个参数name</span><br>        System.out.println(<span class="hljs-string">&quot;小狗的名字是：&quot;</span>+name);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-comment">//下面的语句将创建一个Puppy对象</span><br>        <span class="hljs-type">Puppy</span> <span class="hljs-variable">myPuppy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Puppy</span>(<span class="hljs-string">&quot;tommy&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="问题-解决"><a href="#问题-解决" class="headerlink" title="问题&amp;解决"></a>问题&amp;解决</h3><ul><li><p>错误: 编码 GBK 的不可映射字符 (0x80)</p><p>用<code>javac -encoding UTF-8 myfilename.java</code>命令来编译我的java文件</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Puppy</span>&#123;<br>    <span class="hljs-type">int</span> puppyAge;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Puppy</span><span class="hljs-params">(String name)</span>&#123;<br>        <span class="hljs-comment">//这个构造器仅有一个参数name</span><br>        System.out.println(<span class="hljs-string">&quot;小狗的名字是：&quot;</span>+name);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span>&#123;<br>        puppyAge=age;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;小狗的年龄是：&quot;</span>+puppyAge+<span class="hljs-string">&quot;岁&quot;</span>);<br>        <span class="hljs-keyword">return</span> puppyAge;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-comment">//创建对象</span><br>        Puppy myPuppy=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Puppy</span>(<span class="hljs-string">&quot;tommy&quot;</span>);<br>        <span class="hljs-comment">//通过方法来设定年龄</span><br>        myPuppy.setAge(<span class="hljs-number">2</span>);<br>        <span class="hljs-comment">//调用另一个方法来获取年龄</span><br>        muPuppy.getAge();<br>        <span class="hljs-comment">//也可以用这种方法来访问成员变量名</span><br>        System.out.println(<span class="hljs-string">&quot;狗子的年龄:&quot;</span>+myPuppy.puppyAge);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="源文件声明规则"><a href="#源文件声明规则" class="headerlink" title="源文件声明规则"></a>源文件声明规则</h3><ul><li>一个源文件中只能有一个public类</li><li>一个源文件可以有多个非public类</li><li>源文件名和public类的类名保持一致</li><li>如果一个类定义在某个包中，那么package语句应该在源文件的首行</li><li>如果源文件包含import语句，则应放在package和类定义之间，如果没有package语句，则import放在首行</li><li>import语句和package语句对源文件中定义的所有类都有效，在同一源文件中不能给不同的类不同的包声明<strong>（？）</strong></li></ul><h3 id="import语句"><a href="#import语句" class="headerlink" title="import语句"></a>import语句</h3><p>载入java_installation&#x2F;java&#x2F;io路径下的所有类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br></code></pre></td></tr></table></figure><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>Employee.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span> &#123;<br>    String name;<br>    <span class="hljs-type">int</span> age;<br>    String designation;<br>    <span class="hljs-type">double</span> salary;<br>    <span class="hljs-comment">//Employee类的构造器</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Employee</span><span class="hljs-params">(String name)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name=name;<br>    &#125;<br>    <span class="hljs-comment">//设置age的值</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">empAge</span><span class="hljs-params">(<span class="hljs-type">int</span> empAge)</span>&#123;<br>        age=empAge;<br>    &#125;<br>    <span class="hljs-comment">//设置designation的值</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">empDesignation</span><span class="hljs-params">(String empDesig)</span>&#123;<br>        designation=empDesig;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">empSalary</span><span class="hljs-params">(<span class="hljs-type">double</span> empSalary)</span>&#123;<br>        salary=empSalary;<br>    &#125;<br>    <span class="hljs-comment">//打印信息</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printEmployee</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;名字:&quot;</span>+name);<br>        System.out.println(<span class="hljs-string">&quot;年龄:&quot;</span>+age);<br>        System.out.println(<span class="hljs-string">&quot;职位:&quot;</span>+designation);<br>        System.out.println(<span class="hljs-string">&quot;薪水:&quot;</span>+salary);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>EmployeeTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmployeeTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-comment">//使用创造器创建两个对象</span><br>        Employee empOne=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;RUNOOB1&quot;</span>);<br>        Employee empTwo=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;RUNOOB2&quot;</span>);<br>        <span class="hljs-comment">//调用这两个对象的成员方法</span><br>        empOne.empAge(<span class="hljs-number">26</span>);<br>        empOne.empDesignation(<span class="hljs-string">&quot;高级程序员&quot;</span>);<br>        empOne.empSalary(<span class="hljs-number">1000</span>);<br>        empOne.printEmployee();<br><br>        empTwo.empAge(<span class="hljs-number">21</span>);<br>        empTwo.empDesignation(<span class="hljs-string">&quot;菜鸟程序员&quot;</span>);<br>        empTwo.empSalary(<span class="hljs-number">500</span>);<br>        empTwo.printEmployee();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Java基本数据类型"><a href="#Java基本数据类型" class="headerlink" title="Java基本数据类型"></a>Java基本数据类型</h3><p>java提供了两种数据类型</p><ul><li>内置数据类型</li><li>引用数据类型</li></ul><h4 id="内置数据类型"><a href="#内置数据类型" class="headerlink" title="内置数据类型"></a>内置数据类型</h4><p>java提供了八种基本类型。六种数字类型（四个整数型，两个浮点型），一种字符类型，一种布尔型</p><h5 id="byte："><a href="#byte：" class="headerlink" title="byte："></a>byte：</h5><ul><li>byte数据类型是8位，有符号的，以二进制补码表示的整数；</li><li>最小值是<code>-128(-2^7)</code>;</li><li>最大值是<code>127(2^7 -1);</code></li><li>默认值是<code>0</code>;</li><li>byte类型勇者大型数组中节约空间，主要代替整数，因为byte变量占用的空间只有int类型的四分之一；</li><li><code>byte a=100, byte b=-50</code></li></ul><h5 id="short"><a href="#short" class="headerlink" title="short:"></a>short:</h5><ul><li>short数据类型是16位，有符号以二进制补码表示的整数</li><li>最小值是<code>-32768（-2^15）</code></li><li>最大值是<code>327667（2^15 -1）</code></li><li>short数据类型也可以像byte那样节省空间，一个short变量是int类型所占空间的二分之一</li><li>默认值是<code>0</code></li><li><code>short s=1000, short r=-20000</code></li></ul><h5 id="int"><a href="#int" class="headerlink" title="int:"></a>int:</h5><ul><li>int数据类型是32位、有符号的以二进制补码表示的整数</li><li>最小值是<code>-2,147,483,648(-2^31)</code>;</li><li>最大值是<code>2,147,483,647(2^31 -1)</code>;</li><li>一般地整型标量默认为int类型；</li><li>默认值是<code>0</code></li><li><code>int a=100000 int b=-200000</code></li></ul><h5 id="long"><a href="#long" class="headerlink" title="long:"></a>long:</h5><ul><li>long数据类型是64位，有符号的以二进制补码表示的整数</li><li>最小值是<code>-9，223，372，036，854，775，808（-2^63）</code>；</li><li>最大值是<code>9,223,372,036,854,775,807(2^63 -1)</code>;</li><li>这种类型主要用在比较大整数的系统上</li><li>默认值是<code>0L</code>;</li><li><code>long a=100000L long b=-200000L</code></li><li>L不分大小写，最好写成大写</li></ul><h5 id="float"><a href="#float" class="headerlink" title="float:"></a>float:</h5><ul><li>float数据类型是单精度32位符合IEEE 754标准的浮点数</li><li>float在储存大型浮点数的时候可以节省内存空间</li><li>默认值是<code>0.0f</code></li><li>浮点数不能用来表示精确的值，如货币</li><li>float f1&#x3D;234.5f</li></ul><h5 id="double"><a href="#double" class="headerlink" title="double:"></a>double:</h5><ul><li><p>double数据类型是双精度64位符合IEEE 754标准的浮点数</p></li><li><p>浮点数默认类型为double类型</p></li><li><p>double类型同样不能表示精确的值，如货币</p></li><li><p>默认值是<code>0.0d</code></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs abnf">double d1<span class="hljs-operator">=</span><span class="hljs-number">7</span>D<span class="hljs-comment">;</span><br>double d2<span class="hljs-operator">=</span><span class="hljs-number">7</span>.<span class="hljs-comment">;</span><br>double d3<span class="hljs-operator">=</span><span class="hljs-number">8.0</span><span class="hljs-comment">;</span><br>double d4<span class="hljs-operator">=</span><span class="hljs-number">8</span>.D<span class="hljs-comment">;</span><br>double d5<span class="hljs-operator">=</span><span class="hljs-number">12.9867</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure></li></ul><h5 id="boolean："><a href="#boolean：" class="headerlink" title="boolean："></a>boolean：</h5><ul><li>boolean数据类型表示一位的信息</li><li>只有两个值：true和false</li><li>这种类型只作为一种标志来记录true&#x2F;false情况</li><li>默认值是<code>false</code></li><li><code>boolean one=true</code></li></ul><h5 id="char"><a href="#char" class="headerlink" title="char:"></a>char:</h5><ul><li>char类型是一个单一的16位Unicode字符</li><li>最小值是<code>\u0000</code>(十进制等效值为0)</li><li>最大值是<code>\uffff</code>(即为65535)</li><li>char数据类型可以存储任何字符</li><li><code>char letter=&#39;A&#39;</code></li></ul><h5 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PrimitiveTypeTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-comment">//byte</span><br>        System.out.println(<span class="hljs-string">&quot;基本类型: byte 二进制位数：&quot;</span>+ Byte.SIZE);<br>        System.out.println(<span class="hljs-string">&quot;包装值: java.lang.Byte&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;最小值: Byte.MIN_VALUE=&quot;</span>+ Byte.MIN_VALUE);<br>        System.out.println(<span class="hljs-string">&quot;最大值: Byte.MAX_VALUE=&quot;</span>+Byte.MAX_VALUE);<br>        System.out.println();<br><br>        <span class="hljs-comment">//short</span><br>        System.out.println(<span class="hljs-string">&quot;基本类型: short 二进制位数: &quot;</span>+Short.SIZE);<br>        System.out.println(<span class="hljs-string">&quot;包装值: java.lang.Short&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;最小值: Short.MIN_VALUE=&quot;</span>+ Short.MIN_VALUE );<br>        System.out.println(<span class="hljs-string">&quot;最大值: Short.MAZ_VALUE=&quot;</span>+ Short.MAX_VALUE);<br>        System.out.println();<br><br>        <span class="hljs-comment">//int</span><br>        System.out.println(<span class="hljs-string">&quot;基本类型: int 二进制位数: &quot;</span>+ Integer.SIZE);<br>        System.out.println(<span class="hljs-string">&quot;包装值: java.lang.Integer&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;最小值: Integer.MIN_VALUE=&quot;</span>+ Long.MIN_VALUE);<br>        System.out.println(<span class="hljs-string">&quot;最大值: Integer.MAX_VALUE=&quot;</span>+ Long.MAX_VALUE);<br>        System.out.println();<br><br>        <span class="hljs-comment">//long</span><br>        System.out.println(<span class="hljs-string">&quot;基本类型: long 二进制位数&quot;</span>+ Long.SIZE);<br>        System.out.println(<span class="hljs-string">&quot;包装值: java.lang.long&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;最小值: Long.MIN_VALUE=&quot;</span>+ Long.MIN_VALUE);<br>        System.out.println(<span class="hljs-string">&quot;最大值: Long.MAX_VALUE=&quot;</span>+ Long.MAX_VALUE);<br>        System.out.println();<br><br>        <span class="hljs-comment">//float</span><br>        System.out.println(<span class="hljs-string">&quot;基本类型: float 二进制位数&quot;</span>+ Float.SIZE);<br>        System.out.println(<span class="hljs-string">&quot;包装值: java.lang.Float&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;最小值: Float.MIN_VALUE=&quot;</span>+Float.MIN_VALUE);<br>        System.out.println(<span class="hljs-string">&quot;最大值: FLoat.MAX_VALUE=&quot;</span>+Float.MAX_VALUE);<br>        System.out.println();<br><br>        <span class="hljs-comment">//double</span><br>        System.out.println(<span class="hljs-string">&quot;基本类型: double 二进制位数&quot;</span>+Double.SIZE);<br>        System.out.println(<span class="hljs-string">&quot;包装值: java.lang.Double&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;最小值: Double.MIN_VALUE=&quot;</span>+ Double.MIN_VALUE);<br>        System.out.println(<span class="hljs-string">&quot;最大值: Double.MAX_VALUE=&quot;</span>+Double.MAX_VALUE);<br>        System.out.println();<br><br>        <span class="hljs-comment">//char</span><br>        System.out.println(<span class="hljs-string">&quot;基本类型: char 二进制位数&quot;</span>+Character.SIZE);<br>        System.out.println(<span class="hljs-string">&quot;包装值: java.lang.Character&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;最小值: Character.MIN_VALUE=&quot;</span>+(<span class="hljs-type">int</span>)Character.MIN_VALUE);<span class="hljs-comment">//以数值形式而不是字符形式将Character.MIN_VALUE输出到控制台</span><br>        System.out.println(<span class="hljs-string">&quot;最大值: Character.MAX_VALUE=&quot;</span>+(<span class="hljs-type">int</span>)Character.MAX_VALUE);<br>        System.out.println();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h4><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><h5 id="数学运算符"><a href="#数学运算符" class="headerlink" title="数学运算符"></a>数学运算符</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Math</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">int</span> a=<span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> b=<span class="hljs-number">20</span>;<br>        <span class="hljs-type">int</span> c=<span class="hljs-number">25</span>;<br>        <span class="hljs-type">int</span> d=<span class="hljs-number">25</span>;<br>        System.out.println(<span class="hljs-string">&quot;a+b=&quot;</span>+(a+b));<br>        System.out.println(<span class="hljs-string">&quot;a-b=&quot;</span>+(a-b));<br>        System.out.println(<span class="hljs-string">&quot;a*b=&quot;</span>+(a*b));<br>        System.out.println(<span class="hljs-string">&quot;b/a=&quot;</span>+(b/a));<br>        System.out.println(<span class="hljs-string">&quot;b%a=&quot;</span>+(b%a));<br>        System.out.println(<span class="hljs-string">&quot;a++ =&quot;</span>+(a++));<br>        System.out.println(<span class="hljs-string">&quot;a-- =&quot;</span>+(a--));<br>        System.out.println(<span class="hljs-string">&quot;++a=&quot;</span>+(++a));<br>        <span class="hljs-comment">//++a是先进行自增或自减运算，再进行表达式运算</span><br>        <span class="hljs-comment">//a++是先进行表达式运算，再进行自增或自减运算</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><ul><li>while循环</li><li>do…while循环</li><li>for循环</li></ul><h4 id="while"><a href="#while" class="headerlink" title="while"></a>while</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">while</span>(布尔表达式)&#123;<br>    <span class="hljs-comment">//循环内容</span><br>&#125;<br></code></pre></td></tr></table></figure><p>Test.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">int</span> x=<span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">while</span>(x&lt;<span class="hljs-number">20</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;value of x: &quot;</span>+x);<br>            x++;<br>            System.out.println(<span class="hljs-string">&quot;\n&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="do…while"><a href="#do…while" class="headerlink" title="do…while"></a>do…while</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">do</span>&#123;<br>    <span class="hljs-comment">//代码语句</span><br>&#125;<span class="hljs-keyword">while</span>(布尔表达式);<br></code></pre></td></tr></table></figure><p>布尔表达式在循环体的后面，所以语句块在检测布尔表达式之前已经执行了。如果布尔表达式的值为true，则语句块一直执行，直到表达式的值为false</p><p>Test.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">int</span> x=<span class="hljs-number">10</span>;<br>        <br>        <span class="hljs-keyword">do</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;value of x: &quot;</span>+x);<br>            x++;<br>            System.out.pritn(<span class="hljs-string">&quot;\n&quot;</span>);<br>        &#125;<span class="hljs-keyword">while</span>(x&lt;<span class="hljs-number">20</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="for"><a href="#for" class="headerlink" title="for"></a>for</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(初始化;布尔表达式;更新)&#123;<br>    <span class="hljs-comment">//代码语句</span><br>&#125;<br></code></pre></td></tr></table></figure><p>Test.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> x=<span class="hljs-number">10</span>;x&lt;<span class="hljs-number">20</span>;x=x+<span class="hljs-number">1</span>)&#123;<br>            System.out.print(<span class="hljs-string">&quot;value of x:&quot;</span>+x);<br>            System.out.print(<span class="hljs-string">&quot;\n&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="增强for循环"><a href="#增强for循环" class="headerlink" title="增强for循环"></a>增强for循环</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(声明语句 : 表达式)&#123;<br>    <span class="hljs-comment">//代码句子</span><br>&#125;<br></code></pre></td></tr></table></figure><p>Test.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">int</span> [] numbers=&#123;<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>,<span class="hljs-number">40</span>,<span class="hljs-number">50</span>&#125;;<br>        <br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> x : numbers )&#123;<br>            System.out.print(x);<br>            System.out.print(<span class="hljs-string">&quot;,&quot;</span>);<br>        &#125;<br>        System.out.print(<span class="hljs-string">&quot;\n&quot;</span>);<br>        String [] names = &#123;<span class="hljs-string">&quot;James&quot;</span>,<span class="hljs-string">&quot;Larry&quot;</span>,<span class="hljs-string">&quot;Tom&quot;</span>,<span class="hljs-string">&quot;Lacy&quot;</span>&#125;;<br>        <span class="hljs-keyword">for</span>(String name : names)&#123;<br>            System.out.print(name);<br>            System.out.print(<span class="hljs-string">&quot;,&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="break关键字"><a href="#break关键字" class="headerlink" title="break关键字"></a>break关键字</h4><p>Test.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">int</span> [] numbers=&#123;<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>,<span class="hljs-number">40</span>,<span class="hljs-number">50</span>&#125;;<br>        <br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> x : numbers)&#123;<br>            <span class="hljs-keyword">if</span>(x==<span class="hljs-number">30</span>)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            System.out.print(x);<br>            System.out.print(<span class="hljs-string">&quot;\n&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">10</span><br><span class="hljs-number">20</span><br></code></pre></td></tr></table></figure><h4 id="continue关键字"><a href="#continue关键字" class="headerlink" title="continue关键字"></a>continue关键字</h4><p>Test.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">int</span> [] numbers==&#123;<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>,<span class="hljs-number">40</span>,<span class="hljs-number">50</span>&#125;;<br>        <br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> x : nubmers)&#123;<br>            <span class="hljs-keyword">if</span>(x==<span class="hljs-number">30</span>)&#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            System.out.print(x);<br>            System.out.print(<span class="hljs-string">&quot;\n&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs">10<br>20<br>40<br>50<br></code></pre></td></tr></table></figure><h3 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h3><h4 id="if…else"><a href="#if…else" class="headerlink" title="if…else"></a>if…else</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(布尔表达式)&#123;<br>    <span class="hljs-comment">//如果布尔表达式为true将执行的语句</span><br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-comment">//如果布尔表达式为false</span><br>&#125;<br></code></pre></td></tr></table></figure><p>Test.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">int</span> x=<span class="hljs-number">30</span>;<br>        <br>        <span class="hljs-keyword">if</span>(x==<span class="hljs-number">10</span>)&#123;<br>            System.out.print(<span class="hljs-string">&quot;Value of X is 10&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(x==<span class="hljs-number">20</span>)&#123;<br>            System.out.print(<span class="hljs-string">&quot;Value of X is 20&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(x==<span class="hljs-number">30</span>)&#123;<br>            System.out.print(<span class="hljs-string">&quot;Value of x is 30&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.print(<span class="hljs-string">&quot;这是else语句&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="嵌套的if…else语句"><a href="#嵌套的if…else语句" class="headerlink" title="嵌套的if…else语句"></a>嵌套的if…else语句</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(布尔表达式<span class="hljs-number">1</span>)&#123;<br>    <span class="hljs-keyword">if</span>(布尔表达式<span class="hljs-number">2</span>)&#123;<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Test.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">int</span> x=<span class="hljs-number">30</span>;<br>        <span class="hljs-type">int</span> y=<span class="hljs-number">10</span>;<br>        <br>        <span class="hljs-keyword">if</span>(x==<span class="hljs-number">30</span>)&#123;<br>            <span class="hljs-keyword">if</span>(x==<span class="hljs-number">10</span>)&#123;<br>                System.out.print(<span class="hljs-string">&quot;X=30 and Y=10&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="switch-case语句"><a href="#switch-case语句" class="headerlink" title="switch case语句"></a>switch case语句</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">switch</span>(expression)&#123;<br>    <span class="hljs-keyword">case</span> value:<br>      <span class="hljs-comment">//语句</span><br>       <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> value:<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span> :    <br>&#125;<br></code></pre></td></tr></table></figure><p>Test.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">char</span> <span class="hljs-variable">grade</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;C&#x27;</span>;<br>        <br>        <span class="hljs-keyword">switch</span>(grade)&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;A&#x27;</span>:<br>                System.out.println(<span class="hljs-string">&quot;优秀&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;B&#x27;</span>:<br>                System.out.println(<span class="hljs-string">&quot;良好&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;C&#x27;</span>:<br>                System.out.println(<span class="hljs-string">&quot;及格&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;D&#x27;</span>:<br>                System.out.println(<span class="hljs-string">&quot;不及格&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span> :<br>                System.out.println(<span class="hljs-string">&quot;未知等级&quot;</span>);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;你的等级是&quot;</span>+grade);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mathematica">及格<br>你的等级是<span class="hljs-built_in">C</span><br></code></pre></td></tr></table></figure><p>如果case语句块中没有break语句，匹配成功后会将匹配到的case项后面的所有项都输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">switch</span>(i)&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>                System.out.println(<span class="hljs-string">&quot;0&quot;</span>);<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                System.out.println(<span class="hljs-string">&quot;1&quot;</span>);<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                System.out.println(<span class="hljs-string">&quot;2&quot;</span>);<br>            <span class="hljs-keyword">default</span>:<br>                System.out.println(<span class="hljs-string">&quot;default&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">1<br>2<br>3<br></code></pre></td></tr></table></figure><h3 id="Number-Math类"><a href="#Number-Math类" class="headerlink" title="Number &amp; Math类"></a>Number &amp; Math类</h3><p><img src="https://www.runoob.com/wp-content/uploads/2013/12/OOP_WrapperClass.png" alt="Java Number类 (图片来自菜鸟教程)"></p><h4 id="Math类"><a href="#Math类" class="headerlink" title="Math类"></a>Math类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;90°的正弦值: &quot;</span>+Math.sin(Math.PI/<span class="hljs-number">2</span>));<br>        System.out.println(<span class="hljs-string">&quot;0°的余弦值: &quot;</span>+Math.cos(<span class="hljs-number">0</span>));<br>        System.out.println(<span class="hljs-string">&quot;60°的正切值: &quot;</span>+Math.tan(Math.PI/<span class="hljs-number">3</span>));<br>        System.out.println(<span class="hljs-string">&quot;1的反正切值: &quot;</span>+Math.atan(<span class="hljs-number">1</span>));<br>        System.out.println(<span class="hljs-string">&quot;Π/2的角度值: &quot;</span>+Math.toDegrees(Math.PI/<span class="hljs-number">2</span>));<br>        System.out.println(Math.PI);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Number-Math类方法"><a href="#Number-Math类方法" class="headerlink" title="Number &amp; Math类方法"></a>Number &amp; Math类方法</h4><h5 id="equals"><a href="#equals" class="headerlink" title="equals()"></a>equals()</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        Integer x=<span class="hljs-number">5</span>;<br>        Integer y=<span class="hljs-number">10</span>;<br>        Integer z=<span class="hljs-number">5</span>;<br>        Short a=<span class="hljs-number">5</span>;<br>        <br>        System.out.println(x.equals(y));<br>        System.out.println(x.equals(z));<br>System.out.println(x.equals(a));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-literal">false</span><br><span class="hljs-literal">true</span><br><span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><h5 id="问题和回答-1"><a href="#问题和回答-1" class="headerlink" title="问题和回答"></a>问题和回答</h5><ul><li><p>在写程序的时候，如果写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> a=<span class="hljs-number">1</span>,b=<span class="hljs-number">2</span>;<br>...<br>    System.out.println(a.equals(b));<br>...<br></code></pre></td></tr></table></figure><p>会报错<code>“Cannot invoke equals(int) on the primitive type int”</code>，意思是不能在基本类型int上调用<code>equals(int)</code>方法。</p><p>在Java中，基本类型如<code>int,double,char</code>等，不是对象，因此它们没有方法可以调用，<code>equals()</code>方法是一个对象方法，通常用于比较两个对象是否相等，如果非要比较两个基本类型并返回布尔值，可以用<code>a==b</code></p><p>但是这里如果这么写就没问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">Integer x=<span class="hljs-number">5</span>;<br>Integer y=<span class="hljs-number">10</span>;<br>Integer z=<span class="hljs-number">5</span>;<br>Short a=<span class="hljs-number">5</span>;<br>...<br>    System.out.println(x.equals(y));<br>System.out.println(x.equals(z));<br>System.out.println(x.equals(a));<br></code></pre></td></tr></table></figure><p>这里使用的就是<code>Integer和Short</code>对象，<code>Integer</code>和<code>Short</code>都是包装类，分别对应<code>int</code>和<code>short</code>基本类型</p><p>当调用<code>x.equals(y)</code>的时候，实际上是在调用<code>Integer</code>对象的<code>equals()</code>方法</p><h4 id="abs"><a href="#abs" class="headerlink" title="abs()"></a>abs()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        Integer a=-<span class="hljs-number">8</span>;<br>        <span class="hljs-type">double</span> d=-<span class="hljs-number">100</span>;<br>        <span class="hljs-type">float</span> f=-<span class="hljs-number">90f</span>;<br>        <br>        System.out.println(Math.abs(a));<br>        System.out.println(Math.abs(d));<br>        System.out.println(Math.abs(f));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">8</span><br><span class="hljs-attribute">100</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">90</span>.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h4 id="min"><a href="#min" class="headerlink" title="min()"></a>min()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        System.out.println(Math.min(<span class="hljs-number">12.123</span>,<span class="hljs-number">12.456</span>));<br>        System.out.println<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="日期和时间"><a href="#日期和时间" class="headerlink" title="日期和时间"></a>日期和时间</h3><h4 id="获取当前日期时间"><a href="#获取当前日期时间" class="headerlink" title="获取当前日期时间"></a>获取当前日期时间</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DateDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        Date date=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br><br>        System.out.println(date.toString());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="格式化输出当前日期"><a href="#格式化输出当前日期" class="headerlink" title="格式化输出当前日期"></a>格式化输出当前日期</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.text.*;<br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DateDemo2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">Date</span> <span class="hljs-variable">dNow</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>        SimpleDateFormat ft=<span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;当前时间为: &quot;</span>+ft.format(dNow));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>或者使用printf格式化输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DateFormateExample</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        Date date=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>        System.out.printf(<span class="hljs-string">&quot;%tY-%tm-%td %tH:%tM:%tS %tZ&quot;</span>,date,date,date,date,date,date,date)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><table>    <thead>        <tr>            <th>转换符</th>            <th>说明</th>        </tr>    </thead>    <tbody>        <tr>            <td>%tc</td>            <td>包括全部日期和时间</td>        </tr>        <tr>            <td>%tF</td>            <td>年-月-日格式</td>        </tr>        <tr>            <td>%tD</td>            <td>年/月/日</td>        </tr>        <tr>            <td>%tr</td>            <td>12小时制 02:25:51 下午</td>        </tr>        <tr>            <td>%tT</td>            <td>24小时制 14:25:51</td>        </tr>        <tr>            <td>%tR</td>            <td>24小时制 14:25</td>        </tr>        <tr>            <td>%tY</td>            <td>四位数的年份</td>        </tr>        <tr>            <td>%tm</td>            <td>月份数字</td>        </tr>        <tr>            <td>%tB</td>            <td>月份全称（会用汉字）</td>        </tr>    </tr><tr>    <td>%te</td>    <td>一位数的日期24或2</td></tr></tr><tr>    <td>%td</td>    <td>两位数的日期24或02</td></tr><tr>    <td>%tA</td>    <td>星期的全名</td></tr></tr><tr>    <td>%tp</td>    <td>上午或者下午</td></tr><tr>    <td>%tH</td>    <td>24小时时制</td></tr></tr><tr>    <td>%tI</td>    <td>12小时时制但是12或06</td></tr><tr>    <td>%tl</td>    <td>12小时时制但是12或6</td></tr><tr>    <td>%tM</td>    <td>分钟数</td></tr><tr>    <td>%tS</td>    <td>秒数</td></tr></tr><tr>    <td>%tZ</td>    <td>时区</td></tr></tbody></table><h4 id="Sleep"><a href="#Sleep" class="headerlink" title="Sleep"></a>Sleep</h4><p>sleep()使当前吸纳从进入停滞状态（阻塞当前线程），让出CPU的使用，目的是不让当前线程独自霸占该进程所获的CPU资源，以留一定时间给其他线程执行的机会</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SleepDemo</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-comment">//System.out.println(new Date()+&quot;\n&quot;);</span><br>            System.out.printf(<span class="hljs-string">&quot;%tF %tT\n&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(),<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>            Thread.sleep(<span class="hljs-number">1000</span>*<span class="hljs-number">3</span>);<span class="hljs-comment">//休眠3秒</span><br>            System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()+<span class="hljs-string">&quot;\n&quot;</span>);<br>        &#125;<span class="hljs-keyword">catch</span>(Exception e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;介不对吧介个&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="测量时间间隔"><a href="#测量时间间隔" class="headerlink" title="测量时间间隔"></a>测量时间间隔</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DiffDemo</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-type">long</span> start=System.currentTimeMillis();<br>            System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()+<span class="hljs-string">&quot;\n&quot;</span>);<br>            Thread.sleep(<span class="hljs-number">5</span>*<span class="hljs-number">60</span>*<span class="hljs-number">10</span>);<br>            System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()+<span class="hljs-string">&quot;\n&quot;</span>);<br>            <span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>            <span class="hljs-type">long</span> <span class="hljs-variable">diff</span> <span class="hljs-operator">=</span>end-start;<br>            Long diffvalue=Long.valueOf(diff);<br>            <span class="hljs-type">double</span> diff2=diffvalue.doubleValue()/<span class="hljs-number">1000</span>;<br>            System.out.println(<span class="hljs-string">&quot;Difference is &quot;</span>+String.format(<span class="hljs-string">&quot;%.3f&quot;</span>,diff2)+<span class="hljs-string">&quot;s&quot;</span>);<br>        &#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br>            System.out.println(<span class="hljs-string">&quot;介不对啊介个&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="问题-解答"><a href="#问题-解答" class="headerlink" title="问题&amp;解答"></a>问题&amp;解答</h5><ul><li>为什么这里必须用Long对象转换为double数据的方式来解决精度问题？</li></ul><hr><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>例：<code>System.out.println()</code></p><ul><li>println()是一个方法</li><li>System是系统类</li><li>out是标准输出对象</li><li><code>System.out.println()</code>即调用系统类System中的标准输出对象out中的方法println()</li></ul><hr><h4 id="问题-解答-1"><a href="#问题-解答-1" class="headerlink" title="问题&amp;解答"></a>问题&amp;解答</h4><ul><li>Java的方法和C的函数有什么异同？<ul><li>Java的方法都是属于类或对象的，而C的函数是独立于类或对象的。因此Java方法必须通过类名或对象名来调用，而C的函数可以直接调用</li><li>Java的方法分为静态方法和实例方法，而C的函数只有一种</li><li>Java的方法有四种访问权限，分别是public、protected、private和默认；而C只有两种，分别是extern和static</li></ul></li></ul><h5 id="方法的定义"><a href="#方法的定义" class="headerlink" title="方法的定义"></a>方法的定义</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">修饰符 返回值类型 方法名(参数类型 参数名)&#123;<br>    方法体<br>    <span class="hljs-keyword">return</span> 返回值;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://www.runoob.com/wp-content/uploads/2013/12/D53C92B3-9643-4871-8A72-33D491299653.jpg" alt="(图像来自菜鸟教程)"></p><hr><h4 id="方法的调用"><a href="#方法的调用" class="headerlink" title="方法的调用"></a>方法的调用</h4><p>Java支持两种调用方法的方式，根据方法是否返回值来选择</p><p>当程序调用一个方法时，程序的控制权交给了被调用的方法。当被调用方法的放回语句执行或者到达方法体闭括号时侯交还控制权给程序。</p><ul><li><p>当方法返回一个值的时候，方法调用通常被当做一个值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">larger</span> <span class="hljs-operator">=</span> max(<span class="hljs-number">30</span>,<span class="hljs-number">40</span>);<br></code></pre></td></tr></table></figure></li><li><p>如果方法返回值是void，方法调用一定是一条语句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;hello&quot;</span>);<br></code></pre></td></tr></table></figure></li></ul><p>例TestMax.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestMax</span> &#123;<br>    <span class="hljs-comment">/** 主方法 */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> max(i,j);<br>        System.out.println(i+<span class="hljs-string">&quot;和&quot;</span>+j+<span class="hljs-string">&quot;比较大的是: &quot;</span>+k);<br>    &#125;<br><br>    <span class="hljs-comment">/** 返回两个整数变量较大的值 */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">max</span><span class="hljs-params">(<span class="hljs-type">int</span> num1,<span class="hljs-type">int</span> num2)</span>&#123;<br>        <span class="hljs-type">int</span> result;<br>        <span class="hljs-keyword">if</span>(num1 &gt; num2)&#123;<br>            result = num1;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            result = num2;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如何调用一个void方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestVoidMethod</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printGrade</span><span class="hljs-params">(<span class="hljs-type">double</span> score)</span>&#123;<br>        <span class="hljs-keyword">if</span>(score &gt;= <span class="hljs-number">90.0</span>)&#123;<br>            System.out.println(<span class="hljs-string">&#x27;A&#x27;</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (score&gt;=<span class="hljs-number">80.0</span>)&#123;<br>            System.out.println(<span class="hljs-string">&#x27;B&#x27;</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (score&gt;=<span class="hljs-number">70.0</span>)&#123;<br>            System.out.println(<span class="hljs-string">&#x27;C&#x27;</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (score&gt;=<span class="hljs-number">60.0</span>)&#123;<br>            System.out.println(<span class="hljs-string">&#x27;D&#x27;</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&#x27;F&#x27;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>调用void方法的一定是一个语句</p><hr><h4 id="方法的重载"><a href="#方法的重载" class="headerlink" title="方法的重载"></a>方法的重载</h4><p>一个有意思的机制，比如我写了一个<code>public static int max(int num1,int num2)</code>的方法，然后又写了一个同名的<code>public static double max(double num1,double num2)</code>的方法，一般来说这在C里面是不成的，但是Java的重载功能可以让程序运行的时候，根据传递的参数的数据型来调用方法，Java的编译器会根据方法签名来判断哪个方法应该被调用</p><ul><li>重载的方法必须拥有不同的参数列表，不能仅仅依据修饰符或者返回类型的不同来重载方法</li></ul><h3 id="流-Stream-、文件-FIle-和IO"><a href="#流-Stream-、文件-FIle-和IO" class="headerlink" title="流(Stream)、文件(FIle)和IO"></a>流(Stream)、文件(FIle)和IO</h3><h4 id="读取控制台"><a href="#读取控制台" class="headerlink" title="读取控制台"></a>读取控制台</h4><h5 id="读取控制台输入"><a href="#读取控制台输入" class="headerlink" title="读取控制台输入"></a>读取控制台输入</h5><p>由<code>System.in</code>完成，可以把<code>System.in</code>包装在BufferedReader对象中来创建一个字符流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BRRead</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">( String[] args)</span> <span class="hljs-keyword">throws</span> IOException&#123;<br>        <span class="hljs-type">char</span> c;<br>        <span class="hljs-comment">// 使用System.in 创建 BufferedReader</span><br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(System.in));<br>        System.out.println(<span class="hljs-string">&quot;输入字符，按下&#x27;q&#x27;键退出。&quot;</span>);<br>        <span class="hljs-comment">// 读取字符</span><br>        <span class="hljs-keyword">do</span>&#123;<br>            c = (<span class="hljs-type">char</span>) br.read();<br>            System.out.println(c);<br>        &#125; <span class="hljs-keyword">while</span> (c!=<span class="hljs-string">&#x27;q&#x27;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="从控制台读取字符串"><a href="#从控制台读取字符串" class="headerlink" title="从控制台读取字符串"></a>从控制台读取字符串</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ScannerDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scan</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-comment">//从键盘接收数据</span><br><br>        <span class="hljs-comment">// next方法接收字符串</span><br>        System.out.println(<span class="hljs-string">&quot;next方式接收:&quot;</span>);<br>        <span class="hljs-comment">// 判断是否还有输入</span><br>        <span class="hljs-keyword">if</span> (scan.hasNext())&#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">str1</span> <span class="hljs-operator">=</span> scan.next();<br>            System.out.println(<span class="hljs-string">&quot;输入的数据为: &quot;</span>+str1);<br>        &#125;<br>        scan.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>梗整理</title>
    <link href="/2023/12/17/%E6%A2%97/"/>
    <url>/2023/12/17/%E6%A2%97/</url>
    
    <content type="html"><![CDATA[<h3 id="猿迟我悔"><a href="#猿迟我悔" class="headerlink" title="猿迟我悔"></a>猿迟我悔</h3><blockquote><p>团藏：“日斩你会后悔的！”</p><p>猿飞：“够了，团藏，我才是火影！”</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>查找</title>
    <link href="/2023/12/13/%E6%9F%A5%E6%89%BE/"/>
    <url>/2023/12/13/%E6%9F%A5%E6%89%BE/</url>
    
    <content type="html"><![CDATA[<h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><p>在数据集合中寻找满足某种条件的数据元素的过程</p><h4 id="查找表（查找结构）"><a href="#查找表（查找结构）" class="headerlink" title="查找表（查找结构）"></a>查找表（查找结构）</h4><p>用于查找的数据集合称为查找表，由同一类型的数据元素（或记录）组成</p><p>可以是线性结构，树形结构或图状结构</p><h4 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h4><p>数据元素中<strong>唯一</strong>标识该元素的某个数据项的值，使用基于关键字的查找，查找结果应该是唯一的</p><p>如每个人的学号</p><h5 id="静态查找表"><a href="#静态查找表" class="headerlink" title="静态查找表"></a>静态查找表</h5><p>仅关注查找速度</p><h5 id="动态查找表"><a href="#动态查找表" class="headerlink" title="动态查找表"></a>动态查找表</h5><p>除了查找速度，也要关注插&#x2F;删操作是否方便实现</p><h4 id="ASL"><a href="#ASL" class="headerlink" title="ASL"></a>ASL</h4><p>平均查找长度——所有查找过程中进行关键字的比较次数的平均值<br>$$<br>ASL&#x3D;\sum_{i&#x3D;1}^{n}P_iC_i<br>$$</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Intel/AMD命名规则</title>
    <link href="/2023/12/08/Intel%E5%91%BD%E5%90%8D%E8%A7%84%E5%88%99/"/>
    <url>/2023/12/08/Intel%E5%91%BD%E5%90%8D%E8%A7%84%E5%88%99/</url>
    
    <content type="html"><![CDATA[<p>&#x3D;&#x3D;$intel$&#x3D;&#x3D;酷睿&#x3D;&#x3D;$i5$&#x3D;&#x3D;-<strong>$12$</strong>&#x3D;&#x3D;$600$&#x3D;&#x3D;<strong>$K$</strong>&#x3D;&#x3D;$F$&#x3D;&#x3D;</p><ul><li><p><strong>Intel</strong> 是一款知名牙膏品牌</p></li><li><p><strong>酷睿</strong> 英特尔的CPU系列</p><table><thead><tr><th>Core</th><th>酷睿</th></tr></thead><tbody><tr><td><strong>Pentium</strong></td><td><strong>奔腾</strong></td></tr><tr><td><strong>Celeron</strong></td><td><strong>赛扬</strong></td></tr><tr><td><strong>Xeon</strong></td><td><strong>至强</strong></td></tr><tr><td><strong>Atom</strong></td><td><strong>凌动</strong></td></tr></tbody></table></li><li><p><strong>i5</strong> 中端定位，i3，i5，i7，i9，数字越大越强</p></li><li><p><strong>12</strong> 代数，数字越大越新</p></li><li><p><strong>600</strong> 性能，数字越大，频率越高</p></li><li><p><strong>B</strong> BGA封装的CPU，专为紧凑型设备开发</p><ul><li><strong>BGA</strong> 是一种CPU封装技术，</li></ul></li><li><p><strong>X</strong> 带X的表示支持XFR技术，自适应动态扩频，频率的最大值受到散热器散热效果而变化，<strong>散热器越强</strong>，<strong>频率越高</strong>。</p></li><li><p><strong>XT</strong> 相当于X的加强版</p></li></ul><p>$R5-5600G$</p><ul><li><strong>G</strong> 表示属于<strong>APU</strong>，内置强大的核显，如R5 5600G</li><li><strong>U</strong> 低电压，性能弱但功耗低，常见轻薄本</li><li><strong>H</strong> 低压，性能强，常见游戏本</li><li><strong>HX</strong> 一般使用在AMD高端发烧级CPU上，至尊版</li><li><strong>HS</strong> 相较于H工号更低，性能较强</li></ul>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>谜语</title>
    <link href="/2023/12/06/%E8%B0%9C%E8%AF%AD/"/>
    <url>/2023/12/06/%E8%B0%9C%E8%AF%AD/</url>
    
    <content type="html"><![CDATA[<p>2021&#x2F;3&#x2F;5</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>树和森林</title>
    <link href="/2023/12/01/%E6%A0%91%E5%92%8C%E6%A3%AE%E6%9E%97/"/>
    <url>/2023/12/01/%E6%A0%91%E5%92%8C%E6%A3%AE%E6%9E%97/</url>
    
    <content type="html"><![CDATA[<h3 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h3><p>二叉树是有序树，注意，度为二的有序树和二叉树是有区别的，度为二的有序树是家里真的有两个孩子，二叉树是开放二孩政策但是你生不生看你自己，度为二的有序树未必就是二叉树，万一人家是三叉树让生三个但就生了俩呢？</p><h4 id="满二叉树"><a href="#满二叉树" class="headerlink" title="满二叉树"></a>满二叉树</h4><p>高度为h且含有2^h-1个结点的二叉树，理想条件了属于是</p><h4 id="完全二叉树"><a href="#完全二叉树" class="headerlink" title="完全二叉树"></a>完全二叉树</h4><p>当且仅当每个结点都与高度为h的满二叉树中编号1~n的结点一一对应时，称为完全二叉树</p><p>编制是满的，但是人还没满也可以，但是完全二叉树只能去掉较大的结点，否则中间抽一个去掉的话会造成编号无法对应</p><h5 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h5><ol><li>只有最后两层可能有叶子结点</li><li>最多只有一个度为1的结点</li><li>i&lt;&#x3D;[n&#x2F;2]为分支结点，i&gt;[n&#x2F;2]是叶子结点</li><li>如果某一个结点有一个孩子的话，那这一定是左孩子，否则不构成完全二叉树了</li></ol><h4 id="二叉排序树"><a href="#二叉排序树" class="headerlink" title="二叉排序树"></a>二叉排序树</h4><p>一棵二叉树或者是空二叉树，或是具有如下性质的二叉树：</p><ul><li><strong>左子树</strong>上的所有结点的关键字都<strong>小于</strong>根结点的关键字</li><li><strong>右子树</strong>上所有结点的关键字都<strong>大于</strong>根结点的关键字</li><li>左子树和右子树单独拿出来又是一棵二叉排序树</li></ul><h4 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h4><p>树上任一左子树和右子树的深度之差不超过1</p><ul><li>平衡二叉树有更高的搜索效率</li></ul><h4 id="常见考点"><a href="#常见考点" class="headerlink" title="常见考点"></a>常见考点</h4><h5 id="二叉树的常考性质"><a href="#二叉树的常考性质" class="headerlink" title="二叉树的常考性质"></a>二叉树的常考性质</h5><ul><li><strong>叶子结点比二分支结点多一个</strong></li></ul><p>​设非空二叉树中度为0，1，和2的结点分别为n0,n1,n2,则&#x3D;&#x3D;$n_0&#x3D;n_2+1$&#x3D;&#x3D;,树中总结点为n，则</p><p>​$n&#x3D;n_0+n_1+n_2$</p><p>​$n&#x3D;n_1+2n_2+1$</p><ul><li><p>**二叉树第$i$层至多有$2^{i-1}$个结点$(i\ge1)$ **</p><p>m叉树第$i$层至多有$m^{i-1}$个结点$$(i\ge1)$$ </p></li><li><p><strong>高度为h的二叉树至多有$2^h-1$个结点（满二叉树）</strong></p><p>高度为$h$的$m$叉树至多有$\frac{m^h-1}{m-1}$个结点</p></li></ul><h5 id="完全二叉树的常考性质"><a href="#完全二叉树的常考性质" class="headerlink" title="完全二叉树的常考性质"></a>完全二叉树的常考性质</h5><ul><li>具有$n$个结点的完全二叉树的高度$h$为$log_2n+1$ $(n&gt;0)$ 或</li><li>对于完全二叉树，可以由结点总数n推出度为0、1和2的结点个数为n0、n1和n2<ul><li>完全二叉树最多只可能有一个度为1的结点，则&#x3D;&#x3D;n1&#x3D;0或1&#x3D;&#x3D;<ul><li>若完全二叉树有2k个结点，则n1&#x3D;1,n0&#x3D;k,n2&#x3D;k-1</li><li>若完全二叉树有2k-1个结点，则n1&#x3D;0,n0&#x3D;k,n2&#x3D;k-1</li></ul></li></ul></li></ul><h3 id="二叉树的存储结构"><a href="#二叉树的存储结构" class="headerlink" title="二叉树的存储结构"></a>二叉树的存储结构</h3><h5 id="顺序存储"><a href="#顺序存储" class="headerlink" title="顺序存储"></a>顺序存储</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">define</span> MaxSize 100</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">TreeNode</span>&#123;<br>    ElemType value; <span class="hljs-comment">//结点中的数据元素</span><br>    <span class="hljs-type">bool</span> isEmpty; <span class="hljs-comment">//结点是否为空</span><br>&#125;;<br><span class="hljs-comment">// 可以从数组的t[1]开始存储而把0位空下来，正好可以和树结点的编号一一对应</span><br></code></pre></td></tr></table></figure><p><strong>几个常考的基本操作</strong></p><ul><li>i的左孩子 ——2i</li><li>i的右孩子 ——2i+1</li><li>i的父结点 ——2&#x2F;i</li><li>i所在的层次$log_2n+1$</li></ul><p><strong>完全二叉树中共有n个结点，则</strong></p><ul><li>判断i是否有左孩子 ——2i&lt;&#x3D;n</li><li>判断i是否有右孩子 ——2i+1&lt;&#x3D;n</li><li>判断i是否是叶子&#x2F;分支结点 ——i&gt;n&#x2F;2</li></ul><p>但是普通二叉树是不能用这种方式来判断关系的，因此在普通二叉树的存储中，一定要将二叉树的结点编号和完全二叉树一一对应起来</p><p>但是无法通过完全二叉树的数学关系来判断它是否有左孩子，还需要用isEmpty来判断</p><p>最坏情况: 高度为h且只有h个结点的单支树也至少需要2^h-1个存储单元</p><p>因此可见，二叉树的顺序存储结构只适合存储完全二叉树</p><h5 id="链式存储"><a href="#链式存储" class="headerlink" title="链式存储"></a>链式存储</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">BiTNode</span>&#123;<br>    ElemType data; <span class="hljs-comment">//数据域</span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">BiTNode</span> *lchild,*rchild; <span class="hljs-comment">//左孩子，右孩子指针,如果一边没有就将其设为NULL</span><br>&#125;BiTNode,*BiTree;<br></code></pre></td></tr></table></figure><p>n个结点的二叉链表有n+1个空链域</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// 定义一棵空树</span><br>BiTree root=<span class="hljs-literal">NULL</span><br><span class="hljs-comment">// 插入根结点</span><br>root=(BiTree) <span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(BiTNode));<br>root-&gt;data=&#123;<span class="hljs-number">1</span>&#125;;<br>root-&gt;lchild=<span class="hljs-literal">NULL</span>;<br>root-&gt;rchild=<span class="hljs-literal">NULL</span>;<br></code></pre></td></tr></table></figure><p>使用此数据结构的话找一个结点的左孩子和右孩子比较简单，但是找父结点就只能从根结点开始遍历，因此可以根据实际使用需要，在创建的时候定义一个*parent指针指向父结点</p><h4 id="哈夫曼树"><a href="#哈夫曼树" class="headerlink" title="哈夫曼树"></a>哈夫曼树</h4><p>哈夫曼树一定是完全二叉树</p><h4 id="WPL"><a href="#WPL" class="headerlink" title="WPL"></a>WPL</h4><p>所有非叶结点的和</p><h3 id="遍历二叉树"><a href="#遍历二叉树" class="headerlink" title="遍历二叉树"></a>遍历二叉树</h3><h4 id="二叉树的前中后序遍历"><a href="#二叉树的前中后序遍历" class="headerlink" title="二叉树的前中后序遍历"></a>二叉树的前中后序遍历</h4><p>前序遍历：根左右</p><p>中序遍历：左根右</p><p>后序遍历：左右根</p><h4 id="层序遍历"><a href="#层序遍历" class="headerlink" title="层序遍历"></a>层序遍历</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Level0rder</span><span class="hljs-params">(BiTree T)</span></span>&#123;<br>    LinkQueue Q;<br>    <span class="hljs-built_in">InitQueue</span>(Q);<span class="hljs-comment">//初始化辅助队列</span><br>    BiTree p;<br>    <span class="hljs-built_in">EnQueue</span>(Q,T);<span class="hljs-comment">//将根结点入队</span><br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">IsEmpty</span>(Q))&#123;<span class="hljs-comment">//队列不空则循环</span><br>        <span class="hljs-built_in">DeQueue</span>(Q,p);<span class="hljs-comment">//队头结点出队</span><br>        <span class="hljs-built_in">Visit</span>(p);<span class="hljs-comment">//访问出队结点</span><br>        <span class="hljs-keyword">if</span>(p-&gt;lchild!=<span class="hljs-literal">NULL</span>)<br>            <span class="hljs-built_in">EnQueue</span>(Q,p-&gt;lchild);<span class="hljs-comment">//左孩子入队</span><br>        <span class="hljs-keyword">if</span>(p-&gt;rchild!=<span class="hljs-literal">NULL</span>)<br>            <span class="hljs-built_in">EnQueue</span>(Q,p-&gt;rchild);<span class="hljs-comment">//右孩子入队</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="由遍历序列构造二叉树"><a href="#由遍历序列构造二叉树" class="headerlink" title="由遍历序列构造二叉树"></a>由遍历序列构造二叉树</h4><h5 id="不同二叉树的序遍历序列"><a href="#不同二叉树的序遍历序列" class="headerlink" title="不同二叉树的序遍历序列"></a>不同二叉树的序遍历序列</h5><p>一个二叉树对应一个中序遍历序列，但是一个中序遍历序列并不对应一个特定的二叉树，只有</p><ul><li>前序+中序 </li><li>后序+中序</li><li>层序+中序</li></ul><p>才可以构建一个确定的二叉序列</p><h4 id="线索二叉树"><a href="#线索二叉树" class="headerlink" title="线索二叉树"></a>线索二叉树</h4><p>注意，树的前驱和后继与遍历序列的前驱和后继不是一个东西，无法从一个指定结点开始中序遍历，要找到指定结点在遍历序列中的前驱，只能从根结点开始遍历</p><p>对n个结点的二叉树来说有n+1个空链域，空链域指向他们的前驱和后继，没有前驱可以指向NULL。</p><p>如果一个结点的指针指向它们的前驱和后继而不是左孩子和右孩子的化，我们将这种指针称之为线索，前驱线索和后续线索。</p><p>二叉树线索化之后找结点的前驱和后继变得更方便，遍历也变得更方便</p><h5 id="线索二叉树的存储结构"><a href="#线索二叉树的存储结构" class="headerlink" title="线索二叉树的存储结构"></a>线索二叉树的存储结构</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">BiTNode</span>&#123;<br>    ElemType data; <span class="hljs-comment">//数据域</span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">BiTNode</span> *lchild,*rchild; <br>    <span class="hljs-type">int</span> ltag,rtag;<span class="hljs-comment">//左右线索标志</span><br>    <span class="hljs-comment">// tag==0时，表示指针指向孩子</span><br>    <span class="hljs-comment">// tag==1时，表示指针是线索</span><br>&#125;ThreadNode,*ThreadTree;<br></code></pre></td></tr></table></figure><p>二叉树也可以称之为二叉链表，线索二叉树可以称为线索链表</p><p>中序前驱，中序后继，即按照中序遍历后的前驱</p><h4 id="树的存储结构"><a href="#树的存储结构" class="headerlink" title="树的存储结构"></a>树的存储结构</h4><h5 id="树的逻辑结构"><a href="#树的逻辑结构" class="headerlink" title="树的逻辑结构"></a>树的逻辑结构</h5><p>树是一种递归定义的数据结构</p><h5 id="双亲表示法（顺序存储）"><a href="#双亲表示法（顺序存储）" class="headerlink" title="双亲表示法（顺序存储）"></a>双亲表示法（顺序存储）</h5><p>既可以用来存储树，又可以用来存储森林</p><p>找一个结点的父结点很简单</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span>&#123;<br>    ElemType data;<span class="hljs-comment">//数据元素</span><br>    <span class="hljs-type">int</span> parent;<span class="hljs-comment">//双亲位置域</span><br>&#125;PTNode;<br></code></pre></td></tr></table></figure><p>找孩子不方便，只能从头到尾遍历整个数组</p><p><strong>适用于“找父亲”多，“找孩子”少的应用场景，比如：并查集</strong></p><h5 id="孩子表示法（顺序-链式存储）"><a href="#孩子表示法（顺序-链式存储）" class="headerlink" title="孩子表示法（顺序+链式存储）"></a>孩子表示法（顺序+链式存储）</h5><p>把一个结点的孩子指针都存储在根结点中</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">CTNode</span>&#123;<br>    <span class="hljs-type">int</span> child;<span class="hljs-comment">//孩子结点在数组中的位置</span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">CTNode</span> *next;<span class="hljs-comment">//下一个孩子</span><br>&#125;;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span>&#123;<br>    ElemType data;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">CTNode</span> *firstChild;<span class="hljs-comment">//第一个孩子</span><br>&#125; CTBox;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span>&#123;<br>    CTBox nodes[MAX_TREE_SIZE];<br>    <span class="hljs-type">int</span> n,r;<span class="hljs-comment">//结点数和根的位置</span><br>&#125; CTree;<br></code></pre></td></tr></table></figure><p>找孩子很方便，找双亲结点不方便，只能遍历每个链表</p><p>适用于找孩子多，找父亲少的应用场景，如：服务流程树</p><p>比如客服系统，从拨通电话到数字选择服务，一切都是在找孩子</p><h5 id="孩子兄弟表示法（链式存储）"><a href="#孩子兄弟表示法（链式存储）" class="headerlink" title="孩子兄弟表示法（链式存储）"></a>孩子兄弟表示法（链式存储）</h5><p>使用孩子兄弟表示法存储的树与二叉树类似，采用二叉链表实现</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">CSNode</span>&#123;<br>    ElemType data;<span class="hljs-comment">//数据域</span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">CSNode</span> *firstchild,*nextsibling;<span class="hljs-comment">//第一个孩子和右兄弟指针</span><br>&#125;CSNode,*CSTree;<br></code></pre></td></tr></table></figure><h4 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h4><ul><li>左子树大小小于根结点的大小，右子树的大小大于根结点的大小</li><li>二叉搜索树中不存在重复的结点值</li></ul><p>二叉搜索树的性能在某些特定情况下可能会退化为链表，导致其操作的时间复杂度变为O(n)，而不再是理想情况下的O(log n)。为了解决这个问题，还产生了平衡二叉树（AVL树、红黑树）等数据结构，通过限制树的高度差或引入平衡因子等机制来保持树的平衡性，进而提升了操作的平衡性。</p><h3 id="B树"><a href="#B树" class="headerlink" title="B树"></a>B树</h3><p>常考考点为B树的性质和B树的增删改查</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>上古互联网笑话</title>
    <link href="/2023/12/01/%E4%B8%8A%E5%8F%A4%E4%BA%92%E8%81%94%E7%BD%91%E7%AC%91%E8%AF%9D/"/>
    <url>/2023/12/01/%E4%B8%8A%E5%8F%A4%E4%BA%92%E8%81%94%E7%BD%91%E7%AC%91%E8%AF%9D/</url>
    
    <content type="html"><![CDATA[<ol><li><p>很久以前，那还是我用win98的时候有次我系统崩溃了，因为我是电脑白吃，我朋友给我介绍了一个高手来帮我修电脑。 他看了一下电脑，问我有没有98的盘，我说没有。 他想了一下，叫我把固定电话拿给他，我想修电脑要电话干什么，但人家是高手，我也不好说什么，就把电话拔下来给他了。 他把电话线空着的一头接在电脑的一个插孔内，然后进入了dos，然后就开始在电话上不停的按着键，他按键的速度非常快，但是只按0，1两个键，我搞不懂这有什么用，但也不敢问，看了半个多小时，他还是不停的按这两个键，我渐渐的有些困，我问他这东西要搞多久，他说要几个小时，我给他倒了杯茶，就一个人去隔壁睡觉了。 醒来的时候，一看已经过了4个多小时，我起身到隔壁，看见他正在98里面调试，过了一会儿，他说，你试试，我坐上椅子用了一下，真的好了，我当时也不懂电脑，谢过人家就走了。 后来我慢慢对电脑有了了解，终于了解，原来当时那位高手是用机器语言编了一个98系统，我后来问我朋友那位高手的下落，我朋友说前几年去了美国之后，杳无音讯….</p></li><li><p>很久以前，那还是我用winXP的时候有次我系统崩溃了，因为我是电脑白吃，我朋友给我介绍了一个高手来帮我修电脑。 他看了一下电脑，问我有没有XP的安装盘，我说没有。 他想了一下，叫我把一张空的DVD刻录盘和一根针拿给他，我想修电脑要刻录盘和针干什么，但人家是高手，我也不好说什么，就把DVD刻录盘拿一张来给他了。 他把针头对着刻录盘戳，他戳的速度非常快，但是只戳深或浅，我搞不懂这有什么用，但也不敢问，看了半个多小时，他还是不停的戳着DVD刻录盘，我渐渐的有些困，我问他这东西要搞多久，他说要几个小时，我给他倒了杯茶，就一个人去隔壁睡觉了。 醒来的时候，一看已经过了4个多小时，我起身到隔壁，看见他正在Xp里面调试，还装上了office、photoshop、迅雷、魔兽世界等软件……过了一会儿，他说，你试试，我坐上椅子用了一下，真的好了，我当时也不懂电脑，谢过人家就走了。 后来我慢慢对电脑有了了解，终于了解，原来当时那位高手是针头刻了一个单面双层的DVD，在里面刻上了Xp、office、photoshop、魔兽世界的安装程序，我后来问我朋友那位高手的下落，我朋友说前几年去了美国之后，杳无音讯….</p></li><li><p>很久以前，那还是我用winXP的时候有次我不小心把D盘格了，因为我是电脑白吃，我朋友给我介绍了一个高手来帮我恢复数据。 他看了一下电脑，问我有没有备份过Ghost，我说没有。 他想了一下，叫我把一块磁铁拿给他，还问我D盘里有什么东西，我想修电脑要磁铁干什么，但人家是高手，我也不好说什么，就把磁铁给他了，还告诉他我D盘里全是火影忍者的动画。 他把硬盘拆了，用磁铁在上面画圈，他画圈的速度非常快，但是只有碰到或不碰到，我搞不懂这有什么用，但也不敢问，看了半个多小时，他还是不停的在硬盘上画着圈，我渐渐的有些困，我问他这东西要搞多久，他说要几个小时，我给他倒了杯茶，就一个人去隔壁睡觉了。 醒来的时候，一看已经过了4个多小时，我起身到隔壁，看见他正在D盘里面调试，里面全是火影忍者的动画片，过了一会儿，他说，你试试，我坐上椅子用了一下，真的好了，我当时也不懂电脑，谢过人家就走了。 后来我慢慢对电脑有了了解，终于了解，原来当时那位高手是用磁铁直接在硬盘上写数据，凭着惊人的记忆力将火影忍者的动画片都写入了硬盘，我后来问我朋友那位高手的下落，我朋友说前几年去了美国之后，杳无音讯….</p></li><li><p>很久以前，那还是我在玩WOW的时候有次我不小心把60级T1的人物删了，因为我是游戏白吃，我朋友给我介绍了一个高手来帮我找回任务。 他看了一下电脑，问我有没有找过客服，我说没有。 他想了一下，叫我把一块石头给他，还问我人物什么职业，我想修复人物要石头干什么，但人家是高手，我也不好说什么，就把石头给他了，还告诉他我的人物已经有全套的T1。 他把硬盘拆了，并把石头放上去用手在上面搓，他搓的速度非常快，但是只有搓到和搓不到，我搞不懂这有什么用，但也不敢问，看了半个多小时，他还是不停的在石头上搓，我渐渐的有些困，我问他这东西要搞多久，他说要几个小时，我给他倒了杯茶，就一个人去隔壁睡觉了。 醒来的时候，一看已经过了4个多小时，我起身到隔壁，看见他正在打黑龙公主，身上已经有T2了，过了一会儿，他说，你试试，我坐上椅子用了一下，真的NB，我当时也不懂电脑，谢过人家就走了。 后来我慢慢对电脑有了了解，终于了解，原来当时那位高手是用手搓炉石回档呢，凭着惊人的速度搓热了炉石恢复了人物，我后来问我朋友那位高手的下落，我朋友说前几年去了暴雪之后，杳无音讯….</p></li><li><p>很久以前，那还是我用电脑的时候有次我不小心把cpu烧坏了了，因为我是电脑白吃，我朋友给我介绍了一个高手来帮我修电脑。 他看了一下电脑，问我有没有买新的cpu，我说没有。 他想了一下，叫我把一张香烟纸拿给他，还问我cpu是多少的，我想修电脑要香烟纸干什么，但人家是高手，我也不好说什么，就把香烟纸给他了，还告诉他我cpu是inter2.8g的。 他把cpu拆了，把香烟纸上的金属溥弄成一丝一丝的往cpu上粘，他粘的速度非常快，但是只有长的短的，我搞不懂这有什么用，但也不敢问，看了半个多小时，他还是不停的在cpu上贴香烟纸，我渐渐的有些困，我问他这东西要搞多久，他说要几个小时，我给他倒了杯茶，就一个人去隔壁睡觉了。 醒来的时候，一看已经过了4个多小时，我起身到隔壁，看见他正在调试，居然cpu已经弄到4.0g，过了一会儿，他说，你试试，我坐上椅子用了一下，真的好了，那个速度才叫速度，以前的简直叫蚂蚁爬，我当时也不懂电脑，谢过人家就走了。 后来我慢慢对电脑有了了解，终于了解，原来当时那位高手是用锡纸直接在cpu上做电路，凭着惊人的记忆力将烧掉的cpu重新排了一个微电路，我后来问我朋友那位高手的下落，我朋友说前几年去了美国之后，杳无音信…</p></li><li><p>很久以前，那还是我用普通照相机的时候有次我照相机坏了，找出来的照片不清楚。因为我是照相机白吃，我朋友给我介绍了一个高手来帮我修照相机。<br>他看了一下照相机，问我有没有维修手册，我说没有。<br>他想了一下，叫我把一块窗户玻璃拿给他，我想修照相机要玻璃干什么，但人家是高手，我也不好说什么，就把玻璃摘下来给他了。<br>他把玻璃敲碎了，拿起一小块，然后打开了照相机，然后就开始在地上不停的磨着玻璃，他磨的速度非常快，但是只有左右两下动作，我搞不懂这有什么用，但也不敢问，看了半个多小时，他还是不停的磨这两个玻璃，我渐渐的有些困，我问他这东西要搞多久，他说要几个小时，我给他倒了杯茶，就一个人去隔壁睡觉了。<br>醒来的时候，一看已经过了4个多小时，我起身到隔壁，看见他正在调试照相机，过了一会儿，他说，你试试，我拿过来用了一下，真的好了，我当时也不懂照相机，谢过人家就走了。<br>后来我慢慢对照相机有了了解，终于了解，原来当时我的镜头坏了，那位高手是用玻璃磨了一组镜头，我后来问我朋友那位高手的下落，我朋友说前几年去了美国之后，杳无音讯….</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笑话</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C/C++指针</title>
    <link href="/2023/11/29/C&amp;C++%E6%8C%87%E9%92%88/"/>
    <url>/2023/11/29/C&amp;C++%E6%8C%87%E9%92%88/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C/C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C/C++数据结构</title>
    <link href="/2023/11/29/C&amp;C++%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <url>/2023/11/29/C&amp;C++%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h3 id="数组（array）"><a href="#数组（array）" class="headerlink" title="数组（array）"></a>数组（array）</h3><ol><li><p>数组中的元素在内存中处于相邻的位置</p></li><li><p>数组的长度是固定的，一旦创建之后长度是不会变的，向量和链表就会改变</p></li><li><p>数组支持随机访问，可以用a[i]访问第i个元素，时间复杂度只有O(1)，也就是常数时间，<strong>向量就能按[]访问，但是链表就不成，链表只能按照顺序访问</strong></p></li><li><p>可以把数组中间的数删掉，这种操作很慢，而且要将后面的元素向左移，需要O(n)的时间复杂度，n为数组长度，<strong>相比之下链表的好处在于可以删除任意元素，时间复杂度只有常数</strong></p></li></ol><h5 id="静态数组"><a href="#静态数组" class="headerlink" title="静态数组"></a>静态数组</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-type">char</span> a[<span class="hljs-number">6</span>]=&#123;<span class="hljs-string">&#x27;h&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>,<span class="hljs-string">&#x27;l&#x27;</span>,<span class="hljs-string">&#x27;l&#x27;</span>,<span class="hljs-string">&#x27;o&#x27;</span>,<span class="hljs-string">&#x27;\0&#x27;</span>&#125;;<br><span class="hljs-comment">// 这里一开始写的是char a[5],会输出hellP&#x27;,</span><br><span class="hljs-comment">// 因为在C++中，字符数组是以&#x27;\0&#x27;为结尾的，</span><br><span class="hljs-comment">// 如果没有则会持续输出直到遇到&#x27;\0&#x27;为止，因此需要加上,或者手动在cout里添加</span><br></code></pre></td></tr></table></figure><h5 id="动态数组"><a href="#动态数组" class="headerlink" title="动态数组"></a>动态数组</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-type">char</span>* b=<span class="hljs-literal">NULL</span>;<br><span class="hljs-type">int</span> n; <span class="hljs-comment">//数组大小，可以用cin &gt;&gt; n;让用户手动输入</span><br><span class="hljs-comment">// 另，编译数组的时候编译器是不知道数组大小的，只有程序运行的时候才知道</span><br>b=<span class="hljs-keyword">new</span> <span class="hljs-type">char</span>[n]; <span class="hljs-comment">//这样就获得了一个空数组b</span><br>b[<span class="hljs-number">0</span>]=<span class="hljs-string">&#x27;w&#x27;</span>;<br>b[<span class="hljs-number">1</span>]=<span class="hljs-string">&#x27;o&#x27;</span>;<br>b[<span class="hljs-number">2</span>]=<span class="hljs-string">&#x27;r&#x27;</span>;<br>b[<span class="hljs-number">3</span>]=<span class="hljs-string">&#x27;l&#x27;</span>;<br>b[<span class="hljs-number">4</span>]=<span class="hljs-string">&#x27;d&#x27;</span>;<br><span class="hljs-keyword">delete</span> [] b;<br>b=<span class="hljs-literal">NULL</span>;  <span class="hljs-comment">//如果后面的程序又用到了b就很容易出现bug</span><br></code></pre></td></tr></table></figure><h3 id="向量（vector）"><a href="#向量（vector）" class="headerlink" title="向量（vector）"></a>向量（vector）</h3><ol><li>向量就是把数组包了一层，里面就是个数组，特点和数组差不多</li><li>与数组一样，元素在内存中处于相邻的位置，向量也可以通过[]来访问第i个元素</li><li><strong>向量和数组的主要区别在于大小不固定，可以自动增长</strong></li><li>可以用<code>push_back()</code>函数在向量末尾添加新的元素，添加新的元素之后，向量的大小就会增长，时间复杂度为O(1)</li><li>还可以用<code>pop_back()</code>函数把向量最后一个元素删除掉，时间复杂度为O(1)</li><li>可以用<code>erase()</code>来删除中间的元素，但是平均情况下时间复杂度会是O(n)，n为后面所有的元素</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// 需要#include &lt;vector&gt;</span><br>vector&lt;<span class="hljs-type">char</span>&gt; v=&#123;<span class="hljs-string">&#x27;h&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>,<span class="hljs-string">&#x27;l&#x27;</span>,<span class="hljs-string">&#x27;l&#x27;</span>,<span class="hljs-string">&#x27;o&#x27;</span>&#125;;<br><span class="hljs-comment">// 指定初始的大小</span><br><span class="hljs-function">vector&lt;<span class="hljs-type">char</span>&gt; <span class="hljs-title">w</span><span class="hljs-params">(<span class="hljs-number">100</span>)</span></span>;<br><span class="hljs-comment">// 在向量的最后插入内容</span><br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&#x27;,&#x27;</span>);<br><span class="hljs-comment">// 删除向量最后一位的内容</span><br><span class="hljs-comment">// 运行后向量的最后一位会空出来，back指针会指向前一个位置</span><br>v.<span class="hljs-built_in">pop_back</span>();<br><span class="hljs-comment">// 删除中间的元素</span><br>v.<span class="hljs-built_in">erase</span>(v.<span class="hljs-built_in">begin</span>()+<span class="hljs-number">1</span>)<br><span class="hljs-comment">// 查看向量v的大小</span><br>v.<span class="hljs-built_in">size</span>();<br><span class="hljs-comment">// 查看向量v的容量</span><br>v.<span class="hljs-built_in">capacity</span>(); <br>cout&lt;&lt;w.<span class="hljs-built_in">size</span>()&lt;&lt;endl; <span class="hljs-comment">// 大小为100</span><br>cout&lt;&lt;w.<span class="hljs-built_in">capacity</span>()&lt;&lt;endl; <span class="hljs-comment">// 容量为100</span><br><br><span class="hljs-comment">// 在w的末尾再添加一个元素</span><br>w.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&#x27;a&#x27;</span>);<br>cout&lt;&lt;w.<span class="hljs-built_in">size</span>()&lt;&lt;endl; <span class="hljs-comment">// 大小变成了101</span><br>cout&lt;&lt;w.<span class="hljs-built_in">capacity</span>()&lt;&lt;endl; <span class="hljs-comment">// 容量变成了200</span><br><br><span class="hljs-comment">// 解释一下</span><br><span class="hljs-comment">// 原本向量里有个数组用来存储元素，原本数组大小为100，数组大小就是向量的容量capacity，数组已经存满了，有100个元素，因此size也是100;</span><br><span class="hljs-comment">// 加入一个元素之后，原本数组大小无法存储，自动添加了新的数组长度，因此此时capacity为200，size为101</span><br><span class="hljs-comment">// 这个过程实际上就是一个创建新数组并拷贝数据的过程，因此非常的慢，标准库的策略是一次让数组增加很多，下一次就不用再来一遍</span><br><br></code></pre></td></tr></table></figure><h3 id="链表（List）"><a href="#链表（List）" class="headerlink" title="链表（List）"></a>链表（List）</h3><ol><li>想要访问一个节点，需要一个个元素的找下去，因为数据元素在内存中并不相连</li><li>链表中有一个指向开头的指针<code>front</code>和指向末尾的指针<code>back</code>，访问开头或者末尾的时间复杂度是O(1)</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 创建一个链表</span><br><span class="hljs-comment">// C++默认的链表是双链表，有一个指向前一个元素的指针和指向后一个元素的指针，最前面的元素指向前的指针和最后一个元素指向后的指针可以认为是指向NULL</span><br>list&lt;<span class="hljs-type">char</span>&gt; l=&#123;<span class="hljs-string">&#x27;h&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>,<span class="hljs-string">&#x27;l&#x27;</span>,<span class="hljs-string">&#x27;l&#x27;</span>,<span class="hljs-string">&#x27;o&#x27;</span>&#125;;<br><span class="hljs-comment">// 访问链表开头元素</span><br>l.<span class="hljs-built_in">front</span>();<br><span class="hljs-comment">// 访问链表末尾元素</span><br>l.<span class="hljs-built_in">back</span>();<br><span class="hljs-comment">// 历遍链表的话要使用迭代器interator</span><br><span class="hljs-comment">// 用此段代码定义一个迭代器</span><br><span class="hljs-comment">// iter指向链表的头部节点</span><br>list&lt;<span class="hljs-type">char</span>&gt;::iterator iter=l.<span class="hljs-built_in">begin</span>();<br><span class="hljs-comment">// 打印inter中的数据</span><br>cout&lt;&lt;*iter&lt;&lt;endl;<br><span class="hljs-comment">// 让iter指向下一个节点</span><br>iter++;<br><span class="hljs-comment">// 此时iter的内容就会是&#x27;e&#x27;</span><br><span class="hljs-comment">// 可以用迭代器来更改链表数据</span><br>*iter=<span class="hljs-string">&#x27;a&#x27;</span>;<br><span class="hljs-comment">// 链表支持插入操作，可以用push_back()或push_front()</span><br><span class="hljs-comment">// 此操作只有常数时间复杂度</span><br>l.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&#x27;s&#x27;</span>);<br>l.<span class="hljs-built_in">push_front</span>(<span class="hljs-string">&#x27;s&#x27;</span>);<br><span class="hljs-comment">// 可以对链表节点进行删除，可以用pop_back()或pop_front()</span><br><span class="hljs-comment">// 此操作只有常数时间复杂度</span><br>l.<span class="hljs-built_in">pop_back</span>();<br>l.<span class="hljs-built_in">pop_front</span>();<br><span class="hljs-comment">// 可以对链表中间的元素进行删除和插入，</span><br><span class="hljs-comment">// 此操作只有常数时间复杂度</span><br><span class="hljs-comment">// 在链表中间插入元素</span><br><span class="hljs-built_in">advance</span>(iter,<span class="hljs-number">1</span>);<br>l.<span class="hljs-built_in">insert</span>(iter,<span class="hljs-string">&#x27;e&#x27;</span>);<br></code></pre></td></tr></table></figure><table><thead><tr><th></th><th>数组</th><th>向量</th><th>链表</th></tr></thead><tbody><tr><td>大小</td><td>无法更改</td><td>增删改查</td><td>增删改查</td></tr><tr><td>内存</td><td>随机访问内存</td><td>随机访问内存</td><td>内存上不相邻，不支持随机访问</td></tr><tr><td>常规操作</td><td>O(1)</td><td>O(1)</td><td>&#x2F;</td></tr><tr><td>push_back()</td><td>&#x2F;</td><td>O(1)</td><td>O(1)</td></tr><tr><td>pop_back()</td><td>&#x2F;</td><td>O(1)</td><td>O(1)</td></tr><tr><td>insert()</td><td>&#x2F;</td><td>O(n)</td><td>O(1)</td></tr><tr><td>erase()</td><td>&#x2F;</td><td>O(n)</td><td>O(1)</td></tr></tbody></table><h5 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h5><ul><li>数组 <ul><li>需要固定长度存储数据，从创建到删除无需改变长度</li></ul></li><li>向量<ul><li>频繁访问任意元素而不是按照顺序访问，应该用向量</li><li>可以快速在末尾插入和删除元素，但是在开头和中间就很慢</li></ul></li><li>链表<ul><li>在任何位置访问和修改内存</li><li>但是不支持随机访问内存</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>C/C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>终端彩色字体显示</title>
    <link href="/2023/11/27/%E7%BB%88%E7%AB%AF%E5%BD%A9%E8%89%B2%E5%AD%97%E4%BD%93%E6%98%BE%E7%A4%BA/"/>
    <url>/2023/11/27/%E7%BB%88%E7%AB%AF%E5%BD%A9%E8%89%B2%E5%AD%97%E4%BD%93%E6%98%BE%E7%A4%BA/</url>
    
    <content type="html"><![CDATA[<p>终端的字符颜色是用转义序列控制的，是文本模式下的系统显示功能，和具体的语言无关</p><h3 id="常用的ANSI控制码如下"><a href="#常用的ANSI控制码如下" class="headerlink" title="常用的ANSI控制码如下"></a>常用的ANSI控制码如下</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs bash">\033[0m <span class="hljs-comment"># 关闭所有属性</span><br>\033[0m <span class="hljs-comment"># 关闭所有属性</span><br>\033[1m <span class="hljs-comment"># 高亮</span><br>\033[2m <span class="hljs-comment"># 亮度减半</span><br>\033[3m <span class="hljs-comment"># 斜体</span><br>\033[4m <span class="hljs-comment"># 下划线</span><br>\033[5m <span class="hljs-comment"># 闪烁</span><br>\033[6m <span class="hljs-comment"># 快闪</span><br>\033[7m <span class="hljs-comment"># 反显</span><br>\033[8m <span class="hljs-comment"># 消隐</span><br>\033[9m <span class="hljs-comment"># 中间一道横线</span><br>10-19 <span class="hljs-comment"># 关于字体的</span><br>21-29 <span class="hljs-comment"># 基本与1-9正好相反</span><br>30-37 <span class="hljs-comment"># 设置前景色</span><br>40-47 <span class="hljs-comment"># 设置背景色</span><br>30:<span class="hljs-comment"># 黑</span><br>31:<span class="hljs-comment"># 红</span><br>32:<span class="hljs-comment"># 绿</span><br>33: <span class="hljs-comment">#黄</span><br>34: <span class="hljs-comment">#蓝色</span><br>35: <span class="hljs-comment">#紫色</span><br>36: <span class="hljs-comment">#深绿</span><br>37: <span class="hljs-comment">#白色</span><br>38 <span class="hljs-comment"># 打开下划线,设置默认前景色</span><br>39 <span class="hljs-comment"># 关闭下划线,设置默认前景色</span><br>40 <span class="hljs-comment"># 黑色背景</span><br>41 <span class="hljs-comment"># 红色背景</span><br>42 <span class="hljs-comment"># 绿色背景</span><br>43 <span class="hljs-comment"># 棕色背景</span><br>44 <span class="hljs-comment"># 蓝色背景</span><br>45 <span class="hljs-comment"># 品红背景</span><br>46 <span class="hljs-comment"># 孔雀蓝背景</span><br>47 <span class="hljs-comment"># 白色背景</span><br>48 <span class="hljs-comment"># 不知道什么东西</span><br>49 <span class="hljs-comment"># 设置默认背景色</span><br>50-89 <span class="hljs-comment"># 没用</span><br>90-109 <span class="hljs-comment"># 又是设置前景背景的，比之前的颜色浅</span><br>\033[nA <span class="hljs-comment"># 光标上移n行</span><br>\033[nB <span class="hljs-comment"># 光标下移n行</span><br>\033[nC <span class="hljs-comment"># 光标右移n行</span><br>\033[nD <span class="hljs-comment"># 光标左移n行</span><br>\033[y;xH <span class="hljs-comment"># 设置光标位置</span><br>\033[2J <span class="hljs-comment"># 清屏</span><br>\033[K <span class="hljs-comment"># 清除从光标到行尾的内容</span><br>\033[s <span class="hljs-comment"># 保存光标位置</span><br>\033[u <span class="hljs-comment"># 恢复光标位置</span><br>\033[?25l <span class="hljs-comment"># 隐藏光标</span><br>\033[?25h <span class="hljs-comment"># 显示光标</span><br></code></pre></td></tr></table></figure><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\033[47内容\033[0m&quot;</span>)<br><span class="hljs-comment"># 内容部分会设置为白色背景</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>磁场强者语翻译</title>
    <link href="/2023/11/25/%E7%A3%81%E5%9C%BA%E5%BC%BA%E8%80%85%E8%AF%AD%E7%BF%BB%E8%AF%91/"/>
    <url>/2023/11/25/%E7%A3%81%E5%9C%BA%E5%BC%BA%E8%80%85%E8%AF%AD%E7%BF%BB%E8%AF%91/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>小说</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux服务器安装code-server</title>
    <link href="/2023/11/25/Linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85code-server/"/>
    <url>/2023/11/25/Linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85code-server/</url>
    
    <content type="html"><![CDATA[<p>服务器用wget安装太慢了，手机上先下载好了用termius传上去<br>使用<code>tar -xf xxx.tar.gz</code>命令来解压gzip压缩包并进入bin文件夹，运行<code>nohup ./code-server &amp;</code>即可<br>配置文件位于&#x2F;用户&#x2F;.config&#x2F;code-server&#x2F;config.yaml中，格式如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">bind-addr:</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><span class="hljs-string">:8080</span><br><span class="hljs-attr">auth:</span> <span class="hljs-string">password</span><br><span class="hljs-attr">password:</span> <span class="hljs-string">xxxxx</span><br><span class="hljs-attr">cert:</span> <span class="hljs-literal">false</span>     <br></code></pre></td></tr></table></figure><p>即可配置密码</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux服务器安装Jupyter服务</title>
    <link href="/2023/11/24/Linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85jupyter%E6%9C%8D%E5%8A%A1/"/>
    <url>/2023/11/24/Linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85jupyter%E6%9C%8D%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<p>在Linux服务器上安装Jupyter服务，加上Linux上安装的OneDrive服务以同步hexo源文件，以达到在浏览器上编辑hexo博客的目的</p><h4 id="安装miniconda"><a href="#安装miniconda" class="headerlink" title="安装miniconda"></a>安装miniconda</h4><p>用<code>wget</code>命令从<a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/">清华源</a>下载Miniconda3安装脚本并运行,并将conda添加到环境变量中</p><h4 id="安装Jupyter"><a href="#安装Jupyter" class="headerlink" title="安装Jupyter"></a>安装Jupyter</h4><p>以<code>conda install jupyter</code>来安装jupyter<br>安装成功后，运行<code>jupyter notebook password</code>，会让你输入一个密码，经过确认后会生成一个哈希密码，存在&#x2F;用户&#x2F;.jupyter&#x2F;jupyter_server_config.json里</p><h5 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题:"></a>遇到问题:</h5><p>在非root用户安装了conda和jupyter之后在root用户上执行<code>jupyter notebook --allow-root</code>虽然成功开始了jupyter notebook服务，但是浏览器完全无法访问成功</p><h5 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题:"></a>解决问题:</h5><p>竟然是因为没有以root用户安装jupyter，原因不明，conda卸载jupyter之后以root用户重新安装jupyter即可成功<br><em>主要是OneDrive文件夹同步到了root文件夹，改到普通用户文件夹太麻烦了懒得弄了（捂脸）</em></p><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>通过运行<code>jupyter notebook --generate-config</code>命令在&#x2F;用户&#x2F;.jupyter&#x2F; 文件夹下生成一个jupyter_notebook_config.py文件，以下是一些基本配置:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 设置可以访问的ip，默认是localhost，可以将其改为&#x27;*&#x27;,表示允许任何ip访问</span><br>c.NotebookApp.ip = <span class="hljs-string">&#x27;*&#x27;</span><br><span class="hljs-comment"># 笔记本的默认打开目录</span><br>c.NotebookApp.notebook_dir=<span class="hljs-string">&#x27;/root/hexo&#x27;</span><br><span class="hljs-comment"># 笔记本启动后是否打开浏览器，设置为False即可</span><br><span class="hljs-comment"># c.NotebookApp.open_browser=False</span><br><span class="hljs-comment"># 默认访问端口，可以自己修改</span><br><span class="hljs-comment"># c.NotebookApp.port=8888</span><br><span class="hljs-comment"># jupyterlab是否显示quit按钮，设为false可以免得不小心把服务停了</span><br>c.NotebookApp.quit_button = <span class="hljs-literal">False</span><br><span class="hljs-comment"># 是否允许以root用户运行</span><br>c.NoatebookApp.allow_root = <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><h4 id="使Jupyter在服务器上一直运行"><a href="#使Jupyter在服务器上一直运行" class="headerlink" title="使Jupyter在服务器上一直运行"></a>使Jupyter在服务器上一直运行</h4><p><em>这段是我已经配置成功了在手机上编辑的</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">nohup</span> jupyter notebook --allow-root &amp; <span class="hljs-comment">#用nohup命令使其即使ssh断开也</span><br></code></pre></td></tr></table></figure><h4 id="给Jupyter安装中文"><a href="#给Jupyter安装中文" class="headerlink" title="给Jupyter安装中文"></a>给Jupyter安装中文</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install jupyter_contrib_nbextensions <span class="hljs-comment"># 下载中文包</span><br>jupyter contrib nbextension install --user <span class="hljs-comment"># 安装中文包</span><br><span class="hljs-comment"># 此时出现问题: MoudleNotFoundError: No moudule named &#x27;notebook.base&#x27;</span><br><span class="hljs-comment"># notebook库版本太高了，不兼容了，安装6.1.0版本</span><br>pip install notebook==6.1.0<br><span class="hljs-comment"># 再执行jupyter安装命令，成功</span><br>jupyter nbextension <span class="hljs-built_in">enable</span> --py widgetsnbextension<br>jupyter nbextension <span class="hljs-built_in">enable</span> --py jupyter_highlight_selected_word<br></code></pre></td></tr></table></figure><blockquote><p>Ps. jupyter_server_config.json的优先级要高于jupyter_notebook_config.py</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Linux</tag>
      
      <tag>Python</tag>
      
      <tag>Jupyter</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>代码相关单词</title>
    <link href="/2023/11/24/%E4%BB%A3%E7%A0%81%E7%9B%B8%E5%85%B3%E5%8D%95%E8%AF%8D/"/>
    <url>/2023/11/24/%E4%BB%A3%E7%A0%81%E7%9B%B8%E5%85%B3%E5%8D%95%E8%AF%8D/</url>
    
    <content type="html"><![CDATA[<ul><li><p>approximate adj.大概的</p><ul><li>The approximate time required to complete the tutor is 25-30minutes</li></ul></li><li><p>execute v.执行</p><ul><li>execute command</li></ul></li><li><p>hint n.暗示，提示</p></li><li><p>prompt v.(计算机上)提示</p><ul><li>shell prompt shell提示</li></ul></li><li><p>If you have these steps memorized and confident</p><p>如果你已经记住这些步骤并有信心了</p></li><li><p>discard v.弃置，扔掉</p><ul><li><p>XX discards any changes you made</p><p>XX 会取消你对文本所作的任何改动</p></li></ul></li><li><p>combination n.结合体，组合</p></li><li><p>glitch n.小故障，失灵，短时脉冲波干扰</p></li><li><p>daemon n.守护进程，后台程序</p></li><li><p>prior adj.在先的，在前的，先前的，更重要的</p></li><li><p>prefix n.前缀</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>单词</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解压tar.gz文件</title>
    <link href="/2023/11/23/%E8%A7%A3%E5%8E%8Btar.gz%E6%96%87%E4%BB%B6/"/>
    <url>/2023/11/23/%E8%A7%A3%E5%8E%8Btar.gz%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">gzip -d filename.gz 这个命令将会将文件解压缩并删除原有压缩文件，如果想要保留原有压缩文件，使用:<br>gzip -dk filename.gz<br>.tar.gz 即是用gzip压缩的.tar归档文件<br>tar -xf filename.tar.gz 使用该命令可以直接解压.tar.gz文件<br>-x 从归档文件中提取文件<br>-f 指定归档文件的名称，后面紧跟着归档文件的名字<br>-v 在执行操作时显示详细信息，即输出操作流程<br>-z 表示文档是经过gzip压缩的，虽然大部分情况下新版本tar会自动识别，<br>但是万一有上手04年之前的linux的可能性呢（耸肩）<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>npm命令</title>
    <link href="/2023/11/22/npm%E5%91%BD%E4%BB%A4/"/>
    <url>/2023/11/22/npm%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<ul><li><p>npm install xxx</p><ul><li><p>-s相当于-S，即–save</p><p>局部安装，会写进package.json文件中的dependencie里</p><p>dependencies: 表示生产环境下的依赖管理；</p></li><li><p>-g全局安装</p></li><li><p>-d相当于-D，即–save-dev<br>  局部安装，会写进package.json中的devDenpencies里<br>  devDependencies: 表示开发环境下的依赖管理<br>  如果安装这些库是用来打包的或者解析代码的，就可以用这个来安装</p></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>笑话收集</title>
    <link href="/2023/11/21/%E7%AC%91%E8%AF%9D%E6%94%B6%E9%9B%86/"/>
    <url>/2023/11/21/%E7%AC%91%E8%AF%9D%E6%94%B6%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h2 id="战锤笑话"><a href="#战锤笑话" class="headerlink" title="战锤笑话"></a>战锤笑话</h2><ul><li><p>第一个笑话不是这个都对不起这个版本：</p><blockquote><p>原体的时代结束了！</p></blockquote></li><li><p>亚空间笑话其二：</p><blockquote><p>恐虐是懦夫，但是安格隆不是</p></blockquote></li><li><p>教你的孩子玩战锤，这样他们就没钱买毒品了</p><blockquote><p>结果这孩子开始贩毒买棋子了</p></blockquote></li><li><p>另一个经典笑话</p><blockquote><p>寂静王，维特克和帝皇来到一个岔路口。只见两边路牌上一边写着科技，一边写着玄学。寂静王径直走了科技那边，维克特稍作思考也走了科技那边。帝皇稍作思考，将两块路牌交换位置，走了科技那边。</p></blockquote></li></ul><h3 id="苏联笑话"><a href="#苏联笑话" class="headerlink" title="苏联笑话"></a>苏联笑话</h3><ol><li><p>伊万在看电视，是列昂尼德同志在演讲。伊万觉得无聊，换了个台，还是列昂尼德同志在演讲，又换了一个，还是他。伊万一连换了几十个台，最后累了，准备关电视。这时候电话响了，是克格勃的同志“你再换？你再换判你十年大牢！”</p></li><li><p>在苏联是否可以存在两党制？</p><blockquote><p>不，不可能，因为我们养不起</p></blockquote></li><li><p>什么在苏联最常见？</p><blockquote><p>暂时的困难</p></blockquote></li><li><p>苏联的制度优越性在哪？</p><blockquote><p>成功地克服了在其它社会制度里不会存在的困难</p></blockquote></li><li><p>一位内务人民委员部审判员结束一天的审判工作，回到办公室，突然独自大笑起来。对面办公桌的同事奇怪的问道：“有什么好笑的事吗？” “是啊，”审判员用手帕擦着笑出来的眼泪：“一个很好笑的笑话……” “哦？说来听听？” “你疯了吗？！我刚判了说这笑话的家伙五年苦役！” </p></li><li><p>勃列日涅夫同志，听说您收集政治笑话，是真的吗？</p><p>是的。</p><p>那么您现在收集了多少了呢？</p></li></ol><p>​三座半劳改营。</p><ol start="7"><li><p>有三条狗，一条美国狗，一条波兰狗，一条俄国狗。一次，波兰狗与俄国狗到美国来。美国狗教他们怎么做。美国狗说：在这个国家，你知道的，只要你叫的时间够长，你叫，就会有人过来给你肉吃。波兰狗问到：“肉”是什么？俄国狗问到：“叫”是什么？</p></li><li><p>尼基塔同志来华盛顿拜访约翰先生，约翰先生在白宫殷勤款待，席间，厨房上了一道烤香肠。尼基塔同志吃了以后对其美味赞不绝口，约翰先生对尼基塔同志夸口道：“在我们美利坚农场，生产美味的香肠已经达到了完全自动化水平，那你只要赶一头猪道香肠制造机的入口里去，过不多久机器的那一头就会自动出来一串一串的香肠…”尼基塔同志边嚼香肠连连点头，约翰先生十分得意。这时，坐在一旁的杰奎琳由于嫌香肠油脂多，吃了一点就吩咐把她的那份撤掉了。尼基塔同志问约翰先生：”撤下去的香肠你们怎么办？“约翰先生答到：”当垃圾倒掉呗！“尼基塔同志摇了摇头，说：”在我们哪里，吃剩的香肠只要往我们的香肠制造机出口扔进去，机器的那一头过不了多久就会跑出一头猪来……“</p></li><li><p>为什么这个演员被解雇了？</p><blockquote><p>因为他太像斯大林了，他的表演引发了高层恐慌</p></blockquote></li><li><p>精神病院里播放着赫鲁晓夫的演讲。讲完一段，所有人都热烈鼓掌，只有一个人站着不动。旁人问道：”你为什么不鼓掌？“答：”因为我是医生“</p></li><li><p>为什么齐奥塞斯库要在五月一日举办群众集会？</p><blockquote><p>他要看看在冬天过后，还可以活下来多少人</p></blockquote></li><li><p>亚历山大，凯撒，拿破仑作为贵宾，参加红场阅兵</p><blockquote><p>“我要是有苏联的坦克，我将是战无不胜的！”亚历山大说</p><p>”我要是有苏联的飞机，我将政府全世界！“凯撒说。</p><p>”我要是有真理报，世界现在也不会知道滑铁卢！“拿破仑说</p></blockquote></li><li><p>理查德先生访问苏联。在记者招待会上，理查德先生想借机宣扬美国式的民主，于是说：”在我们美国言论自由，任何人都可以在白宫前大骂：‘尼克松是个王八蛋！’肯定没有警察来抓他。“</p><blockquote><p>列昂尼德同志不动声色的说：”在苏联同样也是言论自由，任何人也都可以在克里姆林宫前大骂：‘尼克松是个王八蛋！’，同样没有警察来抓他！“</p></blockquote></li><li><p>一个苏联克格勃特工和一个美国中情局特工互相吹嘘各自的机构是如何的杰出。</p><p>那个克格勃特工首先发言说，”我们拥有你们美国过去15年里所有导弹发射的详细数据“</p><p>中情局特工说：“这不算什么。我们中情局掌握着你们苏联未来15年里所有当选的中央委员名单”</p></li><li><p>苏联知识分子有五个规则：</p><ul><li>什么都别去思考；</li><li>如果你一定要思考，那就别说；</li><li>如果你又要思考又要说，那就别写；</li><li>如果你又思考又说还非要写，那么别签名；</li><li>如果以上规则你都不遵守，那你就别惊讶。</li></ul></li><li><p>将军的儿子能成为元帅吗？</p><blockquote><p>不可能，元帅都有儿子。</p></blockquote></li><li><p>两个中学同学相遇然后寒暄。</p><p>您现在在哪工作？</p><p>中学老师，您呢？</p><p>克格勃。</p><p>啊！您在克格勃具体干什么？</p><p>我们负责揪出那些对苏联不满的家伙。</p><p>您的意思是……还有人比较满意？</p><p>那些人不归我们管——管他们的是纪委。</p></li><li><p>问：“假设你在酒吧，而一个陌生人坐到你身边并开始唉声叹气，你该怎么做？</p><blockquote><p>答：”立即去阻止这种反苏宣传！“</p></blockquote></li><li><p>有一个人在莫斯科红场分发白纸，被克格勃逮捕。克格勃问他：”你知不知道分发传单是违法的？“此人回答：“可是我分发的是白纸啊？”克格勃冷哼一声“哼，别以为上面什么都没写，我就不知道你要说什么了！”</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>知识记录</title>
    <link href="/2023/11/21/%E7%9F%A5%E8%AF%86%E8%AE%B0%E5%BD%95/"/>
    <url>/2023/11/21/%E7%9F%A5%E8%AF%86%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h3 id="AGI"><a href="#AGI" class="headerlink" title="AGI"></a>AGI</h3><p>恰逢Open AI之父亲加入微软，记录一下什么是AGI</p><p>AGI是通用人工智能的缩写，也就是广为人知的<strong>强人工智能</strong>，被认为是奇点技术之一</p><h3 id="中文屋论证（CRA）"><a href="#中文屋论证（CRA）" class="headerlink" title="中文屋论证（CRA）"></a>中文屋论证（CRA）</h3>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>对于经典逻辑漏洞的反驳方法</title>
    <link href="/2023/11/20/%E5%AF%B9%E4%BA%8E%E7%BB%8F%E5%85%B8%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E%E7%9A%84%E5%8F%8D%E9%A9%B3%E6%96%B9%E6%B3%95/"/>
    <url>/2023/11/20/%E5%AF%B9%E4%BA%8E%E7%BB%8F%E5%85%B8%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E%E7%9A%84%E5%8F%8D%E9%A9%B3%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h3 id="你行你上啊？"><a href="#你行你上啊？" class="headerlink" title="你行你上啊？"></a>你行你上啊？</h3><ul><li><p><strong>预设谬误</strong> 它假设了一个没有证明的前提，即“只有做得比别人好才有资格评价别人”</p><ul><li>鲁迅先生的名言——“譬如厨子做菜，有人品评他坏，他固不应该将厨刀铁釜交给批评者，说道你试来做一碗好的看。” ——&gt;现代话语版本：”你吃了一道难吃的菜，你说“这菜真难吃”，难道你还得做菜比厨子好吃才能这么说吗？”</li></ul></li><li><p><strong>偷换概念</strong> 诡辩，将“某人或者某事的是非”转移到了“发言者的能力”上，从而避开了对这件事本身的讨论，你在回避话题</p></li><li><p><strong>相干谬误</strong> 它认为“做得好”和“评价好”之间有必然的联系，而忽略了评价的标准，依据和目的</p></li></ul><h3 id="电车难题-老妈和媳妇掉水里救哪个"><a href="#电车难题-老妈和媳妇掉水里救哪个" class="headerlink" title="电车难题&#x2F;老妈和媳妇掉水里救哪个"></a>电车难题&#x2F;老妈和媳妇掉水里救哪个</h3><ul><li><strong>虚实两难</strong> 即排除了事物的其他选项，只提供两种选项，这种问题用逻辑陷阱屏蔽了其他所有现实中的可能性，比如在她们掉下去之前拉住她们啊，找路人求救啊，周围有急救人员啊等等，要求对方仅在两者间做出选择</li></ul><h3 id="以偏概全"><a href="#以偏概全" class="headerlink" title="以偏概全"></a>以偏概全</h3><ul><li>就像盲人摸象一样，你遇到了一个坏老师，那世界上的所有老师救都是坏老师，你遇到了一个某某地区的人低素质，那那个地区的人就都是低素质，非常经典</li></ul>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>赛博英雄传设定集</title>
    <link href="/2023/11/20/%E8%B5%9B%E5%8D%9A%E8%8B%B1%E9%9B%84%E4%BC%A0%E8%AE%BE%E5%AE%9A%E9%9B%86/"/>
    <url>/2023/11/20/%E8%B5%9B%E5%8D%9A%E8%8B%B1%E9%9B%84%E4%BC%A0%E8%AE%BE%E5%AE%9A%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<p>本文旨在收集并整理小说《赛博英雄传》的设定，内容基于群友整理文档“赛博英雄传设定·格式调整版.docx”,由于是设定集，因此内容包含大量<strong>剧透</strong>，如有侵权我会立刻删除。</p><h1 id="一、-世界观"><a href="#一、-世界观" class="headerlink" title="一、 世界观"></a>一、 世界观</h1><h2 id="时代背景"><a href="#时代背景" class="headerlink" title="时代背景"></a>时代背景</h2><p>什么是武？武功是技术，一种让弱者窥得机会向强者挥刀的技术。</p><p>什么是侠？侠义是暴力，是被逼上梁山者为暴君打造的刺刀。</p><p>这是一个武侠的故事。21世纪30年代，几个志同道合的年轻人走到一起，为了改变世界而努力。二百多年后，某个垃圾填埋场内，当初重开天地自成体系的赛博武道初祖向山，却在失去了一切记忆体的情况下，念着仇敌的名字醒了过来。世界被他的旧友兼仇敌统治了两百年，大部分人类都生活在恶劣的环境中，一切都变得更糟了。</p><p>“或许就是因为当初我输了，所以世界才会变成这个样子……”</p><p>“那么这一次，我再不会败！”</p><p>这是一个人，再一次改变世界的故事…..</p><h2 id="特殊概念"><a href="#特殊概念" class="headerlink" title="特殊概念"></a>特殊概念</h2><h3 id="基准人-Homo-Vexillues"><a href="#基准人-Homo-Vexillues" class="headerlink" title="基准人(Homo Vexillues)"></a><strong>基准人(Homo Vexillues)</strong></h3><p>（第一卷原文：</p><p>Vexillues，拉丁文vexillum的变体，standard&#x2F;基准之意。“基准人”&#x2F;Homo vexillues是生物学上有别于智人的物种。将智人改造成基准人的基因疗法，是义体改造的前置。基准人需要补充更多的金属元素，其身体密度大于智人，可以自主产生金属簇蛋白质层，不会受到21世纪初所有已知原生病原体的感染，其细胞拥有极强的抗机械损伤能力、抗缺氧能力，且拥有抗衰老能力。基准人寿命远高于智人，理论自然寿命有三百至四百年。</p><p>最重要的是，基准人可以依靠电场能替代部分ATP水解来给细胞供能。这一技术最开始似乎是为了解决人类的吃饭问题，让世界再无饥荒，解放更多劳动力。）</p><p>是智人进行手术改造而产生的全新的人种，基准人可以依靠电场能替代部分ATP水解来给细胞供能，大脑能通过金属基蛋白覆盖脑血屏障形成的脑机屏障直接操控电子元件。基准人只需要电能与少量营养物质就可以维持生命，体温高达56℃，并因此免疫地球原生的绝大多数病菌，抗损伤能力远高于智人，理论自然寿命有三百至四百年。基准人是“超人类主义公司”为了“消灭饥荒与疾病”而努力得到的研究成果，是人类实现义体化的前置条件。</p><h3 id="戴森原则"><a href="#戴森原则" class="headerlink" title="戴森原则"></a><strong>戴森原则</strong></h3><p>第零条：所有没有明确拒绝遵守戴森原则、或没有明确违反原则行为的个体，均默认遵守戴森原则，接受文明庇护。戴森原则为人类文明唯一普世原则。任何不违反戴森原则的行为都应被许可。</p><p>第一条：所有人类都有义务维持人类基因多样性。拒绝此项义务，将自动失去文明庇护。</p><p>第二条：禁止损害他人生物脑。</p><p>第三条：禁止制造、使用、销售成瘾类药剂。</p><p>第四条：私有财产存在且被保护。</p><p>第五条：允许且仅允许任何人以“个体向另一个体宣示效忠”的形式建立组织。</p><h3 id="武神更生"><a href="#武神更生" class="headerlink" title="武神更生"></a><strong>武神更生</strong></h3><p>在武祖向山被独裁者约格莫夫宣告处决后，为了保持侠客们对侠义之道的信心，部分向山的好友制造出了第二武神，但因对其的看法不同而导致了侠客阵营的分裂；部分侠客转投庇护者阵营，“图灵”因此退隐。约格莫夫将武祖的部分记忆以区块链的形式上传，为了保证武祖的形象不被歪曲，武祖的旧识们也将自己与武祖有关的记忆上传到同一区块链。此后不断有人访问此区块链，下载武祖的记忆，通过特殊的训练使自己的大脑拥有武祖向山的记忆与思维方式，等效于使武祖向山用自己的大脑中复活。这一现象被称为“武神更生”，在主角苏醒之前已经产生过十位武神。</p><p>任意个体需要满足两个条件才会被认定为武神：</p><ol><li>获取向山的记忆并自愿成为向山；</li><li>得到向山的昔日好友们的承认。</li></ol><h3 id="图灵机"><a href="#图灵机" class="headerlink" title="图灵机"></a><strong>图灵机</strong></h3><p>现代计算机的起源，是人类研究数学的过程中获得的最伟大的产物，也是一切内功的起源。在庇护者操控的计算机深入包括人脑在内的一切事物的时代，计算机的基本模型依然是图灵机，只有超脱图灵机结构的人脑可以反抗拥有近乎无限计算资源的庇护者。</p><h3 id="赛博内功"><a href="#赛博内功" class="headerlink" title="赛博内功"></a><strong>赛博内功</strong></h3><p>由祝心雨发明的赛博黑客手段，使得基准人可以用大脑直接输出程序，发挥智人时代的黑客技术。分为指令境,语言境,编译境,汇编境,机械境,以及传说之中的数学境,还有传说之上的图灵境。目前明确达到了图灵境的只有“图灵”祝心雨一人。</p><h3 id="神速王庭"><a href="#神速王庭" class="headerlink" title="神速王庭"></a><strong>神速王庭</strong></h3><p>一艘目前人类最高技术结晶的战舰，最高速度可以达到百分之十光速，主要任务是寻找一条可以以亚光速抵达太阳系之外的安全航路。</p><h3 id="伊沃路细胞"><a href="#伊沃路细胞" class="headerlink" title="伊沃路细胞"></a><strong>伊沃路细胞</strong></h3><p>约格莫夫的肿瘤细胞，在二十一世纪被本人捐献出来，希望其成为基准人的“海拉”细胞，但在主角的年代已经被改造为武器用于镇压侠客。</p><h3 id="人格覆面"><a href="#人格覆面" class="headerlink" title="人格覆面"></a><strong>人格覆面</strong></h3><p>所有“模拟而成的、社会化的人格”的总称。分为“真性人格覆面”和“假性人格覆面”两种。</p><p>假性人格覆面是指“计算机模拟的人格”。它的界定方式是图灵测试的逻辑，即一个程序若是可以扮演一人，并成功的欺骗被扮演者的亲友，则可被认定为是“假性人格覆面”。</p><p>真性人格覆面则是人的生物脑在特定技术的帮助下，借助特定个体的记忆，成功实现对特定的个体的“扮演”，并产生了“我就是记忆原主人”的自我认知。可以看作原主人的精神在全新生物脑上的重现。</p><p>在目前的世界观由于“假性人格覆面”没有生物脑，所有无法单独使用内功。仅有第八武神与图灵一脉掌握了使人格覆面借助他人生物脑能够使用内功的技术，主角向山在接纳了第八武神的AI后也继承了这项技术。</p><h3 id="极道共识疗法"><a href="#极道共识疗法" class="headerlink" title="极道共识疗法"></a><strong>极道共识疗法</strong></h3><p>东亚弧形列岛的黑帮中，一位内功天才创造的一项技术，由拓世者为降低学习成本的技术衍生而来，本意是让人们接受同一份集体记忆，从而能够用相同的情感看待社会、维系团体，创造大同社会。但由于“共识记忆”之中“对非团体成员的仇恨与破坏欲”不断放大，最终形成了一种精神瘟疫。现在被绿林作为洗脑手段用在新加入的成员身上。</p><h2 id="技术发展"><a href="#技术发展" class="headerlink" title="技术发展"></a>技术发展</h2><p><strong>概况</strong></p><p>在二十一世纪中叶，伴随着约格莫夫破解酶系统，各项技术得到了飞速的发展。超人企业作为一家几乎领导着技术发展方向的，巨无霸型的跨国公司，以“<strong>人类基准化</strong>”“<strong>全身义体化改造</strong>”“<strong>新文化潮流</strong>”“<strong>网络赛博空间</strong>”四个目标为主要方向而前进。（后面写义体化，但是写不动了）</p><p>尽管向山苏醒后的这个时代看起来像是废土时代，但却并没有发生“科技退步”的事情。科研骑士团的存在，让技术始终保持着进步。只不过，由于“江湖”的存在，这个时代的军事技术与网络安全技术（即赛博内功与外功）发展得有些畸形。</p><p>在学术交流层面上，科研骑士团和江湖人其实算一个整体。他们和科研骑士做学术交流，通常都维持着一个“杀进去、抢论文、杀出来”的流程。但是，由于实际需要不同，出于不“资敌”的考虑，虽然共用一个理论基础，但是侠客与官府甚至开始有意识地创造两条平行的技术发展路线。侠客们会琢磨“如何让一个玩意在更恶劣的条件下长时间工作”，而官府则会偏向于“在短时间内发挥最大功用”。正因如此，侠客往往很难利用大部分官府的装备，需要频繁维护与更换部件。</p><p>所以在这个时代，很多科技的工业化生产和民用化研究都处于停滞状态。一些高精尖设备只能通过实验室生产出来，领主取得尖端设备的难易程度，取决于自己境内科研骑士团的研究方向与关系网。从某种意义上，这也是官府的必然选择，因为侠客们都具备一定的工程学知识，知道如何养护尖端武装，如何获取补给。一种装备，如果数量多起来了，那就会不可避免的流入江湖，成为侠客的助力。</p><p>技术层面的割裂在其它方面也广泛存在。甚至在硬件层面上的协议也几乎不兼容。江湖基本遵循“知识共享”的传统，依靠区块链散播入门之径，而门派内部则依靠磁力链共享知识。</p><p>（后面写后门的广泛存在及原因，侠客必须自己造轮子，信息在网路上传播的途径等等，写不动了……主要我对计算机网络不了解，也没办法把思路理清楚）</p><p><strong>生物科学</strong></p><p><strong>破解酶系统</strong></p><p><strong>基准人化</strong></p><p><strong>还丹酶、玉鼎菌、炉鼎菌</strong></p><p>还丹酶是一种可以逆转神经细胞生命周期的特殊酶，可以使人类的神经网络重置回到初始状态。可以做到一次只还原一小部分神经网络，但是人类没有彻底破译大脑的运算方式，无法做到精准的删除某个部分的记忆。还丹酶入脑之后，接受治疗的人就会飞快的出现遗忘症状，将过去的知识、记忆全部淡忘。在早期的记录之中，甚至连性格偏好都可以稍作改变。</p><p>“玉鼎菌”和“炉鼎菌”都是被改造的酵母菌。玉鼎菌的细胞核被植入了大量基因片段，还有大量携带独立遗传信息的细胞器，可以自发合成还丹酶。</p><p>“炉鼎菌”是一种较为稳定，专门用来与“存神病毒”共生的酵母菌。只要经过特殊手段处理，就可以从炉鼎菌中分离出有一定活性的毒株。</p><p>它们都是很重要的资源，对“索绪尔神域”的成型有着非常关键的作用。</p><p><strong>基因疗法</strong></p><p><strong>认知科学</strong></p><p><strong>索绪尔神域</strong></p><p>“内功”诞生之前，在神经科学项目中，利用基准人强大的抗损伤能力，往志愿者脑内植入柔性电极，观察他们学习第二语言的过程，并用这种研究方法，敲定了他们大脑中负责“语言机能”的区域。这一块最先被称作“索绪尔区”。</p><p>为了习得“无意识写代码”的能力，最初的内功高手对自己展开针对性训练，利用人体的代偿功能，借助激素、酶、病毒与有意识的训练将“索绪尔区”的神经网络进行特化，从而强化“索绪尔区”的神经网络与其他功能区的连接。到最后，“索绪尔区”的神经网络会重新与其他功能区进行另一种额外的“桥接”，形成一个名为“索绪尔神域”的整体结构。内功越是精深，大脑并入“索绪尔神域”的区域比例就越大。</p><p>由于语言与思维相关，所以索绪尔神域的开发，会导致思维的“升级”，并非每个人都能承受这种来自于内的痛苦。并且，索绪尔神域的成型，初期是从负责语言机能的“索绪尔区”开始，最终要扩展到大半个大脑上。想要修得强大的内力必须经过这一步，这个过程中忘记什么都是正常的。靠谱的做法，是将大脑内的东西，提前转移到硬盘之中，用电子设备代替自己记住那些东西。</p><p>可是，总有一部分东西很难无损转码。比如说绝大部分非陈述性的情感，又比如外功之中关于“生物脑与算法相适应”的部分——这部分内容只有存在于生物脑内才有意义。上传到硬盘之内，对于一个武者来说没有任何作用。</p><p>（综合了莫里的版本，有人觉得太多的话再改）</p><p><strong>记忆的读取与存储</strong></p><p><strong>这个时代已经有了外置的记忆存储设备</strong>，可以拓展大脑的容量，对于大多数人来说，想要学习新的技术，用硬盘存储，然后用生物脑适应硬盘中的信息就可以了。但是，硬盘中的信息，面对真正的高手，却可以被随意删除与篡改。而生物脑和图灵机可能并不相同，不管是何等的内功高手，也不可能挖出人类生物脑之中的信息。</p><p><strong>这种技术本质上是</strong>将大脑当中的记忆转化为二进制结构并存储起来。由于人脑与计算机存在着巨大的差异，所以计算机并不能直接读取这种格式的文件，只能逆向输入到大脑之中，在大脑之中唤起感官。陈述性记忆可以无损转化成机械语言；难以无损转化的记忆包括非陈述性记忆，比如难以确认的情绪，对于某次事件的直观感受等等。</p><p>在最初的设计当中，人类就要通过‘交换记忆’来解决‘学习问题’——它最大限度压缩了学习的成本，甚至有人预想，人类可以依靠这种技术达成无障碍交流，最终相互理解。后来，侠客们用它来互换武道经验。这种技术极大地方便了经验与知识的学习与传递，但是尽管“情绪化的记忆”难以精确的数据化，“知识的记忆”却也与“感官的记忆”与“情感的记忆”相联系。如果短时间内连续阅读他人记忆，自身成型观念都会受到冲击，乃至性格变化。</p><p>所以这种技术也是绿林们制造用来增殖自身的“共同记忆”的技术前置。</p><p>（1.方便经验和知识的学习与传递2.绿林、武神更生、persona的技术前置3.）</p><p><strong>物理学</strong></p><p>核聚变（义体小型仿星器、核潜艇）</p><p><strong>量子计算机、量子芯片</strong></p><p>对于量子计算机来说，热噪声是一种天敌。温度稍高，辐射稍强，环境背景温度就会干扰到脆弱的量子位，芯片也很容易损坏。所以二十一世纪初，量子芯片的运行环境要求是4K，即-269.15℃。</p><p>目前让量子逻辑门在更高温度工作的方法主要有两种：</p><p>一种是在更高的温度下再现超导现象，继而再去寻找在这个温度下创造超导量子逻辑门的手段；另一种是创造新的算法，可以让程序在“每一个逻辑门都不绝对可靠、随时都会出错”的环境下跑起来。两种手段双管齐下，才能让量子逻辑门在接近液氮的环境温度下运行起来。</p><p>过去向山使用过的量子芯片运行环境普遍在20K以下。那时，向山使用过依靠激光冷却的量子芯片，也使用过依靠稀释制冷机维持的量子芯片。</p><p>但是到正传主时间线，侠客已经可以获得80K的量子芯片，氦工质的小型制冷机就可以达到这个温度。甚至，最耐高温的量子逻辑门可以通过超导实现在常压200K的环境下工作，液态二氧化碳就可以维持。缺陷是生产难度极大，单个芯片的成本极高，现有技术条件之下几乎不可能大规模运用。除开火星的两家科研骑士团之外，就连基因库武装武官与科研骑士都不允许制造、持有可以生产这种量子芯片的设备。据说侠客方现在只有土星的少量侠客社区会生产这种超导量子芯片，产量也低，并且经过好几道手续才能流入地球。</p><p><strong>航天</strong></p><p>（太空开发情况、太空航行情况、战舰？）</p><h2 id="势力分布"><a href="#势力分布" class="headerlink" title="势力分布"></a>势力分布</h2><h3 id="侠义势力"><a href="#侠义势力" class="headerlink" title="侠义势力"></a><strong>侠义势力</strong></h3><p>以武祖提出的“侠义精神”为旗帜，在世界各地反抗万机之父统治体系的个人或团体，互相称为“侠客”，主要依靠去中心化算法，在互联网上相互交流，传播精神。侠客遍布太阳系，主要力量集中在火星与木星的小行星带之外。地球作为庇护者监管最严密的地区之一，侠义势力的力量处于低谷。侠义力量目前拥有几支主要舰队：始建于第六武神时期的白舰义从，第七武神的黑舰义从，随第九武神一同起义的赤星义从。</p><h3 id="文明庇护者"><a href="#文明庇护者" class="headerlink" title="文明庇护者"></a><strong>文明庇护者</strong></h3><p>俗称“官府”，是忠诚于万机之父的统治机器，自诩为“人类文明的庇护者”，为遵守戴森原则的人提供基本的人身权保护，但在“是否提供庇护”上有很大自主裁量权。然而，其最重要的任务并非为民众提供庇护，而是保卫人类基因库与科研骑士团。官府可以调动庞大的资源，但由于戴森原则的限制，庇护者们没有足够的人力控制民众的方方面面。</p><h3 id="科研骑士团"><a href="#科研骑士团" class="headerlink" title="科研骑士团"></a><strong>科研骑士团</strong></h3><p>又称“万机之父教团”，在序列上和文明庇护者平行，直属于万机之父，各级文明庇护者机构、任何世俗团体或个人，都无法管辖和干预他们。每一位科研骑士依照戴森原则直接向万机之父效忠，承担“对自然与未知发起冲锋”的科研任务。但科研骑士团也并非纯粹的科研机构，而同样拥有庞大的后勤与武官序列。</p><h3 id="六龙教"><a href="#六龙教" class="headerlink" title="六龙教"></a><strong>六龙教</strong></h3><p>隐匿于庇护者内部的神秘组织，行动似乎没有明确的纲领，渗透范围极广，存在时间很长。江湖人多称其为“魔教”。</p><h3 id="绿林"><a href="#绿林" class="headerlink" title="绿林"></a><strong>绿林</strong></h3><p>拒绝文明庇护外的黑帮组织，会用集体记忆洗脑成员、使成员无法脱离。以劫掠为生。</p><h1 id="二、赛博武学"><a href="#二、赛博武学" class="headerlink" title="二、赛博武学"></a>二、赛博武学</h1><p>是从战争之中升华的特种战术，相当于用技术手段，在原本的军事指挥体系上另开了一条“科技树”。在很长一段时间里，个体对战争走向的影响力不断缩减，所有的军事理念，都建立在“绝大多数情况下单兵素质相差不大”这一基础上。但武祖设计的赛博武术彻底摧毁了这一基础，建立在“以个体之身对抗暴政”的设计宗旨上，是历代所有“游击”、“狙击”、“暗杀”等特种作战理论的集大成者，更类似传统武侠世界观设定下的武功。基准人义体化后，零件、算法、经验等的优劣在很大程度上会决定武者能够使用的技巧，强大的义体可以发挥出精妙的技术，但垃圾义体同样可以通过千锤百炼的策略组，拉开与单兵之间的技巧差距，从而以弱胜强，用个体力量对战争造成最大影响。</p><p>虽然武功只是可以被任何人使用的“技术”，但它是针对暴政而设计的，它对暴政者的伤害，注定强于对民众的伤害。对侠客来说，由于绝大多数资源都被官府掌握，但武功的本体，是最难被强者所垄断、消灭的“算法”。只要信息技术与网络的去中心化存储还在，“武功”的情报就无法被抹除，弱者就永远会有接触它的机会，从而成为侠客，不断使用从敌人手中夺取的义体并战斗下去，反抗这个世道。</p><p>某种程度上说，赛博武学这条科技树的发展是“畸形”的——世界上存在那么多比“义体人打拳”更简单的军事技术，这个世界反而成为了武道的世界；极客文化明明与强调共享的开源精神相伴而生，但是提升到内功境界的黑客技术，反而将开源的精神消灭殆尽。但是，这种“畸形”正是义体化条件下反抗者与暴政者博弈的结果，是特殊时代下的特殊产物。</p><p><strong>铁华</strong></p><p>武学之中，存在许多造价非常低廉，但在战斗中异常好用的玩意。铁华就属于其中一种。</p><p>金属颗粒气溶胶一般是纳米级的金属颗粒与高压气体混合，并用特质的方式扩散。诨名“铁华”，也有叫“闪光尘”的，甚至还有人带着调侃的称呼它为“贤妻”。之所以称它“贤妻”，是因为这玩意妙用实在不少，实在是居家旅行、行侠仗义的必备物资。</p><p>首先，金属颗粒是良好导体。若是进入电路之中，极容易造成短路。把这东西往建筑的电力系统上扔，就可以瘫痪一片。其次，金属颗粒作为良好导体，可以在空气中形成类似于法拉第电笼的结构，可以用来抵御电磁脉冲武器。再者，金属颗粒的折射能力，也能有效的抵御激光武器。另外，与强助燃剂均匀混合后，它也可以在密闭空间里当做爆炸物使用。若是手上有适合的加热道具，也可以用它来修复外装甲上的小损伤。最重要的是，它很便宜。有些时候，它甚至被早期的侠客们当做烟幕弹来用。</p><p><strong>炸弹</strong></p><p>主要分为EMP炸弹和传统爆炸物。</p><p>“触发式地雷、定时炸弹、AI判定炸弹……总之，一切不需要额外指令就能在远处自动引爆的爆炸物，都是侠客的朋友。”这具名人名言，出自二百年前某位不愿透露性命的侠客。爆炸物是侠客的好伙伴，而能够在远处自己爆炸的爆炸物更是如此。</p><p>虽然传统爆炸物地雷爆炸的高温气体与冲击波，被赛博人的伤害被外装甲以及缓冲层极大的削减了，武林高手也可以靠超音速的身手闪过炸弹最强大的一波伤害，但是爆炸物在用来攻击一大群“武功稀松平常”的人时，可以造成很不错的效果。在远处爆炸的炸弹还可以吸引敌人的注意力，让敌人将兵力投放在没有目标的区域。另外，它也可以在必要时扭转“地利”。</p><p><strong>EMP</strong>炸弹对自然人几乎没有伤害，但是对没有好好做电磁防护的义体人一炸一个准。义体化较低的要防备心脏与肺腑被破坏至宕机，义体化高的，则要小心脆弱的芯片。尽管铁华之流可以在一定程度上抵御EMP，但是自脚下爆发的EMP地雷，根本不会给人释放铁华的时间，只能靠义体自身的电磁抗性硬抗过去。</p><p>这个时代的炸弹有可以用内功骇入的智能炸弹，也有很多拒绝外界操作的AI判定炸弹、定时爆炸的炸弹与压感地雷。对侠客来说，地雷不能布置在距离居民区三十公里以内的地方，哪怕是为了阻击官兵，也不能威胁到群众的安全。</p><p><strong>雷达</strong></p><p>雷达是赛博武者有别于自然人的多种感官之一。</p><p>针对雷达告警装置，有些武者会专门把自己雷达的信号进行伪装，从而让对方误判自己的距离和扫描模式。还有的武者在多人合作时，会分别携带雷达的发射器与接收器。又或者干脆把雷达装在无人机上，再通过数据链来进行不暴露自身位置的打击。</p><p>但是，既然反侦察的技术已经成体系了，自然有反其道而行之的体系，也就是故意向一名武者发射雷达波，让他产生“我被锁定了”的紧张感。</p><p>与赛博武术还没有成熟的时代不同，只是一瞬间的雷达扫描，就有可能回传有效信息，辅助武者进行判断。所以一束看似微弱的雷达波，都能让战斗中精神高度紧张、或者一些一直疑心病就很重的武者产生“这是高手故意伪装之后在试图锁定我”的下意识判断。据说老一辈的侠客里，有人提议管这个叫“杀气”。但是更多的人认为这个称呼意义不明，而且容易混淆‘雷达波’这个概念，所以没有流传下来。</p><p><strong>音响</strong></p><p>（写不动了）</p><h2 id="外门武学"><a href="#外门武学" class="headerlink" title="外门武学"></a>外门武学</h2><p>“外功”最重要的部分设计思路，便是“要求低”。就算是垃圾义体，也能打出一套外功来。有更好的高科技、强材料义体自然是更好，但没有的话也无所谓。只要外功武者可以保证“在局部战场上比来袭的敌人强”，就可以不断获取更好的零部件。</p><p>外功自然包含了一整套“从弱杀到强”的理论与方案。只要有人有进行游击战与持久战的决心、毅力，就可以直接拔剑而起，成为侠客。</p><p>用来优化武道算法的经验卷积替代了自然人的“肌肉记忆”，比“肌肉记忆”更加精准也更容易掌控。这东西是不需要经过生物脑的。所以侠客在赛博外门武学上的进境分为三个层面。一个，就是算法本身的演化——根据经验卷积，不断针对个人风格与偏好，修正算法的倾向。另外，是生物脑对“战术”的想象，是在“战术”层面上运用算法的能力。再一个，就是生物脑与算法相适应的程度。</p><p>外功的核心是将身体交给武道、将动作托付给算法。这些事情说起来简单，但很难做到。机器不理解什么叫“目的”，必须由人赋予机器。将算法下载下来，武者必须经过训练与实战，才能以自己的意识来驾驭武道，不断调整策略，做出抉择。</p><p>“外功”主要包括“搏击”与“枪炮”两类。</p><h3 id="机甲钢拳"><a href="#机甲钢拳" class="headerlink" title="机甲钢拳"></a><strong>机甲钢拳</strong></h3><p>是武道初祖与万机之父创造赛博武术时发明的第一门拳术，也是天下间流传最广的武术，在江湖中又被人称作“武祖长拳”。几乎是个武者就有渠道得到这一门拳法的武道算法。</p><p>机甲钢拳之所以被称为“诸拳之母”，是因为它排弃了人类在自然人时代千百年积累的标准，同时升华了众多格斗术的经验，创造了“最大限度发挥义体优势”的战术策略组。其他所有的赛博武术，都是根据这个思想演变而来的。“机甲钢拳”的算法，也已经包括了所有基本的武道策略组。高手能够从这算法的底层之中，拆解出武道之间博弈的智慧。一百多年来，也曾有武者就用机甲钢拳，打入残奥会的决赛圈。它是最早的武学，也经历了最多的版本更迭。按理来说，古老的技术都不会太强，但是机甲钢拳却汇聚了几百年来众多名家的经验卷积，确实非比寻常。</p><p>机甲钢拳虽然与侠义之道一起成型，但是机甲钢拳的雏形是在表演性质的运动会当中成型的。正是因为当初的拓世者们需要让民众都注意到义体改造，击败“对血肉身体的非理性重视”，宣扬“义体化胜于肉体”的策略，所以举行了很多表演性质的竞技活动。</p><p><strong>仿生拳法</strong></p><h3 id="枪炮道"><a href="#枪炮道" class="headerlink" title="枪炮道"></a><strong>枪炮道</strong></h3><p>枪炮道是一种专门强调驾驭热兵器的外门武学。虽然是一门非常实用的武学，但最初的武道家甚至想要将枪炮道从武道的底层设计剔除。因为子弹出膛的刹那便不受控制，武者对抗发展成“闪避”与“试探”的循环后，容易波及无关群众。</p><p>战术上，枪炮道以火力压制与狙击为主。“枪炮三才式”中的“迫”是所有枪炮道武功策略的基本模板，是以“落空”为前提，引导对手朝着“无法躲避的区间”前进的策略组。在开枪之前，枪炮道的武者就会经历许多轮复杂的侦查博弈。</p><p>值得一提的是，完全自动化的战斗机器人，基本以远程热武器为主流。只要一个大型机器人，搭载了足够猛的火力，形成密集的火力压制，那么仅仅是单纯的AI，就足以压制一大批外门武者。虽然AI的无法抵御内功。但是做好硬件层面的防护，就可以在一定程度上预防这种状况。</p><p>对于枪炮道来说，“距离”就是“优势”，但是距离与优势并总是呈正比。枪炮道武者应该歼敌于千丈之外，或者五步之外、百步之内。</p><p>在七公里到五公里的“极限距离”之下，枪炮道的优势无法估量；但四千米之后，枪炮道的武者会逐渐失去这个优势，因为此时高精度的义眼可以直接观察到他的枪口。子弹出膛到抵达目标，至少需要几秒钟的时间，足够赛博武者反应。</p><p>只有到了一百米之内，留给格斗武者的反应时间缩短到几近于无，枪炮道武者才会重新占有优势。之后，格斗技只能在一米的范围之内重新抢到“绝对优势”。</p><p>对于枪炮道来说，大气扰动会让子弹产生偏移，所以一般需要少量的无人机阵负责检测大气扰动，辅助射击。</p><p><strong>SSC三兵合一棍</strong></p><p><strong>四心刀术</strong></p><p><strong>卡拉什尼科夫流枪斗术</strong></p><p><strong>猛虎惊天枪术</strong></p><p><strong>磁力陷阱兵器</strong></p><p>最初的时候，“磁力陷阱”类奇门兵器来自于木星引力圈侠客的集体创造。但很快，就有侠客以这类奇门兵器为核心，开宗立派，以探讨“子午鸳鸯钺”“子母龙凤环”两种兵器的打法、战术。在与官府一代代的战斗中，侠客们开发出了“子午鸳鸯钺”“子母龙凤环”等带有“磁力陷阱”性质的奇门兵器，专打声子刀。</p><p>声子刀造价高昂，生产条件严苛，只有远日行星的侠客大后方有能力少量生产，官府使用的情况更多。在高品阶的冷血游骑之中，这东西甚至是可选制式装备之一。但侠客就算缴获了声子刀，也没法稳定的获取最重要的刀片。相比之下，“子午鸳鸯钺”“子母龙凤环”这类磁力陷阱奇门兵刃的造价就低廉很多。</p><p>所以这一门武学，就算官府学去了也无济于事。这是对侠客单方面有利的武功，某种意义上非常贴近武祖的思想。</p><p>值得一提的是，这类奇门兵器的基础是磁场，所以加入罡炁武学之后，可以生出种种不同的变化。志护法把子午鸳鸯钺开发出配合玄武真罡的用法，命名为玄武真罡·龙式。</p><p><strong>子午鸳鸯钺</strong></p><p>只要两把鸳鸯钺的连接绳撞在一起，那么它们就注定会缠上。赛博子午鸳鸯钺的克星，就是子午鸳鸯钺自身。</p><h3 id="玄武真罡"><a href="#玄武真罡" class="headerlink" title="玄武真罡"></a><strong>玄武真罡</strong></h3><p>玄武真罡是操控金属气溶胶的罡炁武学，是以寡击众的武功，为武祖向山发明，并与英格丽德·格拉纳特一起命名相关招式。它诞生的背景，是为了防御旧军队列装的，最适合对抗义体的电磁脉冲武器，与最强大的激光武器。“金属气溶胶排列组成镜面”的状态，保证了它可以有效的折射激光武器，被激光蒸发后，要补充的金属粉末也比补充外装甲反射涂层廉价很多。而“金属气溶胶组成法拉第笼”，也可以防御电磁脉冲(EMP)的攻击。最初玄武真罡存在的另一个意义，就是朝大型武器、一般军用义体的散热模块进气口里灌金属气溶胶，而不是像这个时代一样，先损坏敌人的外装甲，再用激波包裹湍流、湍流裹挟气溶胶送进那伤口。</p><p>在防御层面，四散的金属气溶胶可以吸引大多数地方的注意力，隐藏自己真正的位置；也能让敌人投鼠忌器，得避免误伤气溶胶中可能存在的友军，这就让侠客单人面对军队的时候，有了“不用担心狙击”的底气。在攻击层面，玄武真罡也可以做到“以最小成本解除敌人的战斗力”。玄武真罡还可以通过阻隔大部分侦查与通讯手段的金属气溶胶来切割战场，阻碍敌人的配合。这会进一步强化“精兵”的优势。没有被立即消耗掉的磁化金属颗粒，也可以被磁场回收，反复使用。“罡炁武学”可以在不提升义体载重量的前提下，提升侠客的续航能力，相当节约资源。</p><p>玄武真罡的缺点之一是，对“本地”计算力有很大的需求。玄武真罡完全发动之后，武者裹挟在一个金属气溶胶构成的法拉第笼中，电磁脉冲打不进来，但无线信号也一样。这个状态下的武者没法借助远程的计算资源。而且这个时代，气流的计算比侠义刚刚诞生的时代复杂很多，因为高手一动就超越音速。人形义体搅动大气，会形成些许超音速湍流，玄武真罡已经演化到连这些湍流都要利用的地步了。而湍流又是个混沌系统，求出它的“特殊解”，需要相当高的计算力。但武者却疯狂到用“指风”射出这种东西，然后还期望这样一股超音速湍流，可以射进狭小的缝隙之中，在敌人体内引发连锁反应。</p><p>如果没有太高的计算力，也可以用身周不断变化的磁场，快速磁化、偏折乃至俘获部分子弹。跟随本体移动的罡气团，也可以掩盖自己的身形，有效避免躲在暗中的狙击手。这会进一步强化“精兵”的优势。</p><p>玄武真罡的缺点之二是，不适合群体作战。金属气溶胶阻隔了绝大部分的指挥系统，甚至还会阻挡队友的视线。除非经过专门训练、使用特殊战术，否则玄武真罡的武者几乎无法与任何队友打配合。这一套功夫只适合独行的刺杀者。</p><p>玄武真罡对敌我的封锁都是相当的。它固然可以阻碍敌方视线，让敌方枪术难以发挥，但也会阻碍我方人员观察敌方枪手的动作，甚至会妨碍使用者躲子弹。</p><p>玄武真罡的第三个缺点是，在卫星看来非常醒目。在荒野中使用，容易被卫星锁定。</p><p><strong>玄武真罡·蛇式</strong></p><p>蛇式·现毒龙王（Taksaka）</p><p>人类对蛇类、甚至所有爬行类都有一种本能的恐惧。“现毒龙王”一定程度上就是利用了这一点。</p><p>义体加速之后，那些纳米金属颗粒就会因为阻力而落后与义体。但磁场赋予那些颗粒的动能，以及义体前进带出的涡流，都会让金属气溶胶被动的前进，跟随武者的步伐。在这个过程当中，金属气溶胶就会被拉长，形状如同蛇一般。甚至有一些小技巧，可以通过摆动手臂，微调身上的磁场，来改变磁场的分部，让蛇形的罡气团尖端形状改变，更接近毒蛇的三角形头部。武功越高的武者，越是能够克服对毒蛇</p><p>的恐惧本能，但对于高速交战的赛博武者来说，这一瞬的失神就足以让人失去性命，就好像直面了神话之中，以目视杀死牲畜的龙王德叉伽一样。</p><p>这类用法被某人戏称为“磁场三维拉花”。</p><p>蛇式·青莲华龙王（Utpalaka）</p><p>绵密的金属气溶胶朝着四面八方扑去，如同张牙舞爪的莲花怒放。</p><p>蛇式·大身龙王（Manasvati）</p><p>利用大块金属气溶胶团块移动。</p><p>蛇式·难陀龙王</p><p>蛇式·无热恼龙王</p><p>蛇式·宝称龙王(Vasuki)</p><p>这一招式用于偷袭。玄武真罡的武者会分出几道小的气溶胶湍流，去攻击敌人的散热口或装甲缺口，以期造成短路伤害。</p><p>只不过，湍流的计算依旧是一个难题，这种招式的命中一定程度上得靠玄学。为了提高命中率，一轮攻击得打好几次。所以当初就给了个“脑袋很多的龙王”的名字。（宝称龙王又名多头龙王、九头龙王，也称婆修竖龙王、筏苏枳龙王）</p><p><strong>玄武真罡·龙式</strong></p><p>六龙教护法志李激流开发出的武学，配合子午鸳鸯钺使出。在“睚眦”和“嘲风”上下过一番功夫，对“落入下风时如何变招”，亦有很深的理解。</p><p>龙式·睚眦</p><p>如双龙抢珠的凌厉攻击。这一招真正的奥义是“连消带打”，可以用两把磁力陷阱武器去锁一把声子刀的刀片。</p><p>龙式·蒲牢</p><p>龙式中，绝地反击的一招。两把鸳鸯钺在半空之中对撞，两团气溶胶化为一个扩散的“平面”，继而崩解成无数涡流，卷向敌人。</p><p>龙式·椒图</p><p>用两把鸳鸯钺“咬”向敌人。可以通过牵动鸳鸯钺的线，连消带打，化解攻势。</p><p>龙式·蚣蝮</p><p>神话之中，蚣蝮是龙而似龟，又有“脱去龟壳化为龙形”的说法。而玄武真罡·龙式中的“蚣蝮”，可以从“龟式”的大部分招数衔接而来，亦可以用来衔接龙式里攻中带守的招式。</p><p>龙式·饕餮</p><p>（收拢金属气溶胶。）</p><p>龙式·狻猊</p><p>狻猊在神话之中“喜烟好坐”的设定，在中原古代也多出现与香炉之上。</p><p>而玄武真罡·龙式之中的狻猊，也是通过绵密的攻击，来让金属气溶胶团块快速扩张。</p><p>龙式·嘲风</p><p>嘲风好险，形殿角上。在神话之中，嘲风是一种爱好冒险的龙子，因此中原大地的古人将之装饰在宫殿的殿角之上。</p><p>而玄武真罡·龙式中的“嘲风”也是一种冒险的招数。志护法开发出龙式·嘲风，本意是快速转移金属气溶胶团块的位置，以把控战场。同时，这一招还可以用金属气溶胶团块来掩盖鸳鸯钺的具体位置，让它更加难以躲闪。这一招会使得武者上半身维持一个“抛投”的姿势，并让鸳鸯钺带走相当一部分的金属气溶胶。这会让武者自身空门大开。</p><p><strong>玄武真罡·龟式</strong></p><p>龟式·玄龟吐真气</p><p>让金属气溶胶如水波一般扩散出去。</p><p>龟式·灵龟吸尽金乌血</p><p>用于重新收拢金属气溶胶。</p><p>龟式·养志法灵龟</p><p>在全身各处用金属气溶胶构建磁悬浮镜面，可以掩盖自身的架势。在龟式的诸多技巧之中，“养志法灵龟”甚至都不一定需要搭配金属气溶胶，几个变体可以直接当做格斗技巧来用，也很适合作为几种招式之间的衔接。</p><p>龟式·神龟虽寿</p><p>这是玄武真罡中，快速布置激光散射层的妙招。可以防御激光武器，甚至在防御的同时通过反射光破坏敌人的义眼。</p><p><strong>星屑旋转功</strong></p><p>与玄武真罡同为操控金属气溶胶的罡炁武学，由大卫·克莱恩所创。“星屑旋转功”更加偏重于超大范围的粗略控制，更适合对大规模敌人的应用，多用于正面战场的大规模交火，而玄武真罡则更加偏重与小股精锐敌人交手。这种策略组差异，源自于大卫与向山个人经历的不同。在早期刺杀当中，大卫时常担任正面的火力手，而向山则负责深入斩首。</p><p>据向山本人特地强调，星屑旋转功这一手掌握起来并不复杂。它所需要的计算资源也只有玄武真罡的十分之一左右，是一种更适合新手的罡炁武学。但是，想要在罡炁武学的道路上走得更远，从大卫的星屑旋转功转向他的玄武真罡是必然的。</p><p><strong>破械术</strong></p><p>一种需要巨量的工程学知识与维修经验才能施展的苛刻武学，可以通过定点的寸劲击打，让精密仪器失灵。可以精准的击破对方武器或义体的弱点，甚至通过劲力的传递，精确破坏某一个单独的零件，来达成连锁效果。</p><p>它的原理是，利用不同质量零件具有不同的惯性大小，通过瞬间加速让零件错位，人为制造错位或接触不良。它苛刻到要求一个武者必须依靠听觉与听劲就察觉机械运转、继而反推机械结构的地步，是一种性价比低到令人发指的武功。</p><p>二百年前也有谐音梗爱好者戏称为“破邪斩”。也有人将之戏称为“赛博分筋错骨手”。</p><p><strong>RX-天马</strong></p><p>“RX-天马”与神速王的‘变体月光蝶’是同源的武功，都可以追溯到武祖所创造的超高速斗法。</p><p>“RX-天马”体系包括了“彗星跑法”、“流星拳”、“回旋捶法”等，是速度致胜的武学。但是相对的，移动义体的能量，以及热力学第二定律所注定的额外发热，都是不可避免的。对“天马”的武者来说，能源与散热的压力会比同级的武者更大。所以，修习RX-天马的武者，就必须学会藏锋，不是时刻发挥速度优势，而是在平日利用速度锻炼出的神经反射，后发先至，始终保持能源在80%以上，始终留有余地。所以，如果在过高的速度下，神经反射没法完美掌控自己的架势，RX-天马流派的武者就不会轻易加速到这个程度。</p><h2 id="内家功法"><a href="#内家功法" class="headerlink" title="内家功法"></a>内家功法</h2><p>内家功法，是智能与人工智能相互提升之后的产物，在古老的时代被称作骇客技术。</p><p>侠客的“内功”，是基准人用生物脑直观地操纵代码与计算资源，不需要像旧时代原始的骇客一样，通过叫做“屏幕”的输出设备，使用叫做“键盘“的输入设备干涉代码的世界。从根源上看，内功是骇客技术的演化产物；但骇客技术和侠客内功之间的关系，就好像原始海洋之中的第一个单细胞生物，与后来的高等生物一样。内家功法的练习需要大量在计算机上模拟骇入和防守的训练，不断熟悉数学、编织算法。</p><p>赛博内功分为指令境、语言境、编译境、汇编境、机械境，以及传说之中的数学境和传说之上的图灵境。目前明确达到了图灵境的只有“图灵”祝心雨一人。</p><h3 id="叛客异色观"><a href="#叛客异色观" class="headerlink" title="叛客异色观"></a><strong>叛客异色观</strong></h3><h3 id="五停心观"><a href="#五停心观" class="headerlink" title="五停心观"></a><strong>五停心观</strong></h3><p>是一种基于认知科学的自检程序，题库大致可以分作测试本能好恶的“不净观”、测试社会人格的“慈悲观”、测试思考逻辑的“缘起观”、测试自我认知的“界分别观”和测试自我控制能力以及主观感知的“数息观”五类。预先将一些心理测试题目以特殊格式封装在一个程序里，程序会通过人脑与电子设备硬件层面的交互，绕过表层意识，直接对大脑提问。</p><p>从感觉上来看，这就好像有很多人同时问你无数个问题一样。很接近现代内功高手用以自娱的“垃圾信息”。而且与“垃圾信息”类似，这种信息也需要受试者压制自身的记忆机能，避免受试者记忆下题库，然后每次都回答一样的问题。</p><p>“五停心观”可以作为测试，而换一种存储格式之后，也可以作为引导阅读者发现自身心理问题的手段。</p><p>而这个时代的内功高手，在使用大剂量还丹酶修炼内功之后，都会辅以“五停心观”或类似的心理学程序进行自检。有些人还会设置“若是检查结果差距过大，则锁死义体乃至自毁”的程序。</p><h2 id="军武道"><a href="#军武道" class="headerlink" title="军武道"></a>军武道</h2><p>军武道专注于用高度特化的大型义体或机械进行攻击，以及多机体操控。军武道是高度专业化的功法，强调使用普通人接触不到的巨型武器（如大型机械、坦克、航母、宇宙战舰等），对应不同的载具类型与规格衍生出不同的军武道技术。</p><p>与普通语境下的“内功”“外门”相比，军武强调“特化的义体”而非“算法”。比如说“大舰巨炮”，便是针对各种战车，各种战机，各种军舰。而“军阵”基础就是海量的机械。对于微末之人而言，军武道毫无意义。从这个设计上来说，军武道比起用来“起义”，更适合用来“镇压起义”，而它也确实曾是世界的统治者为了应对侠客起义而创造的武学。</p><p><strong>大舰巨炮流</strong></p><p><strong>战车道</strong></p><p><strong>坦克道</strong></p><p><strong>军道战阵流</strong></p><p><strong>无人机</strong></p><p>在如今的“武术形式分类学”当中，“无人机驾驭”被认为是“战阵流派”军武道的基本功，基本相当于核心力量训练之于智人武术家。枪炮道的极限狙击非常依赖无人机；内功高手也可以依靠无人机延伸自己内功的作用范围，互相争夺无人机的控制权也是内功战的重要部分。即使是更加偏向外门的武者，无人机也可以开拓视野、消除死角，降低被袭杀的风险。它还被广泛用于收集情报与侦察，比如记录监控设备的位置等。</p><p>无人机相关的武功，虽然被分类为“军武”，但也是武祖创造的。从武祖的设计思路来看，无人机压根就不是军武。鉴于武祖特殊的历史地位，所以这一套不一定有助于新人理解武术的分类法，依旧被一些老派的江湖人秉持了下来。</p><p>但是归根到底，无人机对军武道战阵来说也是极其重要的组成部分。无人机可以作为超声波发射源与弹药运载工具，甚至作为“悬空地雷”游走，封锁敌人三维运动的空间。还可以在无人机上挂载绳索，思路近似于二战中的防空气球。</p><p><strong>云岚覆日·无人机阵</strong></p><p>“云岚覆日阵”是一整套无人机群的动态控制算法，它通过去中心化的算法，利用无人机自身的计算资源执行分布式计算，让无人机集群自动调整彼此之间的相对位置，以应对各种不同的任务，如侦测大气流动，辅助极限狙击等。这一战阵除了用无人机，还可以用坦克、战机乃至于人摆出来。</p><h1 id="三、角色"><a href="#三、角色" class="headerlink" title="三、角色"></a>三、角色</h1><h2 id="向山"><a href="#向山" class="headerlink" title="向山"></a>向山</h2><p><strong>1.</strong> <strong>角色类型</strong></p><p>主角</p><p><strong>2.</strong> <strong>称号</strong></p><p>武道初祖，向山难越</p><p><strong>3.</strong> <strong>首次登场事件</strong></p><p>第一章</p><p><strong>4.</strong> <strong>简介</strong></p><p>在未知年代以仅剩一个头颅的形态苏醒于回收站镇并被尤基捡到，有一个名为”约格”的大敌。失去了昔日所有的记忆，但仍能记得自己奉为准则的侠义之道。</p><p><strong>5.</strong> <strong>生平轶事</strong></p><p>在回收站镇将尤基收为徒弟，剿灭荒野中作恶多端的绿林寨子，刺杀松鹰城的诸多高层，营救老侠客陶恩海，找回第八武神的遗产，攻破悖论城营救第九武神，摧毁地球庇护者的卫星系统。</p><p><strong>6.</strong> <strong>人格覆面</strong></p><p>【ω Chorme】“最终的基础”生物脑自带的人格。</p><p>【β Crime】“贝塔之罪”第八武神的遗产，内功特化。</p><p>【φ Fever】“斐之狂热”第九武神AI转化而来，口才特化，军武道特化。</p><p><strong>7.</strong> <strong>找回的记忆</strong></p><p>2005年出生于北平，在2028年参与“奥贡”项目之前于清华大学攻读博士学位。在“奥贡”项目结识了约格莫夫，祝心雨，英格丽德，大卫·克莱恩，阿纳托利等一批年轻学者。在2035年为了击破笼罩在人类文明之上的亡灵而决定成为“盗火者”，本着“进入已经成熟的体系，从内部改变它”的思路，沿着资本主义世界的道路向上攀登，和“奥贡”项目内的好友们共同缔造“超人类主义国际企业”，并与伙伴掀起了技术革命，改变了整个世界的面貌。六十年代末，技术革命的果实被窃国之人所篡夺。向山转而抛弃了自己过去的理念，化身为游击队员，发动“秘密侠义战争”，以“侠客”的外壳汇聚全球反抗力量。22世纪初，向山与同伴斩杀窃国者，缴获了技术构成的“权力”。但旋即，向山遭到了背叛。紧接着，他在“升华战争”中败给了约格莫夫。叛徒以“庇护者”自居，统治者现在的世界。</p><p><strong>8.</strong> <strong>角色语录</strong></p><p>1）</p><p>这就存在大大的问题呀。贵族、封建主到资本家、官僚，大家脑袋上的猴王一直没有变过嘛。只不过资本家与官僚总归比地主强，所以我们都觉得，这是一种进步，而且这种进步会一直持续下去。路线错了而已。</p><p>2）</p><p>——我们来创造一种新的技术吧。把开放获取、去中心化生产结合起来，做出任何人拿到就可以使用的东西……</p><p>——我要称之为“武功”……</p><p>3）</p><p>那群裸猿也是“智人”。裸猿之中，固然有数不尽的痴愚昏聩。但智人一万年的路上，也不尽是痴愚，更有智慧火花，有真侠真义。</p><p>4）</p><p>——我们来清理祖先给我们的负面遗产！</p><p>——我们来断绝猴王降世的生理基础！</p><p>——让人类摆脱自身基因的奴役！让每一个人都有机会成为自己想要成为的“那个自己”！</p><p>——我们是盗取天火之人！</p><p>5）</p><p>过去的我早就做好准备了。那个我什么都知道。他就是我，我只比他少一点点记忆而已。那个我知道很多东西……他懂的比现在的我更多。而我们的情绪是一致的。所以，我相信过去的我做出的决定——我怎么能背叛过去那个什么都知道的我呢？</p><p>6）</p><p>用人类的心灵为机器标定目标，用机器的力量将人类送达目标，才是技术发展的正道。</p><p>7）</p><p>侠义不是‘正义’，侠义是一种被包装的暴力。侠义或许在大方向上，与人类直观所描述的‘正义’接近，但是却绝非形而上的正义。</p><p>8）</p><p>自己的命也是命，惜命，就是尊重生命的一种体现。也只有足够尊重生命的人，才能表现出‘比生命更可贵之物’的可贵。另外，暴政者的力量也是万倍于侠客的。若是不珍惜性命，必定是看不到胜利的。</p><p>9）</p><p>确实，民众有时会表现出狂热而愚昧的一面——他们又不是佛陀或者菩萨。但与此同时，他们在绝大多数时候都平稳地支撑着历史的进程。与其责怪他们狂热，倒不如先思考一下他们为什么会变得愚昧变得疯狂。</p><p>很早的时候，有人跟我讲解过这个道理。所以我很早就决定此生的事业了。我绝不会轻易的改变自己的理想。退一万步来讲，为了一小撮人渣就否定自己十多年的信仰，那才是愚蠢。</p><h2 id="祝心雨"><a href="#祝心雨" class="headerlink" title="祝心雨"></a>祝心雨</h2><p><strong>1.</strong>  <strong>称号</strong></p><p>祝融，图灵</p><p><strong>2.</strong>  <strong>身份背景</strong></p><p>在2013年出生于淮夷，父母幼年离婚，在青少年期就表现出了极高的数学与编程天赋，跟随黑客“火德星君”行动多年后分道扬镳。此后使用“祝融”这一黑客代号活动，盗窃机密信息，行使她所认定的正义。在2030年前后因盗窃“奥贡”项目的数据而被逮捕，因向山的担保而获得一定程度的自由，后和向山相爱并同居。</p><p><strong>3.</strong>  <strong>简介</strong></p><p>祝心雨是超人类主义公司的重要一员，“赛博内功”的发明者，是侠义之道的创始人之一。在黑客时期与哈特曼互有胜负，义体化后的内功天下第一，被尊称为凌驾于所有境界以上的“图灵”。</p><p><strong>4.</strong>  <strong>生平轶事</strong></p><p>在武祖败亡后，一手参与了第二武神的诞生，但最后因无法面对第二武神而出走。目前行踪不知，与弟子们被一支庇护者舰队锁定，困在木星某个卫星之中但尚且安全。与第八武神相识时并不承认“武神”，后因盗窃科研骑士团的数据失手而被哈特曼锁定，第八武神为掩护图灵而牺牲自己，此后祝心雨公开承认第八武神的武神身份。第八武神的所作所为使她对武神的看法有所改观。</p><h2 id="陶恩海"><a href="#陶恩海" class="headerlink" title="陶恩海"></a>陶恩海</h2><p><strong>1.</strong> <strong>称号</strong></p><p>杏林公</p><p><strong>2.</strong> <strong>身份背景</strong></p><p>21世纪中叶是地坛医院的一名神经外科医生，后因伤医事件伤到手部而无法再做手术。后加入超人类主义公司并治好了自己的双手。</p><p><strong>3.</strong> <strong>简介</strong></p><p>几百年来一直是侠义之道的忠实践行者。七十年前襄助第九武神杀上约格莫夫的太阳御座，得知了第九武神的真相。</p><p><strong>4.</strong> <strong>生平轶事</strong></p><p>为了将火星的先进技术带回地球而与“神速王”交手，感染了“伊沃路”细胞，造成了类似癌症的后果，功力全失。向山为其进行了脑部手术去除了感染伊沃路细胞的组织，陶恩海建议他前往悖论城。目前疑似于非洲大陆活动，谋夺一部宇宙电梯。</p><h2 id="贾德尔"><a href="#贾德尔" class="headerlink" title="贾德尔"></a>贾德尔</h2><p><strong>1.</strong> <strong>称号</strong></p><p>瞬间爆炸单杀王</p><p><strong>2.</strong> <strong>简介</strong></p><p>北地侠客门派“红石门”的一员，被庇护者暗算灭门后逃出，重伤后被师兄松岛宏所救。后遭遇主角，受其帮助功力恢复并有所精进。</p><p><strong>3.</strong> <strong>生平轶事</strong></p><p>目前组织了北地群侠协助主角的行动。</p><h2 id="松岛宏"><a href="#松岛宏" class="headerlink" title="松岛宏"></a>松岛宏</h2><p><strong>1.</strong> <strong>简介</strong></p><p>松鹰城铁块流道场的师范，德高望重。退役运动员,曾夺得残奥会冠军，外功高强。暗地里与图灵一脉弟子TX-0有密切合作。</p><p><strong>2.</strong> <strong>生平轶事</strong></p><p>曾与两个同门师弟一同观看了第九武神当年的直播，三人因此对侠义心生向往。后来两人投身江湖，松岛宏却为了守护师承兼“守望江湖”，选择继续做一位武馆师范。</p><p>松岛宏曾在松鹰城与合作伙伴TX-0合力盗窃过本地科研骑士团的一些机密资料。在向山的牵引下，加深了与江湖人士的往来。后被庇护者所逼迫，杀死庇护者后成为侠客，与向山一同行动。</p><h2 id="博尔术"><a href="#博尔术" class="headerlink" title="博尔术"></a>博尔术</h2><p><strong>1.</strong> <strong>称号</strong></p><p>条子侠，天速星</p><p><strong>2.</strong> <strong>简介</strong></p><p>“RX天马流”的传人，一身武功以速度为主，第四武神理念的追随者。误入黑店被绿林洗脑，但是一直在凭借自身的意志力对抗心中的杀欲。</p><p><strong>3.</strong> <strong>生平轶事</strong></p><p>一位女孩被他所救后一直称他为“大侠”，这个女孩也是他对抗绿林记忆的重要动力。为了救女孩的性命自愿被主角锁拿，最后做为“条子侠”而牺牲。博尔术的牺牲改变了主角对绿林的看法。</p><h2 id="尤基"><a href="#尤基" class="headerlink" title="尤基"></a>尤基</h2><p><strong>1.</strong> <strong>身份背景</strong></p><p>在回收站镇捡到了主角的生物脑的基准人少年，向山的入门弟子。</p><p><strong>2.</strong> <strong>简介</strong></p><p>跟随主角学习侠义之道与赛博武功，目前内功能力通过了主角的考核，有了能“睁眼看世界”而不被庇护者轻易黑入后门的力量。</p><h2 id="万机之父"><a href="#万机之父" class="headerlink" title="万机之父"></a>万机之父</h2><p><strong>1.</strong> <strong>真名</strong></p><p>约格莫夫·弗伊格特</p><p><strong>2.</strong> <strong>居住地</strong></p><p>目前作为人类最高领袖“万机之父”，居住于太阳附近的御座戴森云中。</p><p><strong>3.</strong> <strong>简介</strong></p><p>21世纪最伟大的生物学家，“开放获取运动”的支持者。和尼娅古蒂共同破解了外星微生物的秘密，破解了“酶改造系统”。完善了将智人改造为基准人的技术体系。</p><p><strong>4.</strong> <strong>生平轶事</strong></p><p>在升华战争之前一直是向山忠实的盟友，在“秘密战争”期间因为地球生物大灭绝，精神状态陷入极不稳定的状态，逐渐丧失了对人类文明的信任，在夺回了“技术”的大权后因此拒绝将其归还给人民，而与向山决裂，并在阿耆尼王哈特曼的帮助下击败了向山，夺去了其所有记忆并将一部分公开在网络上。</p><h2 id="阿耆尼王"><a href="#阿耆尼王" class="headerlink" title="阿耆尼王"></a>阿耆尼王</h2><p><strong>1.</strong> <strong>真名</strong></p><p>贾库布·哈特曼</p><p><strong>2.</strong> <strong>简介</strong></p><p>21世纪以“阿耆尼”为代号活动的超级黑客，有不正常的爱国热情，志愿为合众国效力。目前正作为人类诸王之首镇守月球，压制整个地月系的侠客力量。内功天下第二，是军武道·战舰阵的最强高手。</p><p><strong>3.</strong> <strong>生平轶事</strong></p><p>在“秘密战争”期间作为窃国者的走狗，而后反水脱离窃国者，“秘密战争”结束后又被约格莫夫拉拢成为手下，与其联手击败了向山。在“奥贡”项目期间协助抓获了祝心雨。率军歼灭了第四，第七，第八武神。阿耆尼王忽视太空城内平民直接炮击第四武神所在太空城这一事件，被认为是完全摧毁旧人类社会共同想象的决定性事件。</p><h2 id="神速王"><a href="#神速王" class="headerlink" title="神速王"></a>神速王</h2><p><strong>真名</strong></p><p>隼·弗伊格特</p><p><strong>身份背景</strong></p><p>“万机之父”约格莫夫的养子。从非洲的内乱小国被救出的娃娃兵，童年时在难民营遇到神原尊，神原尊为其取名为“隼”，来形容他的速度极快。</p><p><strong>简介</strong></p><p>庇护者诸王之一，武祖之后赛博外功天下第一，义体可加速到光速的16%。大部分时间坐镇于“神速王庭”，执行各类科研任务。也会作为一支超高速机动部队参与太阳系各处的镇压侠义活动。大脑经过深度改造后强度堪比皮球。</p><h2 id="第四武神"><a href="#第四武神" class="headerlink" title="第四武神"></a>第四武神</h2><p><strong>1.</strong> <strong>身份背景</strong></p><p>诞生于木星太空城，第一个真性人格覆面。</p><p><strong>2.</strong> <strong>生平轶事</strong></p><p>夺取了一座太空城，提出了“守法如法在”的理念，在网络上传播，按照战前的方式经营太空城，重塑了侠义精神在升华战争后的理念，被庇护者以超视距打击连同太空城一同毁灭。</p><h2 id="第八武神"><a href="#第八武神" class="headerlink" title="第八武神"></a>第八武神</h2><p><strong>1.</strong> <strong>身份背景</strong></p><p>德拉克鲁兹城某个科研骑士团收养的孤女。</p><p><strong>2.</strong> <strong>简介</strong></p><p>割舍了自我成为向山，深入研究了人格覆面技术，可以将生物脑通过手术改造而获得他人的意识。一直默默的在出生地活动，将城内所有黑帮都改造为了自己的分身，借此修炼出了一身顶级的内功。唯一被图灵承认的武神。</p><p><strong>3.</strong> <strong>生平轶事</strong></p><p>在网络上与祝心雨有一面之缘，互相交流内功思路，最后选择掩护祝心雨而暴露身份，被阿耆尼王锁定。死前将自己的意识备份在黑谷一脉的电脑中等待之后的向山来取得，将自己研究的内功托付给好友阿冬，这份功法之后辗转被向山得到。在城外被阿耆尼王的舰炮轰杀，死前留下了遗言“我会再回来的”。备份的人格覆面被主角获得，存在于主角脑中。</p><h2 id="第九武神"><a href="#第九武神" class="headerlink" title="第九武神"></a>第九武神</h2><p><strong>1.</strong> <strong>简介</strong></p><p>自我认知为火星一位摇滚歌手，在火星从事地下宣传活动多年，与陶恩海，佛洛伦斯汇合后开始大规模行动，在阵前令万军倒戈，被公认是感染力最强的武神。</p><p><strong>2.</strong> <strong>生平轶事</strong></p><p>召开了一场整个太阳系都能听到的演唱会，在侠义凋零的年代给众多人心里留下了一抹擦不去的光芒。组织了一支精锐侠客分队杀向太阳的戴森云，在约格莫夫的御座得知了一切的真相，此后一直被困在悖论城作为羞辱侠义精神的一个符号。被向山解救后击杀了悖论城几乎所有的高级武馆，并且突入阿耆尼王的天星舰队，击毁了众多舰艇，最后自爆而亡。人格覆面被转码后存在于主角脑中。</p><h2 id="第十武神"><a href="#第十武神" class="headerlink" title="第十武神"></a>第十武神</h2><p><strong>1.</strong> <strong>简介</strong></p><p>一位外功极强的武神，当前最高多段发力记录保持者，可做到“一千三百九十四叠浪”，诞生于外行星，曾经试图冲击过悖论城与地球，同时被阿耆尼王的内功压制与被神速王牵制，只能转道火星阻止火星军港的重建。被阿耆尼王击杀。</p><h2 id="征天王"><a href="#征天王" class="headerlink" title="征天王"></a>征天王</h2><p><strong>1.</strong> <strong>真名</strong></p><p>大卫·克莱恩</p><p><strong>2.</strong> <strong>简介</strong></p><p>NASA最顶尖的工程师，理想就是在宇宙中生活。</p><p><strong>3.</strong> <strong>生平轶事</strong></p><p>在主持建造并发射了人类第一座大型宇宙空间站“伽利略”后就遭遇了“窃国之实”，身份被夺取，转入地下进行秘密活动。作为侠客们的后勤整备力量，教会了向山很多的工程知识。</p><h2 id="陆轩宇"><a href="#陆轩宇" class="headerlink" title="陆轩宇"></a>陆轩宇</h2><p><strong>1.</strong> <strong>身份背景</strong></p><p>21世纪的一名中国习武之人，主要修习截拳道。</p><p><strong>2.</strong> <strong>简介</strong></p><p>因为见义勇为救下一名小女孩而被卡车碾过失去了下半身，从创伤中恢复后开始以自媒体的方式分享武道精神。</p><p><strong>3.</strong> <strong>生平轶事</strong></p><p>被向山选中进行基准人以及义体化改造，将在2047年左右参加超人类企业举办的“天下第一武道会”向全世界证明义体相较于肉体的优越性。在改造过程中与陈锋相识，与其相谈甚欢，对于现代社会中武道的存在形式有了更深的理解。</p><h1 id="四、编年史"><a href="#四、编年史" class="headerlink" title="四、编年史"></a>四、编年史</h1><h2 id="第一卷-独在异乡为异客"><a href="#第一卷-独在异乡为异客" class="headerlink" title="第一卷 独在异乡为异客"></a>第一卷 独在异乡为异客</h2><p>第一章-第四十章</p><p>回收站镇，撤销庇护</p><p>第四十一章-第七十九章</p><p>前往荒野，Z组织</p><h2 id="第二卷-真名实姓"><a href="#第二卷-真名实姓" class="headerlink" title="第二卷 真名实姓"></a>第二卷 真名实姓</h2><p>第一章-第四十三章</p><p>向奥贡进发，红石门</p><p>第四十四章-第七十九章</p><p>隐世门派，城市内乱</p><p>第八十章-第一百三十九章</p><p>美以美大楼，神秘的六龙教</p><h2 id="第三卷-谁悲失路之人"><a href="#第三卷-谁悲失路之人" class="headerlink" title="第三卷 谁悲失路之人"></a>第三卷 谁悲失路之人</h2><p>第一章-第五十章</p><p>老侠客的逃亡，超人类主义股份有限公司</p><p>第五十一章-第一百零九章</p><p>第八武神，钻地龙</p><p>第一百一十章-第一百三十六章</p><p>第八武神的遗产，回家</p><h2 id="第四卷-真·武神转生"><a href="#第四卷-真·武神转生" class="headerlink" title="第四卷 真·武神转生"></a>第四卷 真·武神转生</h2><p>第一章-第五十一章</p><p>泄密事件，武神们的故事</p><p>第五十二章-第八十八章</p><p>图灵一脉，考试</p><p>第八十九章-第一百二十七章</p><p>向山的策略，幽鹤骑士团</p><p>第一百二十八章-第一百五十九章</p><p>得到制冷设备，天机的故事</p><p>第一百六十章-第二百十二章</p><p>对付六龙教，幽鹤城</p><p>第二百二十三章-第二百八十五章</p><p>物种更改，基因改造手术</p><p>第二百八十六章-第三百二十四章</p><p>目标松鹰城，回收站镇的屠杀</p><p>第三百二十五章-第三百八十九章</p><p>发生暴乱，攻打悖论城</p>]]></content>
    
    
    <categories>
      
      <category>小说</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>人格面具与扮演法</title>
    <link href="/2023/11/20/%E4%BA%BA%E6%A0%BC%E9%9D%A2%E5%85%B7%E4%B8%8E%E6%89%AE%E6%BC%94%E6%B3%95/"/>
    <url>/2023/11/20/%E4%BA%BA%E6%A0%BC%E9%9D%A2%E5%85%B7%E4%B8%8E%E6%89%AE%E6%BC%94%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>人格面具理论是荣格提出的，是一种关于自我认知和表达的理论，本文旨在讨论此理论与广为传播的网络小说《诡秘之主》中的“扮演法”概念与《赛博英雄传》中的“人格覆面”概念，以及卢梭的剧场理论等概念形成的有趣化学反应。</p><p>在开始文章的讨论之前，先介绍一下设定：</p><ul><li><p>人格面具</p><p>荣格将一个人的人格比喻为面具，在不同的社交场合人们会表现出不同的形象，也就是戴上不同的面具（使形象化和具象化）</p></li><li><p>神格面具</p></li><li><p>扮演法</p></li></ul><p>​《诡秘之主》中，角色可以选择一个有九个“序列”的“途径”，然后经过仪式和魔药来晋升序列，每个途径的九个序列都有对应的名称，如“小丑”，“水手”，“学徒”等等，服用魔药者可以根据序列的名称进行相应的模仿和扮演，以此来增加对于当前序列的特殊能力的掌握</p><ul><li>人格覆面<ul><li>假性人格覆面 [spurious persona]</li><li>真性人格覆面 []</li></ul></li></ul><p>不难发现，诡秘之主的“扮演法”实际上就是</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>心理学</tag>
      
      <tag>诡秘之主</tag>
      
      <tag>赛博英雄传</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>apt命令</title>
    <link href="/2023/11/20/apt%E5%91%BD%E4%BB%A4/"/>
    <url>/2023/11/20/apt%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h4 id="一条命令更新并升级"><a href="#一条命令更新并升级" class="headerlink" title="一条命令更新并升级"></a>一条命令更新并升级</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt update &amp;&amp; sudo apt upgrade -y<br></code></pre></td></tr></table></figure><p>-y安装过程中有需要用户确认的步骤时，可以选择全部为“yes”</p><h4 id="指定版本安装"><a href="#指定版本安装" class="headerlink" title="指定版本安装"></a>指定版本安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install &lt;package_name&gt;=&lt;version_number&gt;<br></code></pre></td></tr></table></figure><h4 id="清理不再使用的依赖和库文件"><a href="#清理不再使用的依赖和库文件" class="headerlink" title="清理不再使用的依赖和库文件"></a>清理不再使用的依赖和库文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt autoremove<br></code></pre></td></tr></table></figure><h4 id="修复安装"><a href="#修复安装" class="headerlink" title="修复安装"></a>修复安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt -f install<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常见奇幻设定及其问题总结</title>
    <link href="/2023/11/19/%E5%B8%B8%E8%A7%81%E5%A5%87%E5%B9%BB%E8%AE%BE%E5%AE%9A%E5%8F%8A%E5%85%B6%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    <url>/2023/11/19/%E5%B8%B8%E8%A7%81%E5%A5%87%E5%B9%BB%E8%AE%BE%E5%AE%9A%E5%8F%8A%E5%85%B6%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>本文整理了常见影视作品，神话，志怪故事，小说中的设定及槽点</p><ul><li>请神<br>  或者说是出马，神打，将某种灵体召唤并附身，理想情况下可以形成英灵殿那种设定，并在出现杰出人物之后将其召唤并解决问题，但是由于前面成为灵体的个体太过强力了，很容易在出现这样一个杰出个体之后让体系内的个体强大自身不如直接请神，然后整个体系都变成这个功能的附庸。还有一个比较有槽点的是，如果一个个体的杰出能力本身就是优秀的召唤能力，然后这个个体进入了“英灵殿”，那请这种个体算不算嵌套召唤啊？这个系统支持递归调用吗？是不是可以开发基于神打系统的逻辑门和计算机啊？</li></ul>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>小说</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>梗与解构主义</title>
    <link href="/2023/11/19/%E6%A2%97%E4%B8%8E%E8%A7%A3%E6%9E%84%E4%B8%BB%E4%B9%89/"/>
    <url>/2023/11/19/%E6%A2%97%E4%B8%8E%E8%A7%A3%E6%9E%84%E4%B8%BB%E4%B9%89/</url>
    
    <content type="html"><![CDATA[<p>网络用语和梗是一种新时代的切口和赛博黑话，而这种梗的创作是新时代的个体对新时代话语权的争夺和对权威的消解，而梗小鬼和烂梗和云的出现正是年轻的个体急于融入互联网团体又东施效颦的写照,本文旨在收集整理一些日常生活中可能会用到的梗和一些有趣的使用场景，以达到信手拈来的目的。</p><ul><li>刃牙道</li><li>海虎</li><li>尚未分类<ul><li>你在橘子树上挂着不要动我给你买个火车站去</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>梗</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux操作</title>
    <link href="/2023/11/19/Linux%E6%93%8D%E4%BD%9C/"/>
    <url>/2023/11/19/Linux%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h4 id="Linux换源"><a href="#Linux换源" class="headerlink" title="Linux换源"></a>Linux换源</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo vim /etc/apt/sources.list<br><br><span class="hljs-comment">#中科大</span><br>deb http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib<br>deb-src http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib<br><span class="hljs-comment">#阿里云</span><br>deb http://mirrors.aliyun.com/kali kali-rolling main non-free contrib<br>deb-src http://mirrors.aliyun.com/kali kali-rolling main non-free contrib<br><span class="hljs-comment">#清华大学</span><br>deb http://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free<br>deb-src https://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free<br></code></pre></td></tr></table></figure><h4 id="kali安装工具集"><a href="#kali安装工具集" class="headerlink" title="kali安装工具集"></a>kali安装工具集</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install kali-linux-default<br>包含了Kali linux默认的工具集，大概有9GB左右<br>sudo apt install kali-linux-everything<br>包含了所有的kali工具，大小非常大，约11GB左右<br></code></pre></td></tr></table></figure><h4 id="转移WSL下安装的linux系统位置"><a href="#转移WSL下安装的linux系统位置" class="headerlink" title="转移WSL下安装的linux系统位置"></a>转移WSL下安装的linux系统位置</h4><p>常见的教程是手写命令行，比较麻烦，可以直接用GitHub上写好的<a href="https://github.com/pxlrbt/move-wsl">powershell脚本</a></p><h4 id="Linux命令后台运行"><a href="#Linux命令后台运行" class="headerlink" title="Linux命令后台运行"></a>Linux命令后台运行</h4><ul><li>在执行程序时命令的最后加&amp;</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">./test.py &amp;<br><span class="hljs-comment"># 在后台执行文件</span><br>ps -ef|grep <span class="hljs-built_in">test</span><br><span class="hljs-comment"># 查看是否在后台运行</span><br>killall <span class="hljs-built_in">test</span><br></code></pre></td></tr></table></figure><p><strong>缺点：</strong> 此方法查看运行日志不方便</p><h4 id="发送邮件"><a href="#发送邮件" class="headerlink" title="发送邮件"></a>发送邮件</h4><p>经过了<strong>一整天</strong>的折腾之后，事实证明用linux自带的sendmail和mailx发邮件是相当愚蠢的，而且我也没有在网上找到21年之后有什么相关的技术博客，所以最终我选择使用python的yagmail库，问题迎刃而解了，mad人生苦短</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install yagmail<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> yagmail<br>mail=yagmail.SMTP(<span class="hljs-string">&#x27;发送邮箱的账号&#x27;</span>，<span class="hljs-string">&#x27;发送邮箱的授权码&#x27;</span>，<span class="hljs-string">&#x27;smtp163.com&#x27;</span>)<br>mail.send(<span class="hljs-string">&#x27;接受邮件的账号&#x27;</span>，<span class="hljs-string">&quot;(标题)测试邮件&quot;</span>,<span class="hljs-string">&quot;邮件文本&quot;</span>)<br>mail.close()<br><br><span class="hljs-comment">#多个收件人</span><br>receiver=[<span class="hljs-string">&quot;xxx@qq.com&quot;</span>,<span class="hljs-string">&quot;xxx@163.com&quot;</span>]<br><span class="hljs-comment">#文本内容</span><br>text=<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Dear Toph,\n\n</span><br><span class="hljs-string">这是一段文本内容</span><br><span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">&quot;</span><br></code></pre></td></tr></table></figure><h4 id="将命令添加到环境变量中"><a href="#将命令添加到环境变量中" class="headerlink" title="将命令添加到环境变量中"></a>将命令添加到环境变量中</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 以miniconda举例</span><br><span class="hljs-comment"># 已将miniconda3安装到/home/homovexillues/miniconda3</span><br><span class="hljs-comment"># 使用的是bash shell，配置~/.bashrc，如果是别的shell也可以配置~/.zshrc 或 ~/.cshrc</span><br>vim ~/.bashrc<br><span class="hljs-comment"># 在配置文件中添加如下内容</span><br><span class="hljs-built_in">export</span> PATH=/home/homovexillues/miniconda3/conda/bin:<span class="hljs-variable">$PATH</span><br><span class="hljs-comment"># 然后关闭并保存配置文件，运行</span><br><span class="hljs-built_in">source</span> ~/.bashrc<br><span class="hljs-comment"># 重新加载配置文件以使之生效</span><br></code></pre></td></tr></table></figure><h4 id="重启bash"><a href="#重启bash" class="headerlink" title="重启bash"></a>重启bash</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> ~/.bashrc <span class="hljs-comment">#可以使bash读取最新配置文件，但不会改变当前的进程ID和环境变量</span><br><span class="hljs-built_in">exec</span> bash <span class="hljs-comment"># 启动一个新的bash进程，同时继承当前的进程ID和环境变量</span><br></code></pre></td></tr></table></figure><h4 id="添加一个用户"><a href="#添加一个用户" class="headerlink" title="添加一个用户"></a>添加一个用户</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">adduser homojupyter <span class="hljs-comment"># 添加一个用户</span><br>su homojupyter <span class="hljs-comment"># 切换到此用户</span><br></code></pre></td></tr></table></figure><h4 id="赋予sudo权限"><a href="#赋予sudo权限" class="headerlink" title="赋予sudo权限"></a>赋予sudo权限</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 编辑/etc/sudoers配置文件</span><br><span class="hljs-comment">## Allow root to run any commands anywhere</span><br>root    ALL=(ALL)       ALL<br>homojupyter  ALL=(ALL)       ALL<br></code></pre></td></tr></table></figure><h4 id="Linux系统文档改为中文"><a href="#Linux系统文档改为中文" class="headerlink" title="Linux系统文档改为中文"></a>Linux系统文档改为中文</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 先下载中文语言包</span><br>apt install language-pack-zh-hans<br><span class="hljs-comment"># 更新系统默认语言</span><br>apt update-locale LANG=zh_CN.UTF-8<br><span class="hljs-comment"># 重启系统或重新登录让语言设置生效</span><br>reboot<br></code></pre></td></tr></table></figure><h4 id="查看系统版本"><a href="#查看系统版本" class="headerlink" title="查看系统版本"></a>查看系统版本</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /etc/os-release<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>WSL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vim插件配置</title>
    <link href="/2023/11/18/Vim%E6%8F%92%E4%BB%B6%E9%85%8D%E7%BD%AE/"/>
    <url>/2023/11/18/Vim%E6%8F%92%E4%BB%B6%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<p>使用**<a href="https://github.com/junegunn/vim-plug">vim-plug</a>**插件来安装和管理插件，需要将plug.vim文件复制到</p><ul><li>WindwosC:\Program Files\Neovim\share\nvim\runtime\autoload</li><li>Linux~&#x2F;.local&#x2F;share&#x2F;nvim&#x2F;site&#x2F;autoload&#x2F;plug.vim</li></ul><p>然后在</p><ul><li>WindowsC:\Users\用户名\AppData\Local\nvim\</li><li>Linux~&#x2F;.config&#x2F;nvim&#x2F;init.vim</li></ul><p>中创建init.vim文件,如果没有这个文件夹就自己创建一个</p><figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs leaf">call plug<span class="hljs-punctuation">#</span><span class="hljs-keyword">begin</span><span class="hljs-params">(&#x27;&#x27;)</span><br><br>Plug &#x27;插件名&#x27;<br><br>call plug<span class="hljs-punctuation">#</span><span class="hljs-keyword">end</span><span class="hljs-params">()</span><br></code></pre></td></tr></table></figure><p>然后在nvim里执行:PlugIntall即可开始安装</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker使用</title>
    <link href="/2023/11/17/Docker%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/11/17/Docker%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>docker中的镜像，容器和仓库</p><ul><li><p>镜像</p><p>镜像是一个只读的模板，可以用来创建容器</p></li><li><p>容器</p><p>容器是docker的运行环境，提供了一个独立的可移植的环境，可以在这个环境中运行应用程序，是一个运行实例</p></li><li><p>仓库</p><p>用来存储docker镜像的地方，用来管理和存储docker的镜像</p></li></ul><p>镜像是比容器更抽象的东西，镜像就是食谱或者说建筑图纸，容器就是根据食谱和建筑图纸做出来的菜和盖出来的房子</p><p>docker使用client-server架构模式，Docker client和Docker Daemon之间通过Socket和RESTful API进行通信</p><p>Docker daemon即服务端的守护进程，负责管理Docker的各种资源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs bash">snap install docker<br><br>docker-compose pull<br><span class="hljs-comment"># 从Docker Compose文件中定义的服务所需的镜像从仓库中拉取镜像</span><br>docker-compose up -d<br><span class="hljs-comment"># 用此命令来构建并自动创建或重建容器，然后启动它们，并建立它们之间的网络连接，-d表示以后台模式运行容器，不会占用终端的输出</span><br>docker images<br><span class="hljs-comment"># 查看目前我所有的docker镜像</span><br>docker rmi my_image_id<br><span class="hljs-comment"># 删除名字为my_image_id的镜像</span><br>docker prune -a<br><span class="hljs-comment"># 删除所有没有被使用的dockr镜像</span><br>docker rmi $(docker images -q)<br><span class="hljs-comment"># 删除所有docker镜像</span><br>docker scout quickview<br><span class="hljs-comment"># 用docker scout来显示docker镜像的快速概览</span><br>docker ps -a<br><span class="hljs-comment"># 查看所有容器的名字</span><br>docker ps<br><span class="hljs-comment"># 查看所有正在运行的容器的名字</span><br>docker logs container_name<br><span class="hljs-comment"># 查看容器的日志信息</span><br>docker logs -f container_name<br><span class="hljs-comment"># 实时查看容器的日志信息</span><br>docker restart container_name<br><span class="hljs-comment"># 重启docker容器</span><br></code></pre></td></tr></table></figure><h4 id="reader3"><a href="#reader3" class="headerlink" title="reader3"></a>reader3</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">从GitHub上下载源码，解压到文件夹并<br></code></pre></td></tr></table></figure><h4 id="calibre-web"><a href="#calibre-web" class="headerlink" title="calibre-web"></a>calibre-web</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 报错</span><br>/usr/bin/python: can<span class="hljs-string">&#x27;t open file &#x27;</span>/calibre-web/app/cps.py<span class="hljs-string">&#x27;: [Errno 2] No such file or directory</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Edge浏览器手势</title>
    <link href="/2023/11/17/Edge%E6%B5%8F%E8%A7%88%E5%99%A8%E6%89%8B%E5%8A%BF/"/>
    <url>/2023/11/17/Edge%E6%B5%8F%E8%A7%88%E5%99%A8%E6%89%8B%E5%8A%BF/</url>
    
    <content type="html"><![CDATA[<p>微软的老毛病——这个功能真不错！现在让我们在下一次更新之后把它砍了！</p><p>在又一次的更新完系统之后发现鼠标手势控制消失之后，上网找到了解决方案</p><ol><li>在浏览器地址栏中输入<code>edge://flags/</code>进入实验功能配置页面，搜索出Mouse Gesture后将Default选项改为Enable</li><li>在最新的版本中可以去设置-外观里打开鼠标手势控制选项</li></ol><p>不确定究竟是哪个操作具体生效的，但是也懒得折腾了，记录一下</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Vim基本键位</title>
    <link href="/2023/11/17/Vim%E5%9F%BA%E6%9C%AC%E9%94%AE%E4%BD%8D/"/>
    <url>/2023/11/17/Vim%E5%9F%BA%E6%9C%AC%E9%94%AE%E4%BD%8D/</url>
    
    <content type="html"><![CDATA[<ul><li><p><strong>x键删除字符</strong></p></li><li><p>dw删除整个单词</p><ul><li>d2w删除接下来的两个单词</li></ul></li><li><p>d$删除到行尾</p></li><li><p>w到下一个单词头</p></li><li><p>e到下一个单词尾</p></li><li><p>$到行尾</p></li><li><p>u撤回</p><ul><li>Ctrl+R反撤回</li></ul></li><li><p>0到行首，包括空格</p></li><li><p>^到行首，不包括空格</p></li><li><p>G到文本最好一行首</p></li><li><p>gg到文本首行</p></li><li><p>number motion执行几次行动</p><ul><li>38j向下移动38次</li></ul></li><li><p>dd删除一整行</p></li><li><p>p在光标处粘贴先前删除的文本</p></li><li><p>r以替换光标处的字符</p><ul><li>移动光标到第一个错误，键入r和要更正的字符</li></ul></li><li><p>ce删除直到单词末尾的内容并进入编辑模式</p><ul><li>cw删除整个单词并进入编辑模式</li><li>c$删除直到行末并进入编辑模式</li></ul></li><li><p>Ctrl+G显示你在文档中的位置</p></li><li><p>number+G前往第数字行</p></li><li><p>&#x2F;+搜索的单词</p><ul><li>向下搜索下一个单词n</li><li>向上搜索下一个单词N</li></ul></li><li><p>？+向上搜索的单词</p></li><li><p>Ctrl+O回到之前的那个位置，Ctrl+I前进位置</p></li><li><p>%将光标移动到它对应的匹配括号上</p></li><li><p>:&#x2F;s&#x2F;old&#x2F;new&#x2F;g将一行中的old替换为new</p></li><li><p>:&#x2F;#,#s&#x2F;old&#x2F;new&#x2F;g其中#,#是更改的行号范围</p></li><li><p>:&#x2F;%s&#x2F;old&#x2F;new&#x2F;g更改全文件的old内容</p></li><li><p>:&#x2F;%s&#x2F;old&#x2F;new&#x2F;gc更改全文及的old内容，并给出替换与否的提示</p></li><li><p>:! 执行外部命令，如:!ls或者:!dir</p></li><li><p>:w Filename.**保存文件并更改文件名或者类型</p></li><li><p>v按住以选择</p></li><li><p>o光标下插入新的一行</p></li><li><p>O光标上插入新的一行</p></li><li><p>A在一句的末尾开始插入内容</p></li><li><p>R插入不止一句内容</p></li><li><p><strong>y复制用v的选中内容</strong>，用p粘贴内容**</p></li><li><p>选中后U将内容变成大写，u将内容变成小写，~将大小翻转</p></li><li><p>:e ~&#x2F;.vimrc 编辑Unix依赖</p></li><li><p>:e $VIM&#x2F;_vimrc编辑Windows依赖</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vim基础配置</title>
    <link href="/2023/11/17/Vim%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/"/>
    <url>/2023/11/17/Vim%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<p>vim的全局配置一般修改<code>/etc/vim/vimrc</code>或者<code>/etc/vimrc</code>，对所有用户生效，修改<code>~/.vimrc</code>仅对个人用户生效，或者在单词编辑中可以直接在命令行中写<code>set number</code>这种命令生效</p><p>Window下vim的配置文件名为_vimrc，位于vim安装目录下</p><p>下面是一个nvim的基础配置:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs text">-- 开启语法高亮<br>vim.o.syntax = &quot;enable&quot;<br>-- 显示相对行号<br>vim.o.relativenumber = true<br>-- 显示行号<br>vim.o.number = true<br>-- 高亮所在行<br>vim.o.cursorline = true<br>-- 自动换行<br>vim.o.wrap = true<br>-- 显示光标位置<br>vim.o.ruler = true<br>-- 边输入边搜索<br>vim.o.incsearch = true<br>-- 开启搜索匹配高亮<br>vim.o.hlsearch = true<br>-- 搜索时自行判断是否需要忽略大小写<br>vim.o.smartcase = true<br><br>-- tab键转换为 4 个空格<br>vim.o.tabstop = 4<br>vim.o.softtabstop = 4<br>vim.o.shiftwidth = 4<br>-- 新行对齐当前行，tab转换为空格<br>vim.o.expandtab = true<br>vim.bo.expandtab = true<br>vim.o.autoindent = true<br>vim.bo.autoindent = true<br>vim.o.smartindent = true<br><br>-- &lt;&lt; &gt;&gt; 缩进时移动的长度<br>vim.o.shiftwidth = 4<br>vim.bo.shiftwidth = 4<br><br>-- 使用jk移动光标时，上下方保留8行<br>vim.o.scrolloff = 8<br>vim.o.sidescrolloff = 8<br><br>-- 设置自动折叠<br>vim.o.smartindent = true<br>-- 历史命令最多保存1000条<br>vim.o.history = 1000<br>-- 显示空白字符<br>vim.o.list = true<br>-- 样式<br>vim.o.background = &quot;dark&quot;<br>vim.o.termguicolors = true<br>vim.opt.termguicolors = true<br></code></pre></td></tr></table></figure><p>上述代码中，<code>vim.o.syntax = &quot;enable&quot;</code> 和<code>syntax on</code>的区别是，</p><p>前者使用了lua语法来设置vim的语法高亮选项，可以自定义颜色；后者用vimscript语言来设置vim的语法高亮，用vim默认的颜色。</p><p>下面列举几个vimscript常用命令，可以在nvim和vim通用</p><h5 id="vimscript"><a href="#vimscript" class="headerlink" title="vimscript"></a>vimscript</h5><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">set</span> number 打开行前数字<br>syntax <span class="hljs-comment">on</span> 代码高亮<br><span class="hljs-keyword">set</span> <span class="hljs-comment">autoindent</span> 下一行和上一行自动缩进一致<br><span class="hljs-keyword">set</span> <span class="hljs-comment">showmatch</span> 光标遇到括号自动高亮另一个<br><span class="hljs-keyword">set</span> <span class="hljs-comment">incsearch</span> 搜索模式时，随着输入光标自动跳转到匹配结果<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建骰子机器人的过程</title>
    <link href="/2023/11/17/%E6%90%AD%E5%BB%BA%E9%AA%B0%E5%AD%90%E6%9C%BA%E5%99%A8%E4%BA%BA%E7%9A%84%E8%BF%87%E7%A8%8B/"/>
    <url>/2023/11/17/%E6%90%AD%E5%BB%BA%E9%AA%B0%E5%AD%90%E6%9C%BA%E5%99%A8%E4%BA%BA%E7%9A%84%E8%BF%87%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<ul><li>从GitHub上下载release到服务器上，用tar解压并安装为系统服务，开始运行服务，</li><li>出现问题：在浏览器用公网ip无法找到开启的UI界面</li><li>解决问题：没打开服务所需的对应端口</li><li>出现问题：无法直接用骰子机器人对接QQ账号，需要签名服务器</li><li>解决问题：暂时未能解决</li><li>成功将骰子机器人部署到KooK平台</li><li>根据官方引导下载.js插件:<ul><li>定时任务2.0.0</li><li>每日新闻与历史上的今天</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>sealdice</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>线性表的增删改查</title>
    <link href="/2023/11/17/%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/"/>
    <url>/2023/11/17/%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/</url>
    
    <content type="html"><![CDATA[<h4 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h4>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>遇到的bug和解决方法</title>
    <link href="/2023/11/17/%E9%81%87%E5%88%B0%E7%9A%84bug%E5%92%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <url>/2023/11/17/%E9%81%87%E5%88%B0%E7%9A%84bug%E5%92%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h4 id="YAMLException-end-of-the-stream-or-a-document-separator-is-expected-at-line-2-column-8"><a href="#YAMLException-end-of-the-stream-or-a-document-separator-is-expected-at-line-2-column-8" class="headerlink" title="YAMLException: end of the stream or a document separator is expected at line 2, column 8:"></a>YAMLException: end of the stream or a document separator is expected at line 2, column 8:</h4><ul><li>非常愚蠢的错误，”:”后面加空格即可解决</li></ul><h4 id="无法将“pwsh”项识别为-cmdlet、函数、脚本文件或可运行程序的名称。请检查名称的拼写，如果包括路径，请确保路径正确，然后再试一次"><a href="#无法将“pwsh”项识别为-cmdlet、函数、脚本文件或可运行程序的名称。请检查名称的拼写，如果包括路径，请确保路径正确，然后再试一次" class="headerlink" title="无法将“pwsh”项识别为 cmdlet、函数、脚本文件或可运行程序的名称。请检查名称的拼写，如果包括路径，请确保路径正确，然后再试一次"></a>无法将“pwsh”项识别为 cmdlet、函数、脚本文件或可运行程序的名称。请检查名称的拼写，如果包括路径，请确保路径正确，然后再试一次</h4><ul><li>Power shell的默认版本太低了，去<a href="https://learn.microsoft.com/zh-cn/powershell/scripting/install/installing-powershell-on-windows?view=powershell-7.3#installing-the-msi-package">微软官方</a>下载并安装一下新版的Power shell即可</li></ul><p>​可以使用</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$PSVersionTable</span>.PSVersion<br></code></pre></td></tr></table></figure><p>来查看Powershell的版本，会返回一个这样的内容</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">Major  Minor  Patch  PreReleaseLabel</span><br><span class="hljs-literal">-----</span>  <span class="hljs-literal">-----</span>  <span class="hljs-literal">-----</span>  <span class="hljs-literal">---------------</span><br><span class="hljs-comment">7      1      0</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bug</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>编程中遇到的非常好的各种文章和网站</title>
    <link href="/2023/11/17/%E7%BC%96%E7%A8%8B%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%9D%9E%E5%B8%B8%E5%A5%BD%E7%9A%84%E5%90%84%E7%A7%8D%E6%96%87%E7%AB%A0%E5%92%8C%E7%BD%91%E7%AB%99/"/>
    <url>/2023/11/17/%E7%BC%96%E7%A8%8B%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%9D%9E%E5%B8%B8%E5%A5%BD%E7%9A%84%E5%90%84%E7%A7%8D%E6%96%87%E7%AB%A0%E5%92%8C%E7%BD%91%E7%AB%99/</url>
    
    <content type="html"><![CDATA[<h4 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h4><ul><li><p><strong><a href="https://www.zhihu.com/column/c_1527964562929893376">从零开始配置vim</a></strong> 来自知乎<a href="https://www.zhihu.com/people/jeccica-20">Masimaro</a></p></li><li><p><strong><a href="https://www.zhihu.com/column/c_1497149473017442304">vim使用技巧 </a></strong> 来自知乎<a href="https://www.zhihu.com/people/jeccica-20">Masimaro</a></p></li></ul><h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h4><ul><li><a href="https://xiaolincoding.com/os/6_file_system/file_system.html#%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%BB%84%E6%88%90">7.1 文件系统全家桶 </a>来自博客<a href="https://xiaolincoding.com/">小林coding</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>分享</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Python-jupyter</title>
    <link href="/2023/11/17/Python-jupyter/"/>
    <url>/2023/11/17/Python-jupyter/</url>
    
    <content type="html"><![CDATA[<h4 id="Jupyter-notebook转markdown"><a href="#Jupyter-notebook转markdown" class="headerlink" title="Jupyter notebook转markdown"></a>Jupyter notebook转markdown</h4><p>需要的库是<code>nbconbert</code> ，它依赖库<code>pandoc</code> </p><blockquote><p><em>Ps.我看到这个库名的时候脑子里第一反应是”牛逼的转换器“（捂脸），什么牛逼哄哄的能量瓶小伙啊</em></p><p><em>Ps.Ps. 用这个<a href="https://github.com/pyppeteer/pyppeteer">pyppeteer&#x2F;pyppeteer</a>库可以转换为pdf</em></p></blockquote><p>命令为：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">jupyter nbconvert xxx<span class="hljs-selector-class">.ipynb</span> <span class="hljs-attr">--to</span> markdown<br></code></pre></td></tr></table></figure><p>如果xxx.ipynb中有图片的话，会自动保存至当前xxx_files目录下，记得将图片相关文件一并携带，否则无法显示</p><p>批量转换:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">jupyter nvconvert --to markdown *.ipynb<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux有趣小工具记录</title>
    <link href="/2023/11/17/Linux%E6%9C%89%E8%B6%A3%E5%B0%8F%E5%B7%A5%E5%85%B7%E8%AE%B0%E5%BD%95/"/>
    <url>/2023/11/17/Linux%E6%9C%89%E8%B6%A3%E5%B0%8F%E5%B7%A5%E5%85%B7%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h4 id="cmatrix"><a href="#cmatrix" class="headerlink" title="cmatrix"></a>cmatrix</h4><p>使用任何包管理器都可以直接下载的工具，堪称“抖音黑客风”之典范，安装完成后可直接用“cmatrix”命令来将终端界面变成尼奥视角，非常有“科幻感”和“骇入感”</p><h4 id="sl"><a href="#sl" class="headerlink" title="sl"></a>sl</h4><p>因为打ls的时候经常会打错，于是出现了这么个非常整蛊的工具，只要你打错成sl并回车了的话，一辆字符小火车就会从屏幕上开过…</p><h4 id="cool-retro-term"><a href="#cool-retro-term" class="headerlink" title="cool retro term"></a><a href="https://github.com/Swordfish90/cool-retro-term">cool retro term</a></h4><p>一个非常有趣的终端主题，可以将终端样式变为crt显示器的样子，就是有点吃配置，核显可能会有点卡</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>程序员笑话集</title>
    <link href="/2023/11/16/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%AC%91%E8%AF%9D%E9%9B%86/"/>
    <url>/2023/11/16/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%AC%91%E8%AF%9D%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<p>程序员笑话是程序员界的一大瑰宝，不可不尝（乐）</p><p>本文用以搜集一些在网上找到的程序员笑话以供我自己和看到这篇文章的人图一乐，因为解释笑点本身会杀死笑话的乐趣，我会另开一篇文章以解释笑话内涵的知识</p><ol><li><p>我印象最深刻的笑话</p><p>老婆给当程序员的老公打电话</p><p>“下班顺路买一斤包子回来，如果遇到卖西瓜的就买一个”</p><p>然后程序员带着一个包子回家了</p><p>老婆勃然大怒</p><p>”我电话里怎么跟你说的？你就买一个包子回来？“</p><p>”啊？我看到卖西瓜的了啊？“</p></li><li><p>一个测试工程师走进一家酒吧，要了一杯啤酒</p><p>一个测试工程师走进一家酒吧，要了一杯咖啡</p><p>一个测试工程师走进一家酒吧，要了0.7杯啤酒</p><p>一个测试工程师走进一家酒吧，要了-1杯啤酒</p><p>一个测试工程师走进一家酒吧，要了2^32杯啤酒</p><p>一个测试工程师走进一家酒吧，要了一杯洗脚水</p><p>一个测试工程师走进一家酒吧，要了一杯蜥蜴</p><p>一个测试工程师走进一家酒吧，要了一份asdfQwer@24dg!&amp;*(@</p><p>一个测试工程师走进一家酒吧，什么也没要</p><p>一个测试工程师走进一家酒吧，又走出去又从窗户进来又从后门出去从下水道钻进来</p><p>一个测试工程师走进一家酒吧，又走出去又进来又出去又进来又出去，最后在外面把老板打了一顿</p><p>一个测试工程师走进一</p><p>一个测试工程师走进一家酒吧，要了一杯烫烫烫的锟斤拷</p><p>一个测试工程师走进一家酒吧，要了NaN杯Null</p><p>1T测试工程师冲进一家酒吧，要了500T啤酒咖啡洗脚水野猫狼牙棒奶茶</p><p>1T测试工程师把酒吧拆了</p><p>一个测试工程师化装成老板走进一家酒吧，要了500杯啤酒并且不付钱</p><p>一万个测试工程师在酒吧门外呼啸而过</p><p>一个测试工程师走进一家酒吧，要了一杯啤酒’;DROP TABLE 酒吧</p><p>测试工程师们满意地离开了酒吧。然后一名顾客点了一份炒饭，酒吧炸了</p></li><li><p>来一个黑客军团笑话</p></li></ol><p>​你地址多少？ What‘s your address?</p><p>​173.168.15.10</p><p>​不，我问的是你的本地地址 No,your local address</p><p>​127.0.0.1</p><p>​我的意思是你的物理地址 I mean your physical address</p><p>​29:01:38:62:31:58</p><p>​…fuck</p><ol start="4"><li><p>早晨一女生背着一堆书出了图书馆，结果警报响了，大妈让女生看看是哪本书把警报弄响了，那女生把书倒出来，准备一本一本的测。大妈见状急了，把书分成两份，第一份过了一下，响了。又把这一份分成两份接着测，三回就找到了，大妈用鄙视的眼神看着女生，仿佛在说O(n)和O(logn)都分不清。</p><p>|</p><p>|</p><p>|</p><p>|</p><p>|</p><p>|</p><p>|</p><p>|</p><p>|</p><p>|</p><p>|</p><p>|</p><p>|</p><p>|</p><p>|</p><p>|</p><p>|</p><p>|</p><p>|</p><p>|</p><p>|</p><p>|</p><p>|</p><p>|</p><p>|</p><p>|</p><p>|</p><p>|</p><p>|</p><p>|</p><p>|</p><p>|</p><p>|</p><p>|</p><p>|</p><p>|</p><p>|</p><p>|</p><p>|</p><p>|</p><p>|</p></li></ol><p>​结果图书馆丢了n-1本书。</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笑话</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python库-time</title>
    <link href="/2023/11/16/Python%E5%BA%93-time/"/>
    <url>/2023/11/16/Python%E5%BA%93-time/</url>
    
    <content type="html"><![CDATA[<h4 id="知识点"><a href="#知识点" class="headerlink" title="知识点:"></a>知识点:</h4><ul><li><p>时间戳timestamp </p><p>自1970年1月1日8:00以来的秒数</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-number">1700143008</span>.<span class="hljs-number">9008837</span><br></code></pre></td></tr></table></figure></li><li><p>时间对象struct_time</p><p>即一个时间元组</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">time.struct_time(<span class="hljs-attribute">tm_year</span>=2023, <span class="hljs-attribute">tm_mon</span>=11, <span class="hljs-attribute">tm_mday</span>=16, <span class="hljs-attribute">tm_hour</span>=14, <span class="hljs-attribute">tm_min</span>=1, <span class="hljs-attribute">tm_sec</span>=10, <span class="hljs-attribute">tm_wday</span>=3, <span class="hljs-attribute">tm_yday</span>=320, <span class="hljs-attribute">tm_isdst</span>=0)<br></code></pre></td></tr></table></figure></li><li><p>默认时间字符串default_time</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Thu</span> Nov <span class="hljs-number">16</span> <span class="hljs-number">21</span>:<span class="hljs-number">58</span>:<span class="hljs-number">46</span> <span class="hljs-number">2023</span><br></code></pre></td></tr></table></figure></li><li><p>自定义时间字符串format_time</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Thu</span> Nov <span class="hljs-number">16</span> <span class="hljs-number">23</span>:<span class="hljs-number">27</span>:<span class="hljs-number">54</span> <span class="hljs-number">2023</span><br></code></pre></td></tr></table></figure></li><li><p>GMT</p><p>格林尼治时间，是世界时和地球经线的起点</p></li><li><p>UTC</p><p>通用协调时间，一般可以当成GMT一眼的使用</p></li></ul><h4 id="获取时间"><a href="#获取时间" class="headerlink" title="获取时间"></a>获取时间</h4><ul><li><p>time.time()</p><p>获取当前时间的时间戳</p></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-number">1700143008.9008837</span><br></code></pre></td></tr></table></figure><ul><li><p>time.ctime()</p><p>返回一个表示当前日期和时间的字符串</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">Thu Nov <span class="hljs-number">16</span> <span class="hljs-number">21</span>:<span class="hljs-number">58</span>:<span class="hljs-number">46</span> <span class="hljs-number">2023</span><br></code></pre></td></tr></table></figure><ul><li><p>time.gmtime()</p><p>接受时间戳并返回时间对象，此时间为UTC时间</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">time.struct_time(tm_year=<span class="hljs-number">2023</span>, tm_mon=<span class="hljs-number">11</span>, tm_mday=<span class="hljs-number">16</span>, tm_hour=<span class="hljs-number">14</span>, tm_min=<span class="hljs-number">1</span>, tm_sec=<span class="hljs-number">10</span>, tm_wday=<span class="hljs-number">3</span>, tm_yday=<span class="hljs-number">320</span>, tm_isdst=<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><ul><li><p>time.localtime()</p><p>和上一函数功能相同，但返回的是本地时间</p></li></ul><h4 id="时间转换"><a href="#时间转换" class="headerlink" title="时间转换"></a>时间转换</h4><ul><li><p>time.asctime(time)</p><p>接受时间元组并返回默认时间字符串，time不传入会自动获取系统时间</p><p>返回默认格式为<code>%a %b %d %H:%M:%S %Y</code>，含义为:</p><ul><li>%A本地完整星期名称February</li><li>%a星期Feb</li><li>%m月份7</li><li>%B本地完整的月份名称November</li><li>%b月份Nov</li><li>%d日期27</li><li>%p上午&#x2F;下午AM</li><li>%H24小时制时间23</li><li>%I12小时制时间11</li><li>%M分钟 06</li><li>%S秒 36</li><li>%Y年份2023</li><li>%c完整的时间输出</li><li>%z与UTC时间的差值+HHMM或-HHMM表示</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">Thu Nov <span class="hljs-number">16</span> <span class="hljs-number">22</span>:<span class="hljs-number">57</span>:<span class="hljs-number">00</span> <span class="hljs-number">2023</span><br></code></pre></td></tr></table></figure></li><li><p>time.mktime(time)</p><p>接受时间元组并返回时间戳</p></li></ul><h4 id="时间格式化"><a href="#时间格式化" class="headerlink" title="时间格式化"></a>时间格式化</h4><ul><li><p>time.strftime(format,time)</p><p>接收以时间对象<strong>struct_time</strong>,并返回以自定义字符串所表示的当地时间，格式由format决定，time不传入会自动获取系统时间</p></li><li><p>time.striptime(string,format)</p><p>根据format规定的格式把一个时间字符串解析为时间元组</p></li></ul><h4 id="程序计时"><a href="#程序计时" class="headerlink" title="程序计时"></a>程序计时</h4><ul><li>time.process_counter()</li></ul><p>​返回当前进程执行CPU的时间总和，不包含睡眠时间</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">0.671875</span><br></code></pre></td></tr></table></figure><ul><li><p>time.perf_counter()</p><p>返回计时器的精准时间（系统运行时间），包含整个系统的睡眠时间</p></li><li></li></ul><h4 id="暂停时间（The-World）"><a href="#暂停时间（The-World）" class="headerlink" title="暂停时间（The World）"></a>暂停时间（The World）</h4><ul><li>time.sleep(secs)</li></ul><p>​推迟调用线程的运行，secs以秒数为单位</p><p>内容参考：<a href="https://zhuanlan.zhihu.com/p/107919729">学会掌控时间，python中时间模块（time）的用法</a>及微软copilot返回内容</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python批量生成问题</title>
    <link href="/2023/11/16/Python%E6%89%B9%E9%87%8F%E7%94%9F%E6%88%90%E6%96%87%E4%BB%B6/"/>
    <url>/2023/11/16/Python%E6%89%B9%E9%87%8F%E7%94%9F%E6%88%90%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">i=<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">11</span>)<br>file_name=<span class="hljs-string">&quot;文件名%d.txt&quot;</span> %i<br><span class="hljs-built_in">open</span>(file_name,<span class="hljs-string">&quot;w&quot;</span>)<br>i+=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>附上一个天干数版本的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">i=<span class="hljs-number">0</span><br>tian_gan=[<span class="hljs-string">&quot;甲&quot;</span>,<span class="hljs-string">&quot;乙&quot;</span>,<span class="hljs-string">&quot;丙&quot;</span>,<span class="hljs-string">&quot;丁&quot;</span>,<span class="hljs-string">&quot;戊&quot;</span>,<span class="hljs-string">&quot;己&quot;</span>,<span class="hljs-string">&quot;庚&quot;</span>,<span class="hljs-string">&quot;辛&quot;</span>,<span class="hljs-string">&quot;壬&quot;</span>,<span class="hljs-string">&quot;葵&quot;</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">10</span>):<br>    file_name=<span class="hljs-string">&quot;测试%s.txt&quot;</span> % tian_gan[i]<br>    <span class="hljs-built_in">open</span>(file_name,<span class="hljs-string">&#x27;w&#x27;</span>)<br>    i+=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安卓笔记</title>
    <link href="/2023/11/16/%E5%AE%89%E5%8D%93%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/11/16/%E5%AE%89%E5%8D%93%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h4 id="如何将视频资源放进apk中播放"><a href="#如何将视频资源放进apk中播放" class="headerlink" title="如何将视频资源放进apk中播放"></a>如何将视频资源放进apk中播放</h4><ol><li>将视频文件放到项目工程的 res&#x2F;raw 文件下</li><li>视频文件必须是Android支持的视频格式3gp, wmv, mp4, 且命名必须是小写字母，数字，下划线</li><li>在代码中引用这个资源文件时，必须使用R statics类，同时去除文件的后缀名—— R.name</li></ol>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>与门</title>
    <link href="/2023/11/12/%E4%B8%8E%E9%97%A8%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/11/12/%E4%B8%8E%E9%97%A8%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<ul><li><p>第一章 非门</p><ul><li><p>任务要求</p><ul><li>输入0输出1</li><li>输入1输出0</li></ul></li><li><p>实现</p><ul><li>添加一个非门——输入通电输出不通电，输入不通电输出通电</li></ul></li></ul></li><li><p>第二章 与门</p><ul><li><p>任务要求</p><ul><li>输入0 0 输出0</li><li>输入0 1输出0</li><li>输入1 0输出0</li><li>输入1 1输处1</li></ul></li><li><p>实现</p><ul><li>添加一个与门——只有两个输入都通电时才通电</li></ul></li></ul></li><li><h2 id="第三章-或门-任务要求"><a href="#第三章-或门-任务要求" class="headerlink" title="第三章 或门- 任务要求"></a>第三章 或门<br>- 任务要求</h2></li></ul>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>逻辑门</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vim使用</title>
    <link href="/2023/11/12/Vim%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/11/12/Vim%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<ul><li><p>x键删除字符</p></li><li><p>dw删除整个单词</p><ul><li>d2w删除接下来的两个单词</li></ul></li><li><p>d$删除到行尾</p></li><li><p>w到下一个单词头</p></li><li><p>e到下一个单词尾</p></li><li><p>$到行尾</p></li><li><p>u撤回</p><ul><li>Ctrl+R反撤回</li></ul></li><li><p>0到行首，包括空格</p></li><li><p>^到行首，不包括空格</p></li><li><p>G到文本最好一行首</p></li><li><p>gg到文本首行</p></li><li><p>number motion执行几次行动</p><ul><li>38j向下移动38次</li></ul></li><li><p>dd删除一整行</p></li><li><p>p在光标处粘贴先前删除的文本</p></li><li><p>r以替换光标处的字符</p><ul><li>移动光标到第一个错误，键入r和要更正的字符</li></ul></li><li><p>ce删除直到单词末尾的内容并进入编辑模式</p><ul><li>cw删除整个单词并进入编辑模式</li><li>c$删除直到行末并进入编辑模式</li></ul></li><li><p>Ctrl+G显示你在文档中的位置</p></li><li><p>number+G前往第数字行</p></li><li><p>&#x2F;+搜索的单词</p><ul><li>向下搜索下一个单词n</li><li>向上搜索下一个单词N</li></ul></li><li><p>？+向上搜索的单词</p></li><li><p>Ctrl+O回到之前的那个位置，Ctrl+I前进位置</p></li><li><p>%将光标移动到它对应的匹配括号上</p></li><li><p>:&#x2F;s&#x2F;old&#x2F;new&#x2F;g将一行中的old替换为new</p></li><li><p>:&#x2F;#,#s&#x2F;old&#x2F;new&#x2F;g其中#,#是更改的行号范围</p></li><li><p>:&#x2F;%s&#x2F;old&#x2F;new&#x2F;g更改全文件的old内容</p></li><li><p>:&#x2F;%s&#x2F;old&#x2F;new&#x2F;gc更改全文及的old内容，并给出替换与否的提示</p></li><li><p>:! 执行外部命令，如:!ls或者:!dir</p></li><li><p>:w Filename.**保存文件并更改文件名或者类型</p></li><li><p>v按住以选择</p></li><li><p>o光标下插入新的一行</p></li><li><p>O光标上插入新的一行</p></li><li><p>A在一句的末尾开始插入内容</p></li><li><p>R插入不止一句内容</p></li><li><p>y复制用v的选中内容，用p粘贴内容</p></li><li><p>选中后U将内容变成大写，u将内容变成小写，~将大小翻转</p></li><li><p>:e ~&#x2F;.vimrc 编辑Unix依赖</p></li><li><p>:e $VIM&#x2F;_vimrc编辑Windows依赖</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>杂记</title>
    <link href="/2023/11/12/%E6%9D%82%E8%AE%B0/"/>
    <url>/2023/11/12/%E6%9D%82%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<ul><li><p>阿克琉斯值剑就是科幻小说</p></li><li><p>主人公和父亲置气，爬上了一棵树并发誓不下来，直到他垂垂老矣，一个热气球为了采集气象信息，抛下了一根锚，他看到这根从热气球上垂下来的绳子，就扑上去抓住它，最后随着热气球飞走了。</p></li><li><p>记录一个地狱笑话</p><ul><li>Level 1 Installing Arch While Parents are Arguing</li><li>Level 2 Install Gentoo in family court</li><li>Level 3 Open bsd in the orphanage</li><li>Level 4 Temple OS in the depression clinic</li></ul></li><li><p>日本女排吉村志惠</p></li><li><p>美是生活，你没办法去越过它去创造一种你没见识过的生活</p></li><li><p>叙事就是会在人的身上留下痕迹，时间不到痕迹不够重</p></li><li><p>很急的音乐配上慢动作的画面就很有冲击力</p></li><li><p>管乐开场，抒情的地方用弦乐，就非常大场面，温柔的瞬间，勇敢的地方，运动会的感觉</p></li><li><p>教堂的钟声，号角，风笛，史诗感就出现了</p></li><li><p>钟声加合唱加交响乐</p></li><li><p>转调就是一下子从一个调就转到另一个调</p></li><li><p>小提琴＋钢琴算是孤独组合了</p></li><li><p>鼓点代表前进的步伐，表示一直在推进的行军，很有压迫感</p></li><li><p>塔防特别考验音乐，因为大部分时间都在看着</p></li><li><p>ToB目标用户是企业的业务，一般分为传统软件和SaaS两种模式；ToC个人相关的业务，如常用的地图App，聊天App等</p></li><li><p>void函数的返回值可以写成return;</p></li><li><p>同期声——在拍摄现场录制的声音</p></li><li><p>在超能力战斗漫画变得这么复杂的今天，波纹那种很素的超能力战斗故事写的精彩了反而很有趣</p></li><li><p>写个公路片挺有意思的啊</p></li><li><p>《游戏玩家》</p></li><li><p>《如何不切实际地解决实际问题》</p></li><li><p>《我是遗物整理师》</p></li><li><p>《跟动物交换身体》</p></li><li><p>《蚂蚁的故事》</p></li><li><p>《非官方修炼手册》</p></li><li><p>云南玉溪市抚仙湖 在开发之前水特别清澈，湖中心向下看可见30米，在这个环境里边给我一根网线，我能统治世界</p></li><li><p>只要中国人还有好奇心，科幻就有生命</p></li><li><p>《玫瑰与蠕虫》</p></li><li><p>《Children of Death Earth》太空类游戏</p></li><li><p>清水洁</p></li><li><p>《桶川跟踪狂杀人事件》《足利女童连续失踪事件》</p></li><li><p>拿可乐举例，在物质生活极为丰富的今天，它是一种稀缺资源吗？明显不是，那人类的猴子本能如何适应这种现状呢？在以前人们可以猴王有二十个，二百个桃子，普通猴子有一个桃子，但是现在，你再能喝你能喝一吨可乐吗？因此现代的猴王为了彰显自己比普通猴子的牛逼之处就会产生一些非常有意思的设定——我能消费混元无极镶金小龙虾，那我就比你吃普通小龙虾的猴子牛逼，再进一步是什么呢？我能消费别人的时间，那我就比普通猴子牛逼，因此出现了毫无意义仅为了消费别人时间的工作，最终能够掌握别人劳动时间的猴子就成了现代的猴王，肆意浪费他人的时间以证明自己存在的重要性</p></li><li><p>劳动价值理论不再被普通价值所熟悉，“象征地位的不再是生产力而是购买力”，时至今日，当人们提到“财富创造者”大家自动对应的是资本家而不是工人，因为工人身上人的标签已经被剥除了</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows CMD命令</title>
    <link href="/2023/11/12/Windows%E5%91%BD%E4%BB%A4/"/>
    <url>/2023/11/12/Windows%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<ul><li><p>getmac &#x2F;v<br>获得mac地址</p></li><li><p>assoc<br>assoc .mp4&#x3D;VLC.vlc</p></li><li><p>chkdsk<br>chkdsk &#x2F;f</p></li><li><p>tasklist | findstr script<br>找到进程中的脚本</p></li><li><p>netsh wlan show wlanrepor<br>展示wlan的报告</p></li><li><p>netsh interface ip show address | find “IP Adress”<br>显示ip地址</p></li><li><p>netsh advfirewall set allprofiles state off<br>  关闭Windows防火墙<br>  netsh advfirewall set allprofiles state on</p></li><li><p>netstat<br>查看打开的接口</p></li><li><p>powercfg -h off</p><p>关闭休眠模式</p><p>btw,这锤子模式真的消耗了C盘的大量空间</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux文件系统</title>
    <link href="/2023/11/12/Linux%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
    <url>/2023/11/12/Linux%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<p>Linux</p><h4 id="文件系统的组成"><a href="#文件系统的组成" class="headerlink" title="文件系统的组成"></a>文件系统的组成</h4><ul><li><p><strong>一切皆文件</strong></p><p>不仅普通的文件和目录，包括块设备、管道，socket等一切都交给文件系统管理。</p></li></ul><p>​Linux文件系统会为每个文件分配两个数据结构<strong>索引节点(index node)</strong> 和 **目录项(directory entry)**，用来记录文件的元信息和目录层次结构</p><ul><li><p><strong>索引节点（inode）</strong></p><p>用来记录文件的元信息，包括inode编号、文件大小、访问权限、创建时间、数据在磁盘的位置等。索引节点是文件的唯一标识，且和文件一一对应，也同样会被储存，占用磁盘空间，可以用命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> -i<br></code></pre></td></tr></table></figure><p>来查看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">30978 network             30937 security             7861 bluetooth<br></code></pre></td></tr></table></figure></li><li><p><strong>目录项（dentry）</strong></p><p>用来记录文件的名字、索引节点指针以及与其他目录项的层级关联关系。多个目录项管理起来就会形成目录结构，但它与索引节点不同的是，目录项是由内核维护的一个数据结构，不会存在磁盘里，而是缓存在内存。</p></li></ul><p>​由于索引节点唯一标识一个文件，而目录项记录着文件名，所以目录项和索引节点的关系是多对一，</p><p>​<strong>目录和目录项不是一个东西</strong>，目录是个文件，持久化存储在磁盘里，而目录项是内核一个数据结构，缓存在内存里。</p><p>​如果查询目录频繁从磁盘里读取，效率会很低，因此内核会把已经读过的目录用目录项这个数据结构缓存在内存，然后下次读到相同的目录之后直接从内存读就可以，大为提高了文件系统的效率。</p><p>​目录项这个数据结构不只是表示目录，也可以表示文件。</p><p>​磁盘读写的最小单位是扇区，扇区的大小只有512B，文件系统将多个扇区组成一个逻辑快，每次读写的最小单位是逻辑块（数据块），Linux中的逻辑块大小为4KB，一次性读取8个扇区</p><h4 id="虚拟文件系统"><a href="#虚拟文件系统" class="headerlink" title="虚拟文件系统"></a>虚拟文件系统</h4><h4 id="文件的实用"><a href="#文件的实用" class="headerlink" title="文件的实用"></a>文件的实用</h4><h4 id="文件的储存"><a href="#文件的储存" class="headerlink" title="文件的储存"></a>文件的储存</h4><ul><li>连续空间储存</li><li>非连续空间储存</li></ul><h4 id="空闲空间管理"><a href="#空闲空间管理" class="headerlink" title="空闲空间管理"></a>空闲空间管理</h4><ul><li>空闲表法</li><li>空闲链表法</li><li>位图法</li></ul><h4 id="文件系统的结构"><a href="#文件系统的结构" class="headerlink" title="文件系统的结构"></a>文件系统的结构</h4><h3 id="目录的储存"><a href="#目录的储存" class="headerlink" title="目录的储存"></a>目录的储存</h3><ul><li>列表</li><li>哈希表</li></ul><h3 id="软链接和硬链接"><a href="#软链接和硬链接" class="headerlink" title="软链接和硬链接"></a>软链接和硬链接</h3><h3 id="文件I-O"><a href="#文件I-O" class="headerlink" title="文件I&#x2F;O"></a>文件I&#x2F;O</h3><ul><li><p>缓冲与非缓冲I&#x2F;O</p></li><li><p>直接与非直接I&#x2F;O</p></li><li><p>阻塞与非阻塞I&#x2F;O VS 同步与异步I&#x2F;O</p></li><li><p>bin<br><strong>binaries n.二进制</strong><br>command binaries n.二进制命令文件<br>cat-concatenate v.连接 adj.连接的</p><p>可以用可以用sudo cp ls homovexillues将ls的二进制执行文件复制到homovexillues，然后用sudo rm -r 删除ls命令，</p></li><li><p>sbin</p></li><li><p>usr</p><ul><li>bin</li><li>include</li><li>lib</li><li>sbin</li></ul></li><li><p>home</p></li><li><p>root</p></li><li><p>etc</p></li><li><p>dev</p></li><li><p>media</p></li><li><p>mnt</p></li><li><p>boot</p></li><li><p>lib</p></li><li><p>var</p><ul><li>cache</li><li>log</li><li>spool</li><li>tmp</li></ul></li></ul><p><em>Ps.文章内容参考自<a href="https://xiaolincoding.com/os/6_file_system/file_system.html#%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%BB%84%E6%88%90">7.1 文件系统全家桶 |小林coding</a>，侵删。</em></p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux命令</title>
    <link href="/2023/11/12/Linux%E5%91%BD%E4%BB%A4/"/>
    <url>/2023/11/12/Linux%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h3 id="cal"><a href="#cal" class="headerlink" title="cal"></a>cal</h3><p>  输出一个简单的日历</p><h3 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h3><p>  显示文件内容</p><h3 id="cd"><a href="#cd" class="headerlink" title="cd"></a>cd</h3><p>  更改目录并进入</p><ul><li>cd ..<br>回到上一个目录</li><li>cd<br>回到home文件夹</li></ul><h3 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a>chmod</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> [<span class="hljs-built_in">who</span>] [operator] [permission] [file]<br>[<span class="hljs-built_in">who</span>]<br>u文件所有者<br>g文件所属组<br>o其他用户<br>a所有用户<br>[operator]<br>+增加权限<br>-删除权限<br>=设置权限<br>[permission]<br>r可读 4<br>w可写 2<br>x可执行 1<br>无权限 0<br>7=4+2+1 读写运行权限<br>5=4+1 读和运行权限<br>4=4 只读权限<br><br><span class="hljs-built_in">chmod</span> 444 file.txt <span class="hljs-comment">#赋予文件只读权限，或者</span><br><span class="hljs-built_in">chmod</span> -r--r--r-- file.txt<br></code></pre></td></tr></table></figure><h3 id="clear"><a href="#clear" class="headerlink" title="clear"></a>clear</h3><p>  清理屏幕</p><h3 id="cmp"><a href="#cmp" class="headerlink" title="cmp"></a>cmp</h3><p>  比较两个文件的异同</p><h3 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h3><p>  复制文件到新的文件夹或者将一个文件复制到另一个文件</p><h3 id="curl"><a href="#curl" class="headerlink" title="curl"></a>curl</h3><p>  从网络下载文件</p><ul><li>curl [] -&gt; []</li></ul><h3 id="diff"><a href="#diff" class="headerlink" title="diff"></a>diff</h3><p>  比较两个文件的异同并告诉我们差异之处</p><h3 id="df"><a href="#df" class="headerlink" title="df"></a>df</h3><p>  内存占用情况</p><h3 id="du"><a href="#du" class="headerlink" title="du"></a>du</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">du</span><br><span class="hljs-comment"># 显示目录和文件所占空间</span><br><span class="hljs-built_in">du</span> file_name/dir_name<br><span class="hljs-comment"># 显示特定文件或文件夹大小</span><br><span class="hljs-built_in">du</span> -h<br><span class="hljs-comment"># 以方便阅读的格式显示所占空间</span><br><span class="hljs-built_in">du</span> -s<br><span class="hljs-comment"># 显示指定目录或文件的总大小</span><br></code></pre></td></tr></table></figure><h3 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h3><p>  输出一些内容或向文件中添加内容</p><h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><p>  查找文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash">find . file.txt<br><span class="hljs-comment"># 找到当前目录下名为file.txt的文件</span><br>find /bin -name <span class="hljs-string">&quot;hello*&quot;</span><br><span class="hljs-comment"># 找到bin文件夹下所有以“hello&quot;开头的文件</span><br><span class="hljs-comment">#####################-size</span><br>find /home -size +1M<br><span class="hljs-comment"># 找到/home目录下大于1MB的文件</span><br>find /home -size -1M<br><span class="hljs-comment"># 找到/home目录下小于1MB的文件</span><br>finde /home -size +10M -size -1G<br><span class="hljs-comment"># 找到/home目录下大于1MB小于1G的文件</span><br><span class="hljs-comment"># k:KB;M:MB;G:GB</span><br><span class="hljs-comment">####################-a/c/m+min/time</span><br>find /home -mtime +7<br><span class="hljs-comment"># 查找/home目录下在7*24小时外修改过文件数据的文件</span><br>find . -ctime 30<br><span class="hljs-comment"># 当前目录及其子目录下所有正好30天前修改过文件状态的文件</span><br>find . -atime +365<br><span class="hljs-comment"># 当前目录及其子目录下一年外被访问的文件</span><br>find / -<span class="hljs-built_in">type</span> d -name <span class="hljs-string">&quot;zhman&quot;</span> 2&gt;/dev/null<br><span class="hljs-comment"># -type </span><br><span class="hljs-comment"># d表示只查找目录</span><br><span class="hljs-comment"># f表示普通文件</span><br></code></pre></td></tr></table></figure><h3 id="free"><a href="#free" class="headerlink" title="free"></a>free</h3><p>  输出内存状况</p><h3 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">grep [options] pattern [files]<br></code></pre></td></tr></table></figure><ul><li>pattern 正则表达式</li><li>files 要查找的文件名，可以同时查找多个文件，如果省略files参数，则默认从标准输入中读取数据</li></ul><p>常用选项包括</p><ul><li>-i 忽略大小写进行匹配</li><li>-v 反向查找，只打印不匹配的行</li><li>-n 显示匹配行的行号</li><li>-r 递归查找子目录中的文件</li><li>-l 只打印匹配的文件名</li><li>-c 只打印匹配的行数</li></ul><h3 id="head"><a href="#head" class="headerlink" title="head"></a>head</h3><p>  只看文档的开头</p><h3 id="history"><a href="#history" class="headerlink" title="history"></a>history</h3><p>  查看所有执行过的历史记录</p><h3 id="htop"><a href="#htop" class="headerlink" title="htop"></a>htop</h3><p>  用一种更花哨的方式看系统性能的进程</p><h3 id="ip"><a href="#ip" class="headerlink" title="ip"></a>ip</h3><p>用于管理和查看网络接口，包括物理网卡和虚拟接口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell">ip link <br><span class="hljs-meta prompt_"># </span><span class="language-bash">用于管理和查看网络接口，包括物理网卡和虚拟接口</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">常见用法包括启用或禁用接口，修改接口属性，查看接口状态等</span><br>ip link show <br><span class="hljs-meta prompt_"># </span><span class="language-bash">显示所有网络接口的状态，包括链路层信息，IP地址等</span><br>ip link set dev eth0 up <br><span class="hljs-meta prompt_"># </span><span class="language-bash">启用名为eth0的网卡</span><br>ip link set eth0 mtu 1500<br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置eth0的最大传输单元（MTU）为1500字节</span><br>ip link set eth0 name vbird<br><span class="hljs-meta prompt_"># </span><span class="language-bash">将eth0的名称修改为vbird（需要在网卡关闭时进行）</span><br><br>ip addr<br><span class="hljs-meta prompt_"># </span><span class="language-bash">用于管理和查看ip地址信息</span><br>ip addr add 192.168.1.10/24 dev eth0<br><span class="hljs-meta prompt_"># </span><span class="language-bash">将IP地址192.168.1.10添加到eth0网卡</span><br>ip addr del 192.168.1.10/24 dev eth0<br><span class="hljs-meta prompt_"># </span><span class="language-bash">从网卡中删除指定的IP地址</span><br></code></pre></td></tr></table></figure><h3 id="kill"><a href="#kill" class="headerlink" title="kill"></a>kill</h3><p>  结束系统进程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">ps -aux | grep thisbash<br><span class="hljs-comment"># 显示所有进程，并抓取内容中含有“thisbash”内容的进程，然后查看process ID，也就是PID</span><br><br><span class="hljs-built_in">kill</span> -9 6599<br><span class="hljs-comment"># -9表示强制杀掉进程</span><br></code></pre></td></tr></table></figure><h3 id="less"><a href="#less" class="headerlink" title="less"></a>less</h3><p>  只看文档的一页</p><h3 id="ln"><a href="#ln" class="headerlink" title="ln"></a>ln</h3><p>  链接文件</p><h3 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> -l<br><span class="hljs-comment"># 查看文件列表，包括属性</span><br><br><span class="hljs-built_in">ls</span> -al<br><span class="hljs-comment"># 查看隐藏文件</span><br></code></pre></td></tr></table></figure><h3 id="man"><a href="#man" class="headerlink" title="man"></a>man</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># man命令可以给出命令的帮助文档</span><br>apt install manpages-zh<br><span class="hljs-comment"># 下载中文包将其汉化</span><br>apt install language-pack-zh-han*<br><span class="hljs-comment"># 如果系统没有预装中文语言包，需要以此命令安装</span><br>locale -a<br><span class="hljs-comment"># 可以通过此命令查看系统中的语言环境</span><br>vim ~/.bashrc<br><span class="hljs-built_in">alias</span> cman=<span class="hljs-string">&#x27;man -M /usr/share/man/zh_CN&#x27;</span><br><span class="hljs-comment"># 编辑.bashrc命令以将cman命令添加到shell中</span><br><span class="hljs-built_in">source</span> ~/.bashrc<br><span class="hljs-comment"># 重新加载shell以使之生效</span><br></code></pre></td></tr></table></figure><h3 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h3><p>  创建新的文件夹</p><h3 id="more"><a href="#more" class="headerlink" title="more"></a>more</h3><p>  将要查看的文件内容直接输出在终端上</p><h3 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h3><p>  移动文件</p><h3 id="neofetch"><a href="#neofetch" class="headerlink" title="neofetch"></a>neofetch</h3><p>  显示系统字符图像和系统信息</p><h3 id="passwd"><a href="#passwd" class="headerlink" title="passwd"></a>passwd</h3><p>  更改密码</p><ul><li>sudo passwd nick<br>修改密码</li></ul><h3 id="pkill"><a href="#pkill" class="headerlink" title="pkill"></a>pkill</h3><p>  不需要知道PID</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">pkill -f thisbash<br><span class="hljs-comment"># 直接结束含有thisbash的进程</span><br></code></pre></td></tr></table></figure><h3 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h3><p>  查看系统进程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">ps -A<br><span class="hljs-comment"># 列出所有的进程</span><br>ps -aux<br><span class="hljs-comment"># 查看系统所有包含其他使用者的进程，输出格式为:</span><br><span class="hljs-comment"># USER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMAND</span><br>ps -u root<br><span class="hljs-comment"># 显示root用户进程信息</span><br></code></pre></td></tr></table></figure><h3 id="pwd"><a href="#pwd" class="headerlink" title="pwd"></a>pwd</h3><p>  我在哪儿，显示目前的位置</p><h3 id="reboot"><a href="#reboot" class="headerlink" title="reboot"></a>reboot</h3><p>  重启</p><h3 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h3><p>  删除文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> -r<br><span class="hljs-comment"># 删除目录以及其下的所有文件</span><br><span class="hljs-built_in">rm</span> -i<br><span class="hljs-comment"># 删除前逐一询问确认</span><br><span class="hljs-built_in">rm</span> -f<br><span class="hljs-comment"># 即使是只读的档案，也直接删除，无需确认</span><br></code></pre></td></tr></table></figure><h3 id="shutdown"><a href="#shutdown" class="headerlink" title="shutdown"></a>shutdown</h3><p>  关机，默认60s</p><ul><li>shutdown now<br>立刻关机</li></ul><h3 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h3><p>  将文件按字母顺序对内容进行排序</p><h3 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h3><h3 id="sudo"><a href="#sudo" class="headerlink" title="sudo"></a>sudo</h3><p>  以管理员权限执行命令</p><h3 id="su"><a href="#su" class="headerlink" title="su"></a>su</h3><p>  切换用户</p><ul><li>su cyber_eye</li><li>exit<br>退出用户</li></ul><h3 id="systemd"><a href="#systemd" class="headerlink" title="systemd"></a>systemd</h3><p>  涉及到操控系统方方面面的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl reboot<br><span class="hljs-comment"># 重启系统</span><br><br>sudo systemctl poweroff<br><span class="hljs-comment"># 关闭系统，切断电源</span><br><br>sudo systemctl halt<br><span class="hljs-comment"># CPU停止工作</span><br><br>sudo systemctl <span class="hljs-built_in">suspend</span><br><span class="hljs-comment"># 暂停系统</span><br><br>sudo systemctl hibernate<br><span class="hljs-comment"># 让系统进入冬眠状态</span><br><br>sudo systemctl hybird-sleep<br><span class="hljs-comment"># 让系统进入交互式休眠状态</span><br><br>sudo systemctl rescue<br><span class="hljs-comment"># 启动进入救援状态（单用户状态）</span><br></code></pre></td></tr></table></figure><h3 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h3><p>  只看文档的末尾</p><h3 id="touch"><a href="#touch" class="headerlink" title="touch"></a>touch</h3><p>  创建一个文件</p><h3 id="top"><a href="#top" class="headerlink" title="top"></a>top</h3><p>  查看正在消耗系统性能的进程</p><h3 id="unzip"><a href="#unzip" class="headerlink" title="unzip"></a>unzip</h3><p>  解压缩文件</p><h3 id="useradd-adduser"><a href="#useradd-adduser" class="headerlink" title="useradd&#x2F;adduser"></a>useradd&#x2F;adduser</h3><p>  添加一个新用户&#x2F;添加一个用户，可以指定密码等参数</p><h3 id="whereis"><a href="#whereis" class="headerlink" title="whereis"></a>whereis</h3><p>  所有命令所在文件夹</p><h3 id="which"><a href="#which" class="headerlink" title="which"></a>which</h3><p>  找到命令的位置</p><h3 id="whoami"><a href="#whoami" class="headerlink" title="whoami"></a>whoami</h3><p>  输出我的用户名</p><h3 id="wget"><a href="#wget" class="headerlink" title="wget"></a>wget</h3><p>  从网络下载文件</p><h3 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h3><p>  创建压缩文件</p><ul><li>zip [] []</li></ul>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo+Github搭建博客记录</title>
    <link href="/2023/11/12/hexo+GitHub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AE%B0%E5%BD%95/"/>
    <url>/2023/11/12/hexo+GitHub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<p>温故而知新，加上疫情之后记忆力感觉不比从前了，所以要养成随手记笔记的好习惯，免得未来某一天连自己的代码和操作都看不懂了（捂脸）</p><h2 id="序"><a href="#序" class="headerlink" title="序"></a>序</h2><p>使用Hexo+Github Pages搭建的个人博客属是一个静态网站，但是可以达到一些动态的交互效果。</p><blockquote><p>静态网站：用户和Web页面之间不能做一些交互</p><p>动态网站：允许用户和网站做一些交互</p></blockquote><p>静态网站大致运作流程如下</p><p><img src="https://segmentfault.com/img/remote/1460000022490307" alt="原图像来自https://segmentfault.com/a/1190000022490303"></p><p>Github pages是Github公司提供的免费静态网站托管服务,当把HTML等资源文件存放到GitHub指定的仓库中时，GitHub Pages服务会对这些文件进行处理并把它展示为一个网站，因此其可以代替Web服务器的功能，只需要将在本地生成的HTML等资源文件上传到GitHub的仓库中即可实现类似的Web服务器功能，可以响应请求并把相应的资源文件发送给客户端。</p><p>相比于Dijango、Flask、Spring等Web框架，hexo对相关编程语言基础的需求不高，可以将Markdown文本快速生成html文件，大大提升效率。</p><h2 id="①环境"><a href="#①环境" class="headerlink" title="①环境"></a>①环境</h2><p>node.js下载安装后npm安装hexo博客，代码使用如下</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><p>安装完成后运行</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">hexo -v<br></code></pre></td></tr></table></figure><p>来确认安装情况，出现如下报错：</p><h6 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h6><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">无法加载文件C:\Users\Administrator\AppData\Roaming\npm\hexo.ps1，因为在此系统中禁止执行脚本。有关详细信息，请参阅 &quot;get-<span class="hljs-built_in">help</span> about_signing&quot;。<br></code></pre></td></tr></table></figure><h6 id="解决方法如下"><a href="#解决方法如下" class="headerlink" title="解决方法如下"></a>解决方法如下</h6><p>管理员权限运行Powershell，执行</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">get-ExecutionPolicy</span><br>返回状态：Restricted表示状态是禁止的<br>执行命令<br><span class="hljs-built_in">set-ExecutionPolicy</span> RemoteSigned来开启<br>选择Y<br></code></pre></td></tr></table></figure><p>选定位置，用</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">hexo <span class="hljs-literal">-init</span> blog<br></code></pre></td></tr></table></figure><h6 id="出现问题"><a href="#出现问题" class="headerlink" title="出现问题"></a>出现问题</h6><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">npm ERR! Error: EPERM: operation not permitted, mkdir <span class="hljs-string">&quot;&quot;</span><br></code></pre></td></tr></table></figure><h6 id="错误原因"><a href="#错误原因" class="headerlink" title="错误原因"></a>错误原因</h6><p>权限不够</p><h6 id="解决方法如下-1"><a href="#解决方法如下-1" class="headerlink" title="解决方法如下"></a>解决方法如下</h6><img src="https://raw.githubusercontent.com/Homovexillues/image_bed/main/image/change_the_authority.png" /><p>在属性中将文件夹的用户完全控制权限打开，重新执行命令。</p><p>创建blog文件夹并初始化，此时可以尝试</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">hexo <span class="hljs-literal">-g</span> 静态部署<br>hexo <span class="hljs-literal">-s</span> 开始本地服务器<br></code></pre></td></tr></table></figure><h6 id="出现问题-1"><a href="#出现问题-1" class="headerlink" title="出现问题"></a>出现问题</h6><p>打开<a href="http://localhost:4000的尝试以失败告终">http://localhost:4000的尝试以失败告终</a></p><h6 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h6><p>4000端口被占用了，用</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">hexo server <span class="hljs-literal">-p</span> <span class="hljs-number">5000</span><br></code></pre></td></tr></table></figure><p>来更改端口号后重试，成功打开<a href="http://localhost:5000/">http://localhost:5000</a></p><h2 id="②部署"><a href="#②部署" class="headerlink" title="②部署"></a>②部署</h2><p>本地部分完成后，将其部署到Github上的自建库里</p><p>这里首先要新建一个GitHub库，命名为“用户名.github.io”的公共库，创建后会默认自动启动HTTPS</p><p>然后安装<strong>hexo-deployer-git</strong>插件：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">npm install hexo<span class="hljs-literal">-deployer-git</span> <span class="hljs-literal">--save</span><br></code></pre></td></tr></table></figure><p>安装成功后修改**_config.yml**文件内的URL部分和Deployment部分：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">url:</span> <span class="hljs-string">https://用户名.github.io</span><br><br><span class="hljs-attr">deploy:</span><br><span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br><span class="hljs-attr">repository:</span> <span class="hljs-string">git@github.com:用户名/用户名.github.io.git</span><br><span class="hljs-attr">branch:</span> <span class="hljs-string">main</span><br></code></pre></td></tr></table></figure><p>上传之前别忘了先连接github并配置ssh密匙:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;Github用户名&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;Github邮箱&quot;</span><br>ssh-keygen -t rsa -C <span class="hljs-string">&quot;Github邮箱&quot;</span><br></code></pre></td></tr></table></figure><p>再将</p><p>Windows：C:\Users\用户名\.ssh下的id_rsa.pub</p><p>Linux： &#x2F;root&#x2F;.ssh&#x2F;id_rsa</p><p>文件中的密匙添加到GitHub上的个人设置-ssh keys中，配置好后可以用<code>ssh -T git@github.com</code>来验证是否连接成功</p><p>然后运行<code>hexo d</code>将网站部署到Github页面</p><p>这样访问https:&#x2F;&#x2F;用户名.github.io就能看到刚才做好的Hexo网站了</p><h2 id="③解决图床问题"><a href="#③解决图床问题" class="headerlink" title="③解决图床问题"></a>③解决图床问题</h2><p>建立一个新的Github库用来存放图片，下载并安装工具<a href="https://github.com/Molunerfinn/PicGo">PicGo</a>用于快速上传图片到Github图床库并获取图片URL链接</p><p>在Github的Setting最下方的Developer Settings，Personal access tokens生成一个token，只选repo那栏就成，在PicGo中设置好之后直接拖拽上传就成了</p><h2 id="将hexo文件夹同步并自动上传"><a href="#将hexo文件夹同步并自动上传" class="headerlink" title="将hexo文件夹同步并自动上传"></a>将hexo文件夹同步并自动上传</h2><p>将hexo文件夹放到OneDrive上以便Windows多端方便对其进行编辑，并在服务器上安装<a href="https://github.com/abraunegg/onedrive">OneDrive</a>(非官方)以便在手机上通过ssh进行编辑和设置定时上传到GitHub功能</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2077V震天同人随笔</title>
    <link href="/2023/11/12/2077V%E9%9C%87%E5%A4%A9%E5%90%8C%E4%BA%BA%E9%9A%8F%E7%AC%94/"/>
    <url>/2023/11/12/2077V%E9%9C%87%E5%A4%A9%E5%90%8C%E4%BA%BA%E9%9A%8F%E7%AC%94/</url>
    
    <content type="html"><![CDATA[<p>“无名小卒？还是名扬天下？”</p><p>200多斤的大黑胖子在黑色高级轿车里对着面前的佣兵问出了这个问题，事实上，他现在心里已经有点发毛了。</p><p>他旁边坐着的这个人从刚才上车开始就一言不发，脸上始终挂着那“爽朗”的露出所有牙齿的微笑，只见这人：</p><p>身躯凛凛，脸板堂堂。一双歧路司光射寒星，两弯眉浑如刷漆。胸板横阔，有万夫难敌之威风；骨健筋强，似亚当重锤临座上；如同天上降魔主，真是人间太岁神。</p><p>德克斯特从V上车开始就开始和V絮絮叨叨，无非是套话吹逼之类，但V就好像全没听见一样，一双眼睛幽光莹莹，隔着黑色高级轿车的防弹玻璃盯着沿途的一台台自动贩卖机，所有自动贩卖机但凡被他一看，顿时就哗哗地落下大量的小商品来，引得周围的流浪汉和市民一阵哄抢。要是有看到的帮派份子，更是直接浑身抽抽着倒在地上，眼看是不活了。当然，这一切是在车里还戴着墨镜的德克斯特和他的那个保镖没有注意到的。</p><p>听到德克斯特此言，V好像才终于将注意力放在了这个大黑胖子身上一样，脸上还是那个“和善”的笑容，就问了一句话：</p><p>“说，去哪儿，杀谁”</p><p>德克斯特心里已经开始发慌了，心说自己这莫不是招来了个赛博精神病，但是为了不刺激眼前的这个疯子，他只能绷着一种比较淡定的语气陈述了他所知道的情报，并掏出了数据芯片，谁成想这芯片刚从兜里掏出来就消失了，耳边传来的还有“砰”的一声，他赶紧抱头缩起身子，过了好一会儿，他才意识到自己身边的那个疯子消失了。</p><p>活见了鬼了！这他妈可是一辆在路上全速行驶的轿车里！</p><p>“哔”</p><p>他接收到了一条新的语音消息，打开一看，正是刚才那个据称“V”的佣兵给他发过来的。</p><p>“回家等电话！有事通知你！”</p><p>他回到他的安全屋好久之后才反应过来，那个疯子是看到了自己拿出数据芯片之后直接开启了义体“基安威斯坦”从自己手中夺走了数据芯片，然后打开车门跳出去了的动静。</p><p>“妈的，这个疯子，就不能…”话还没说完，他的通讯器又传来了“哔”的一声。</p><p>“又怎么了”他烦躁的打开聊天界面，今天雇了个疯子佣兵的事已经让他够闹心的了，如果这时候还有些什么别的破事儿……</p><p>结果是那个叫V的家伙发来的一个视频文件。</p><p>“草？他什么时候黑的我？”</p><p>大黑胖子突然发现自己通讯录里对那个佣兵的备注不知道什么时候被改成了“&gt;&gt;&gt;大名鼎鼎的V&lt;&lt;&lt;”，甚至还加上了符号特效。</p><p>“哈，大名鼎鼎…”大黑胖子不屑的冷笑着，点开了视频。</p><p>视频内容是刚才见到的那个佣兵V，脸上挂着那个有些神经质的露全齿微笑，左手搂着那个叫梅瑞斯托特的公司女的，右手搂着杰克小子，脚下还踩着一个军用科技的箱子，摆着一个拍照常用的老土pose，身边都是军用科技的特工在为他们鼓掌，身后是烧着熊熊大火正在疯狂冒烟的全食品工厂。</p><p>由于视频内容过于劲爆，德克斯特的大脑短路了将近一分钟才缓过来，然后他的第一反应就是特效。</p><p>“都，都是假的，吓不倒我的”他将视频转发给了自己的手下，让他帮忙检查一下视频的编辑痕迹，结果手下的消息窗口显示了将近一分钟的“对方正在输入中”，然后发过来一句话“老大，看新闻。”</p><p>“搅什么了？不知所谓的小子？”德克斯特这么想着，但还是打开了电视，一般情况下他都是一个很听劝的人，正所谓听人劝，吃饱饭嘛，从他的体型就看的出，他经常听人劝。</p><p>新闻54台在播报一条重要新闻，今天晚间，漩涡帮被除名了，一个不剩的全都杀了个干净，而这笔功劳被算在了那个叫梅瑞斯托特的女人头上，剩下的就是一些车轱辘话，展现了军用科技的权威啊，打破平衡啊，公司战争的序曲啊之类的。</p><p>不过这些屁话已经穿不进德克斯特的耳朵里了，现在他脑子里只有一件事——“我特么这是招了个什么活阎王啊。”</p>]]></content>
    
    
    <categories>
      
      <category>小说</category>
      
    </categories>
    
    
    <tags>
      
      <tag>赛博朋克</tag>
      
      <tag>2077</tag>
      
      <tag>同人</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于Typora的LaTex使用</title>
    <link href="/2023/11/10/%E5%9F%BA%E4%BA%8ETypora%E7%9A%84Latex%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/11/10/%E5%9F%BA%E4%BA%8ETypora%E7%9A%84Latex%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>使用前需要先配置好[Typora](<a href="https://typora.io/">Typora — a markdown editor, markdown reader.</a>)及<a href="https://github.com/jgm/pandoc/releases/latest">pandoc</a>以便能将写好的内容导出为LaTex形式</p><p>用$$以创建公式段</p><h4 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h4><ul><li>\\或者\newline</li></ul><p>$$<br>a\b\newline c<br>$$</p><h4 id="上标"><a href="#上标" class="headerlink" title="上标"></a>上标</h4><ul><li>a^2</li><li>a^{2222}</li></ul><p>$$<br>a^2<br>a^{2222}<br>$$</p><h4 id="下标"><a href="#下标" class="headerlink" title="下标"></a>下标</h4><ul><li>a_2</li><li>a_{2222}</li></ul><p>$$<br>a_2<br>a_{2222}<br>$$</p><h4 id="水平线"><a href="#水平线" class="headerlink" title="水平线"></a>水平线</h4><ul><li>\overline{}</li><li>\underline{}</li></ul><h1 id="overline-a-b-c"><a href="#overline-a-b-c" class="headerlink" title="$$\overline{a+b+c}"></a>$$<br>\overline{a+b+c}</h1><p>\underline{a+b+c}<br>$$</p><h4 id="平方根"><a href="#平方根" class="headerlink" title="平方根"></a>平方根</h4><ul><li>\sqrt[n]{a+b+c}</li></ul><p>$$<br>\sqrt[n]{a+b+c}<br>$$</p><h4 id="水平大括号"><a href="#水平大括号" class="headerlink" title="水平大括号"></a>水平大括号</h4><ul><li>\overbrace{2,3,4,\cdots,100}^{99}</li><li>\underbrace{2,3,4,…,100}^{99}</li></ul><p>$$<br>\overbrace{2,3,4,…,100}^{99}<br>\\underbrace{2,3,4,…,100}^{99}<br>$$</p><h4 id="分数"><a href="#分数" class="headerlink" title="分数"></a>分数</h4><ul><li>\frac{1}{2}</li></ul><p>$$<br>\frac{1}{2}<br>$$</p><h4 id="积分"><a href="#积分" class="headerlink" title="积分"></a>积分</h4><ul><li>\int_{a}^{b}</li></ul><p>$$<br>\int_{a}^{b}<br>$$</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LaTex</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pacman命令</title>
    <link href="/2023/11/08/pacman%E5%91%BD%E4%BB%A4/"/>
    <url>/2023/11/08/pacman%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo pacman -S [软件名]<br>sudo pacman -Sy <span class="hljs-comment">#更新Arch软件源</span><br>sudo pacman -Syy <span class="hljs-comment">#强制更新Arch软件源</span><br>sudo pacman -Su <span class="hljs-comment">#更新软件</span><br>sudo pcaman -Syu <span class="hljs-comment">#更新软件源并更新软件</span><br>sudo pacman -Syyu <span class="hljs-comment">#强制更新软件源并更新软件</span><br>sudo pacman -Ss vim <span class="hljs-comment">#查询软件源里所有名字里带vim的软件</span><br>sudo pacman -Ss ^vim <span class="hljs-comment">#支持正则表达式，查询所有以vim开头的软件</span><br>sudo pacman -R [软件名] <span class="hljs-comment">#卸载软件</span><br>sudo pacman -Rns [软件名] <span class="hljs-comment">#彻底卸载软件</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实用工具推荐</title>
    <link href="/2023/11/05/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7%E6%8E%A8%E8%8D%90/"/>
    <url>/2023/11/05/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7%E6%8E%A8%E8%8D%90/</url>
    
    <content type="html"><![CDATA[<p>这个帖子用来分享一些我个人用过并评价相当不错的工具，网站和资源</p><h3 id="哔哩下载姬"><a href="#哔哩下载姬" class="headerlink" title="哔哩下载姬"></a><a href="https://github.com/leiurayer/downkyi">哔哩下载姬</a></h3><p>上附Github链接，可以批量下载和下载会员视频</p><h3 id="kaf-cli"><a href="#kaf-cli" class="headerlink" title="kaf-cli"></a><a href="https://github.com/ystyle/kaf-cli">kaf-cli</a></h3><p>上附加Github链接，这是一个将txt文本转成epub和mobi类文档的工具</p><h3 id="Tickeys"><a href="#Tickeys" class="headerlink" title="Tickeys"></a><a href="https://www.yingdev.com/projects/tickeys">Tickeys</a></h3><p>一个可以给打字添加音效的工具</p>]]></content>
    
    
    <categories>
      
      <category>分享</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
